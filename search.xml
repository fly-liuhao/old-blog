<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>什么云开题答辩，我想开学！！！</title>
      <link href="/2020/03/06/%E4%BB%80%E4%B9%88%E4%BA%91%E5%BC%80%E9%A2%98%E7%AD%94%E8%BE%A9%EF%BC%8C%E6%88%91%E6%83%B3%E5%BC%80%E5%AD%A6%EF%BC%81%EF%BC%81%EF%BC%81/"/>
      <url>/2020/03/06/%E4%BB%80%E4%B9%88%E4%BA%91%E5%BC%80%E9%A2%98%E7%AD%94%E8%BE%A9%EF%BC%8C%E6%88%91%E6%83%B3%E5%BC%80%E5%AD%A6%EF%BC%81%EF%BC%81%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><p>由于疫情的原因，各个学校都没有开学，从二月底前不能开学到三月中旬前不能开学，又听到同学他们学校计划四月份开学，真被我放假回家时说中了，今年寒假是放假最长的一次。</p><p>昨晚刚准备吃晚饭，就看到消息说要进行开题答辩，来的太突然了吧，饭都没吃赶紧就进屋准备，我还以为会选择在白天进行，真是不按套路出牌。。。    </p><p><a href="https://cdn.jsdelivr.net/gh/fly-liuhao/ImageHosting/FlyBlog-PIC/2020-3-5-%E5%BC%80%E9%A2%98%E4%BA%91%E7%AD%94%E8%BE%A9.png" data-fancybox="group" data-caption="2020-3-5-开题云答辩" class="fancybox"><img alt="2020-3-5-开题云答辩" data-src="https://cdn.jsdelivr.net/gh/fly-liuhao/ImageHosting/FlyBlog-PIC/2020-3-5-%E5%BC%80%E9%A2%98%E4%BA%91%E7%AD%94%E8%BE%A9.png" class="lazyload" title="2020-3-5-开题云答辩"></a></p><p>这次云开题答辩其实很不理想，下来心情还挺难受QAQ，怪自己没有提前好好的准备，也气指导老师没有认真的看我的任务书和开题报告，导致我在答辩开始就被老师指出很多问题，可能是好久没有碰我的毕设了解相关的技术了，我回答也不是很流畅，总是结结巴巴，说不上来的那种，还有就是有时候真的差点讲出河南话。。。我这是怎么了？！！</p><p>昨天答辩完，正好任云康找我视频聊天，刚好答辩完心情不好的我，跟他就是一通抱怨 [捂脸]，然后了解到他也一样被老师给问住了，haha，都挺惨，心情立马好了好多，然后了解到他的指导老师光报告就提意见改了三版，对比之下，我的指导老师则是：有问题的我会回复，我也一直没有收到过回复</p><p>不过换个角度来看，这并不是什么坏事，正好也给我敲响了警钟，该学习了该学习了！！！</p><p>放假来这么多天，吃了睡睡了吃，学习没学多少，身上肉倒是多了几斤，一直陷入自我的愧疚当中，好在前段时间实在是受不了了，扯了网线，装了宽带，家里终于有网了（虽然很多时候都很卡。。。），然后开始学习？效率真的太低了，光一个博客都断断续续搭了四五天。。。小孩们每天吵吵闹闹，根本静不下心。然后就是帮着家里办事情，这里盖章那里盖章，这里不行要重新写，重新盖章，这里办理需要提前预约……，我有事你们星期一再来吧，我开着三轮摩托来回N次，生无所恋，我真的事太难了，到现在还没有办理好。。。</p><p>好想赶紧开学那，那样我就可以回到之前的学习状态了，每天跑跑步锻炼锻炼身体，写写毕设，没事刷刷微博，看看视频追追剧，真是不亦乐乎</p><p>再不开学，感觉自己就要云毕业了…….</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2020 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手把手教你快速搭建个人博客 Hexo + Github</title>
      <link href="/2020/03/03/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-Hexo-Github/"/>
      <url>/2020/03/03/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-Hexo-Github/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><blockquote><p>平时学习查找资料发现了很多个人博客，搭建的很不错，一直想抽空自己也动手实践一下，正好趁着新型冠状肺炎这段宅在家的空，赶紧搭建一下自己个人博客</p><ul><li>先来预览一下博主的个人博客：<a href="https://fly-liuhao.github.io/">Fly’s Blog</a></li><li>动手能力差的同学可以先跟着B站小匠的视频快速搭建一下，之后再参考这篇博文进行博客的其他设置：<a href="https://www.bilibili.com/video/av55851824?from=search&seid=10776387286422523572" target="_blank" rel="noopener">B站搭建博客教程传送门</a></li></ul></blockquote><p>@<a href="目录">TOC</a></p><h3 id="一、安装Git、Node-js以及Hexo"><a href="#一、安装Git、Node-js以及Hexo" class="headerlink" title="一、安装Git、Node.js以及Hexo"></a>一、安装Git、Node.js以及Hexo</h3><ul><li>Hexo 官方文档：<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a></li><li>这里不是重点，不赘述，具体参考Hexo的官方文档</li></ul><h3 id="二、搭建博客"><a href="#二、搭建博客" class="headerlink" title="二、搭建博客"></a>二、搭建博客</h3><h4 id="1-初始化一个博客"><a href="#1-初始化一个博客" class="headerlink" title="1. 初始化一个博客"></a>1. 初始化一个博客</h4><ul><li><code>hexo init</code> 或者 <code>hexo init + 文件夹名称</code><h4 id="2-安装博客所需组件"><a href="#2-安装博客所需组件" class="headerlink" title="2. 安装博客所需组件"></a>2. 安装博客所需组件</h4></li><li>进入到博客所在目录中，将 package.json 所需要的组件进行安装（会自动安装到目录中生成的node_modules文件夹下）：<code>npm install</code><h4 id="3-修改博客的基础配置信息"><a href="#3-修改博客的基础配置信息" class="headerlink" title="3. 修改博客的基础配置信息"></a>3. 修改博客的基础配置信息</h4></li><li>打开目录下的 _config.yml 文件，修改如下信息  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line"><span class="comment">// 博客的名称</span></span><br><span class="line">title: Fly<span class="string">'s Blog</span></span><br><span class="line"><span class="string">// 博客副标题，可以作为你的个签</span></span><br><span class="line"><span class="string">subtitle: '</span>Only <span class="keyword">if</span> you asked to see me, our meeting would be meaningful to me<span class="string">'</span></span><br><span class="line"><span class="string">// 博客的描述（博客的用途）</span></span><br><span class="line"><span class="string">description: '</span>心情，日记，随笔，读后感<span class="string">'</span></span><br><span class="line"><span class="string">// 博客的关键词。使用 , 分隔多个关键词。</span></span><br><span class="line"><span class="string">keywords: java, html, css, jQuery</span></span><br><span class="line"><span class="string">// 博客的作者</span></span><br><span class="line"><span class="string">author: Hao Liu</span></span><br><span class="line"><span class="string">// 语言设置，不同主题语言形式不一样，具体参考使用主题文件夹下的languages文件夹</span></span><br><span class="line"><span class="string">language: zh-CN</span></span><br><span class="line"><span class="string">// 时区设置，默认是系统的使用的时区，大陆可以填写 Asia/Shanghai</span></span><br><span class="line"><span class="string">timezone: '</span>Asia/Shanghai<span class="string">'</span></span><br></pre></td></tr></tbody></table></figure></div><h4 id="4-创建本地服务启动博客进行预览"><a href="#4-创建本地服务启动博客进行预览" class="headerlink" title="4. 创建本地服务启动博客进行预览"></a>4. 创建本地服务启动博客进行预览</h4></li><li>打开博客根目录下打开 Git Bash，依次输入一下指令<ul><li>清除缓存文件 (db.json) 和已生成的静态文件 (public)：<code>hexo clean</code><br> 一般再执行 <code>hexo generate</code> 前执行此命令，防止修改内容失效</li><li>生成静态文件：<code>hexo generate</code></li><li>启动服务器：<code>hexo server</code><br>默认情况下，访问网址为： <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></li></ul></li><li>打开浏览器，访问 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a><br>正常情况下即可查看到你的博客内容如下：<br><a href="https://img-blog.csdnimg.cn/20200302212948756.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0ZseV8xMjEz,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200302212948756.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0ZseV8xMjEz,size_16,color_FFFFFF,t_70" class="lazyload"></a><h3 id="三、部署-发布到github"><a href="#三、部署-发布到github" class="headerlink" title="三、部署 / 发布到github"></a>三、部署 / 发布到github</h3><h4 id="1-创建github仓库"><a href="#1-创建github仓库" class="headerlink" title="1. 创建github仓库:"></a>1. 创建github仓库:</h4></li><li>仓库名格式：<code>github用户名</code> + <code>.github.io</code><br>eg：Hins.github.io</li></ul><h4 id="2-安装-hexo-deployer-git"><a href="#2-安装-hexo-deployer-git" class="headerlink" title="2. 安装 hexo-deployer-git"></a>2. 安装 hexo-deployer-git</h4><ul><li>用于提交本地生成的页面内容到 github 仓库</li><li>命令： <code>npm install hexo-deployer-git --save</code></li></ul><h4 id="3-再次修改-config-yml-文件"><a href="#3-再次修改-config-yml-文件" class="headerlink" title="3. 再次修改 _config.yml 文件"></a>3. 再次修改 <code>_config.yml</code> 文件</h4><ul><li>修改博客地址以及博客的远程仓库链接  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span><br><span class="line"><span class="comment">// 此处博主使用的是 Github Page 做个人博客的 Websites</span></span><br><span class="line">url: https:<span class="comment">//fly-liuhao.github.io/</span></span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line"><span class="comment">// 此处填写你的 github 仓库，可以使用 http 或者 SSH(推荐使用)，分支必须为主分支 master</span></span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git<span class="meta">@github</span>.com:fly-liuhao/fly-liuhao.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></tbody></table></figure></div><h3 id="四、将Blog源代码提交到github"><a href="#四、将Blog源代码提交到github" class="headerlink" title="四、将Blog源代码提交到github"></a>四、将Blog源代码提交到github</h3><h4 id="1-在根目录初始化本地仓库"><a href="#1-在根目录初始化本地仓库" class="headerlink" title="1. 在根目录初始化本地仓库"></a>1. 在根目录初始化本地仓库</h4></li><li>初始化一个本地仓库：<code>git init</code><h4 id="2-将原文件添加到本地仓库"><a href="#2-将原文件添加到本地仓库" class="headerlink" title="2. 将原文件添加到本地仓库"></a>2. 将原文件添加到本地仓库</h4></li><li>将本地文件放到暂存区：<code>git add .</code></li><li>将暂存区的文件提交到本地仓库：<code>git commit -m '你的提交描述内容'</code><h4 id="3-将本地仓库-push-到远程-gitHub-仓库中"><a href="#3-将本地仓库-push-到远程-gitHub-仓库中" class="headerlink" title="3. 将本地仓库 push 到远程 gitHub 仓库中"></a>3. 将本地仓库 push 到远程 gitHub 仓库中</h4></li><li>设置远程仓库地址：<code>git remote add origin git@github.com:fly-liuhao/fly-liuhao.github.io.git</code><br>  注意：如果需要改变与远程仓库的链接方式，需先断开与远程仓库的连接：<code>git remote rm origin</code></li><li>创建源文件分支：<code>git branch source</code>，并切换到该分支：<code>git checkout source</code></li><li>推送到远程仓库：<code>git push --set-upstream origin source</code></li></ul><h3 id="五、更换Blog主题"><a href="#五、更换Blog主题" class="headerlink" title="五、更换Blog主题"></a>五、更换Blog主题</h3><h4 id="1-在你的博客根目录里下载主题"><a href="#1-在你的博客根目录里下载主题" class="headerlink" title="1. 在你的博客根目录里下载主题"></a>1. 在你的博客根目录里下载主题</h4><ul><li>Hexo 主题参考链接：<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a></li><li>选择你喜欢的一个主题进行下载，博主这里选择的是 <code>Butterfly</code> 主题：<code>git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly</code><br>  下载完成即可在 themes 文件夹下看到下载的主题文件夹：<br>  <a href="https://img-blog.csdnimg.cn/20200302215219971.png" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200302215219971.png" class="lazyload"></a><h4 id="2-应用主题"><a href="#2-应用主题" class="headerlink" title="2. 应用主题"></a>2. 应用主题</h4></li><li>修改站点配置文件_config.yml，把主题改为Butterfly：<code>theme: Butterfly</code><h4 id="3-安装-pug-以及-stylus-的渲染器"><a href="#3-安装-pug-以及-stylus-的渲染器" class="headerlink" title="3. 安装 pug 以及 stylus 的渲染器"></a>3. 安装 pug 以及 stylus 的渲染器</h4></li><li>如果你没有 pug 以及 stylus 的渲染器，请下载安装：<code>npm install hexo-renderer-pug hexo-renderer-stylus --save</code> or <code>yarn add hexo-renderer-pug hexo-renderer-stylus</code><h4 id="4-安装cheerio"><a href="#4-安装cheerio" class="headerlink" title="4. 安装cheerio"></a>4. 安装cheerio</h4></li><li>hexo 4.2.0版本之后 ，会出现报错 “Error: Cannot find module ‘cheerio’” 因此需要安装 cheerio：<code>npm install cheerio --save</code></li></ul><h3 id="六、主题的基础配置"><a href="#六、主题的基础配置" class="headerlink" title="六、主题的基础配置"></a>六、主题的基础配置</h3><blockquote><p>注意：不同主题配置是不一样的，这里博主以选择的 Butterfly 主题进行配置，如有小伙伴选择的是其他主题，请参考主题的官方文档进行配置（主题 github 中的 README 中一般有给具体配置的参考文档）</p><ul><li>博主使用的 Butterfly 主题配置参考文档：<a href="https://jerryc.me/posts/21cfbf15/" target="_blank" rel="noopener">https://jerryc.me/posts/21cfbf15/</a><br>（注意：如果链接进不去，选择高级，继续访问即可）</li><li>这里其实你完全可以跟着文档配置自己的博客，下面是博主自己配置的，仅供参考（如有细节不到位的请参考文档）</li></ul></blockquote><h4 id="1-更改主题语言为简体中文"><a href="#1-更改主题语言为简体中文" class="headerlink" title="1. 更改主题语言为简体中文"></a>1. 更改主题语言为<code>简体中文</code></h4><ul><li>打开主题中的<code>[languages]</code>文件夹，查看主题中支持的语言：default、en、zh-CN、zh-TW</li><li>修改博客的配置文件<code>_config.yml</code>：<code>language: zh-CN</code>    </li></ul><h4 id="2-主题配置文件平滑升级"><a href="#2-主题配置文件平滑升级" class="headerlink" title="2. 主题配置文件平滑升级"></a>2. 主题配置文件平滑升级</h4><ul><li><p>为了主题的平滑升级, Butterfly 使用了 data files 特性。</p></li><li><p>推荐把主题默认的配置文件 _config.yml 复制到 Hexo 工作目录下的source/_data/butterfly.yml，如果source/_data的目录不存在那就创建一个。</p><blockquote><p>注意，如果你创建了butterfly.yml, 它将会替换主题默认配置文件_config.yml里的配置项 (不是合并而是替换), 之后你就只需要通过git pull的方式就可以平滑地升级 theme-butterfly了。</p></blockquote></li></ul><h4 id="3-将主题的配置文件butterfly-yml中的繁体字转化为简体中文"><a href="#3-将主题的配置文件butterfly-yml中的繁体字转化为简体中文" class="headerlink" title="3. 将主题的配置文件butterfly.yml中的繁体字转化为简体中文"></a>3. 将主题的配置文件<code>butterfly.yml</code>中的繁体字转化为简体中文</h4><ul><li>因为作者好像是台湾人，配置中的注释全是繁体，如有介意可以使用下面简繁转化的网站进行转换：Ctrl + A、Ctrl + C、Ctrl + V …</li><li>在线繁体-简体转换网站：<a href="https://www.aies.cn/" target="_blank" rel="noopener">https://www.aies.cn/</a></li></ul><h4 id="4-配置文章发布模板"><a href="#4-配置文章发布模板" class="headerlink" title="4. 配置文章发布模板"></a>4. 配置文章发布模板</h4><ul><li>Page（页面）  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: {{ title }}</span><br><span class="line">date: {{ date }}</span><br><span class="line">type: （tags，link，categories 这三个页面需要配置）</span><br><span class="line">comments: (是否需要显示评论，默认<span class="keyword">true</span>)</span><br><span class="line">description:（页面描述）</span><br><span class="line">top_img: (设置顶部图，链接形式)</span><br><span class="line">mathjax:（用于一些数学表达式显示配置）</span><br><span class="line">katex:（用于一些数学表达式显示配置）</span><br><span class="line">---</span><br></pre></td></tr></tbody></table></figure></div></li><li>Post（文章）   <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: {{ title }}</span><br><span class="line">date: {{ date }}</span><br><span class="line">tags:（文章的标签）</span><br><span class="line">categories:（文章所属分类）</span><br><span class="line">keywords:（关键字）</span><br><span class="line">description:（文章描述）</span><br><span class="line">top_img: （除非特定需要，可以不写）</span><br><span class="line">comments  （是否显示评论，默认开启，除非设置<span class="keyword">false</span>,可以不写）</span><br><span class="line">cover: （缩略图链接）</span><br><span class="line">toc: （是否显示文章目录，除非特定文章设置，可以不写）</span><br><span class="line">toc_number: （是否显示目录的数字序号，除非特定文章设置，可以不写）</span><br><span class="line">copyright: （是否显示版权，默认开启，除非特定文章设置，可以不写）</span><br><span class="line">mathjax: （用于一些数学表达式显示配置）</span><br><span class="line">katex:（用于一些数学表达式显示配置）</span><br><span class="line">hide: （是否想要隐藏文章）</span><br><span class="line">---</span><br></pre></td></tr></tbody></table></figure></div></li></ul><h4 id="5-添加基本的页面"><a href="#5-添加基本的页面" class="headerlink" title="5. 添加基本的页面"></a>5. 添加基本的页面</h4><ul><li><p>标签页：</p><ul><li>输入命令：<code>hexo new page tags</code></li><li>修改<code>source/tags/index.md</code>文件如下：      <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: <span class="number">2020</span>-<span class="number">03</span>-<span class="number">21</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">type: <span class="string">"tags"</span></span><br><span class="line">---</span><br></pre></td></tr></tbody></table></figure></div></li></ul></li><li><p>分类页：</p><ul><li>输入命令：<code>hexo new page categories</code></li><li>修改<code>source/categories/index.md</code>文件如下：  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: <span class="number">2020</span>-<span class="number">03</span>-<span class="number">21</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">type: <span class="string">"categories"</span></span><br><span class="line">---</span><br></pre></td></tr></tbody></table></figure></div></li></ul></li><li><p>友情链接：</p><ul><li>输入命令： <code>hexo new page link</code></li><li>修改<code>source/link/index.md</code>文件如下：  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 友情链接</span><br><span class="line">date: <span class="number">2020</span>-<span class="number">03</span>-<span class="number">21</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">type: <span class="string">"link"</span></span><br><span class="line">---</span><br></pre></td></tr></tbody></table></figure></div></li><li>在Hexo博客目录中的<code>source/_data</code>，创建一个文件<code>link.yml</code>  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class:</span><br><span class="line">  class_name: 友情链接</span><br><span class="line">  link_list:</span><br><span class="line">    <span class="number">1</span>:</span><br><span class="line">      name: xxx</span><br><span class="line">      link: https:<span class="comment">//blog.xxx.com</span></span><br><span class="line">      avatar: https:<span class="comment">//cdn.xxxxx.top/avatar.png</span></span><br><span class="line">      descr: xxxxxxx</span><br><span class="line">    <span class="number">2</span>:</span><br><span class="line">      name: xxxxxx</span><br><span class="line">      link: https:<span class="comment">//www.xxxxxxcn/</span></span><br><span class="line">      avatar: https:<span class="comment">//xxxxx/avatar.png</span></span><br><span class="line">      descr: xxxxxxx  </span><br><span class="line"></span><br><span class="line">class2:</span><br><span class="line">  class_name: 无效链接</span><br><span class="line">  link_list:</span><br><span class="line">    <span class="number">1</span>:</span><br><span class="line">     name: 梦xxx</span><br><span class="line">     link: https:<span class="comment">//blog.xxx.com</span></span><br><span class="line">     avatar: https:<span class="comment">//xxxx/avatar.png</span></span><br><span class="line">     descr: xxxx</span><br><span class="line">   <span class="number">2</span>:</span><br><span class="line">     name: xx</span><br><span class="line">     link: https:<span class="comment">//www.axxxx.cn/</span></span><br><span class="line">     avatar: https:<span class="comment">//x</span></span><br><span class="line">     descr: xx</span><br></pre></td></tr></tbody></table></figure></div></li><li>友情链接界面设置（在友情链接上写上自己的个人资料，方便其他人添加），在<code>Butterfly.yml</code>配置：  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Flink:</span><br><span class="line">  headline: 友情链接</span><br><span class="line">  info_headline: 我的Blog资料</span><br><span class="line">  name: Blog 名字： JerryC</span><br><span class="line">  address: Blog 地址： https:<span class="comment">//jerryc.me/</span></span><br><span class="line">  avatar: Blog 头像： https:<span class="comment">//jerryc.me/img/avatar.png</span></span><br><span class="line">  info: Blog 简介： 今日事,今日毕</span><br><span class="line">  comment: 如果需要交换友链,请留言</span><br></pre></td></tr></tbody></table></figure></div></li></ul></li><li><p>关于页面</p><ul><li><p>输入命令：<code>hexo new page about</code></p><ul><li><p>修改<code>source/about/index.md</code>文件</p><blockquote><p>这里自我发挥，博主这里放的是本人的个人简历（可以帮助找工作哦），你也可以写一些你的自我介绍，具体参考其他人的个人博客设计</p></blockquote><h4 id="6-音乐页面"><a href="#6-音乐页面" class="headerlink" title="6. 音乐页面"></a>6. 音乐页面</h4><blockquote><p>参考hexo-tag-aplayer链接：<a href="https://github.com/MoePlayer/hexo-tag-aplayer" target="_blank" rel="noopener">https://github.com/MoePlayer/hexo-tag-aplayer</a></p><ul><li>使用教程链接1：<a href="https://blog.csdn.net/hushhw/article/details/88092728" target="_blank" rel="noopener">https://blog.csdn.net/hushhw/article/details/88092728</a></li><li>使用教程链接2：<a href="https://www.jianshu.com/p/f1005ae09e5a" target="_blank" rel="noopener">https://www.jianshu.com/p/f1005ae09e5a</a></li></ul></blockquote></li></ul></li></ul></li><li><p>安装插件：npm install –save hexo-tag-aplayer</p></li><li><p>修改配置，在配置文件 <code>_config.yml</code>中添加：</p>   <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 音乐播放插件</span><br><span class="line">aplayer:</span><br><span class="line">  meting: <span class="keyword">true</span></span><br></pre></td></tr></tbody></table></figure></div></li><li><p>创建music目录：<code>hexo new page music</code></p></li><li><p>网易云链接：<a href="https://music.163.com/" target="_blank" rel="noopener">https://music.163.com/</a></p></li><li><p>修改<code>source/music/index.md</code>文件如下：</p>  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 那些年，听过的音乐</span><br><span class="line">type: <span class="string">"music"</span></span><br><span class="line">comments: <span class="keyword">true</span></span><br><span class="line">top_img: https:<span class="comment">//cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/music.jpg</span></span><br><span class="line">date: <span class="number">2020</span>-<span class="number">02</span>-<span class="number">19</span> <span class="number">11</span>:<span class="number">59</span>:<span class="number">50</span></span><br><span class="line">description: 轻抚受伤的心灵</span><br><span class="line">mathjax:</span><br><span class="line">katex:</span><br><span class="line">---</span><br><span class="line">    </span><br><span class="line"># My Love</span><br><span class="line"><span class="comment">// 注意：第一串数字是你网易云歌曲的ID，浏览器地址栏获取（此行为注释，文件中请删掉此行）</span></span><br><span class="line">{% meting <span class="string">"551340498"</span> <span class="string">"netease"</span> <span class="string">"song"</span> <span class="string">"theme:#555"</span> <span class="string">"mutex:true"</span> <span class="string">"listmaxheight:340px"</span> <span class="string">"preload:auto"</span> %}</span><br><span class="line">---</span><br><span class="line"># 聆听这个世界</span><br><span class="line"><span class="comment">// 注意：第一串数字是你网易云歌单的ID，浏览器地址栏获取（此行为注释，文件中请删掉此行）</span></span><br><span class="line">{% meting <span class="string">"3175659640"</span> <span class="string">"netease"</span> <span class="string">"playlist"</span> <span class="string">"theme:#555"</span> <span class="string">"volume:0.5"</span> <span class="string">"mutex:true"</span> <span class="string">"listmaxheight:340px"</span> <span class="string">"preload:auto"</span> %}</span><br></pre></td></tr></tbody></table></figure></div></li></ul><h4 id="7-书籍、电影页面"><a href="#7-书籍、电影页面" class="headerlink" title="7. 书籍、电影页面"></a>7. 书籍、电影页面</h4><blockquote><p>参考链接：<a href="https://github.com/mythsman/hexo-douban" target="_blank" rel="noopener">https://github.com/mythsman/hexo-douban</a><br>这里调用的是你豆瓣的接口，只需要提供你的ID，同样也是浏览器地址栏获取（需登录豆瓣）</p></blockquote><ul><li>安装插件：<code>npm install hexo-douban --save</code></li><li>在配置文件  <code>_config.yml</code> 中添加：  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 书籍、电影插件</span><br><span class="line">douban:</span><br><span class="line">  user: 175423653 # 你的豆瓣ID</span><br><span class="line">  builtin: false # 是否将生成页面的功能嵌入hexo s和hexo g中</span><br><span class="line">  book:</span><br><span class="line">    title: <span class="string">'那些年,我看過的書籍'</span></span><br><span class="line">    quote: <span class="string">'世界上任何的书籍都不能带给你好运，但是它们能让你悄悄的成为你自己'</span></span><br><span class="line">  movie:</span><br><span class="line">    title: <span class="string">'那些年,我看過的電影'</span></span><br><span class="line">    quote: <span class="string">'过去、现在、未来'</span></span><br><span class="line">  timeout: <span class="number">10000</span></span><br></pre></td></tr></tbody></table></figure></div></li><li>豆瓣链接：<a href="https://www.douban.com/" target="_blank" rel="noopener">https://www.douban.com/</a></li><li>生成指定页面：<code>hexo douban -bm</code><ul><li>需要注意的是，通常大家都喜欢用<code>hexo d</code>来作为<code>hexo deploy</code>命令的简化，但是当安装了<code>hexo douban</code>之后，就不能用<code>hexo d</code>了，因为<code>hexo douban</code>跟<code>hexo deploy</code>的前缀都是<code>hexo d</code></li><li>果 <code>builtin</code> 属性设置为：true，则每次不需要执行该命令，直接使用<code>hexo g</code>生成页面即可</li></ul></li></ul><h3 id="七、主题的基础配置"><a href="#七、主题的基础配置" class="headerlink" title="七、主题的基础配置"></a>七、主题的基础配置</h3><h4 id="1-开启评论功能"><a href="#1-开启评论功能" class="headerlink" title="1. 开启评论功能"></a>1. 开启评论功能</h4><blockquote><p>推荐使用 Valine ，Laibili加载过于慢，评论是还需跳转登录，可直接使用 Valine 实现评论功能</p></blockquote><ul><li><p>使用 Laibili（来必力）</p><ul><li>注册账户并登录：<a href="http://livere.com/" target="_blank" rel="noopener">http://livere.com/</a></li><li>点击管理页面，然后根据提示获取用户ID（代码管理中的data-uid后面）  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><!-- 来必力City版安装代码 --></span><br><span class="line"><div id="<span" class="string">"lv-container" data-id=<span class="string">"city"</span> data-uid=<span class="string">"MTAyMC80ODxxxxxyNTIzNQ=="</span>><br><span class="line">.........</span><br></div></span></pre></td></tr></tbody></table></figure></div></li><li>修改主题配置  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">laibili:</span><br><span class="line">  enable: <span class="keyword">true</span></span><br><span class="line">  uid: MTAyMC80ODxxxxxyNTIzNQ==</span><br></pre></td></tr></tbody></table></figure></div></li></ul></li><li><p>使用 Valine（推荐使用）</p><blockquote><p>参考教程1：<a href="https://www.jianshu.com/p/728a9594bb6c" target="_blank" rel="noopener">https://www.jianshu.com/p/728a9594bb6c</a><br>参考教程2：<a href="https://bluelzy.com/articles/use_valine_for_your_blog.html" target="_blank" rel="noopener">https://bluelzy.com/articles/use_valine_for_your_blog.html</a></p></blockquote><ul><li>注册LeanCloud（需完成邮箱认证）</li><li>创建一个开发版应用</li><li>获取 <code>appId</code> 以及 <code>appKey</code></li><li>修改主题配置 butterfly.yml 如下：  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># valine comment system. https://valine.js.org</span><br><span class="line">valine:</span><br><span class="line">  enable: true # if you want use valine,please set this value is true</span><br><span class="line">  appId: xxxxxxxxxxxxxxx # 填写你获取的 app id</span><br><span class="line">  appKey: xxxxxxxxxxxxxxx # 填写你获取的 app key</span><br><span class="line">  notify: true # valine mail notify (true/false) https://github.com/xCss/Valine/wiki</span><br><span class="line">  verify: false # valine verify code (true/false)</span><br><span class="line">  pageSize: 10 # comment list page size</span><br><span class="line">  avatar: monsterid # gravatar style https://valine.js.org/#/avatar</span><br><span class="line">  lang: zh-cn # i18n: zh-cn/en</span><br><span class="line">  placeholder: 说点什么吧... # valine comment input placeholder(like: Please leave your footprints )</span><br><span class="line">  guest_info: nick,mail,link #valine comment header info</span><br><span class="line">  bg: /img/comment_bg.png # valine background</span><br><span class="line">  count: false # top_img显示评论数</span><br></pre></td></tr></tbody></table></figure></div></li></ul></li></ul><h4 id="2-使用PWA实现Web应用"><a href="#2-使用PWA实现Web应用" class="headerlink" title="2.使用PWA实现Web应用"></a>2.使用PWA实现Web应用</h4><ul><li><p>关于PWA应用</p><blockquote><p>直观认识：<a href="https://www.ithome.com/0/414/429.htm" target="_blank" rel="noopener">https://www.ithome.com/0/414/429.htm</a></p></blockquote></li><li><p>使用PWA渐进式框架的网站</p><blockquote><ul><li>实例博客1：<a href="https://diygod.me/" target="_blank" rel="noopener">https://diygod.me/</a></li><li>实例博客2：<a href="https://wangyaxing.cn/" target="_blank" rel="noopener">https://wangyaxing.cn/</a></li><li>微博：<a href="https://m.weibo.cn/" target="_blank" rel="noopener">https://m.weibo.cn/</a></li><li>推特：<a href="http://mobile.twitter.com/" target="_blank" rel="noopener">http://mobile.twitter.com/</a></li><li>IT之家：<a href="https://m.ithome.com/" target="_blank" rel="noopener">https://m.ithome.com/</a></li></ul></blockquote></li><li><p>使用文档</p><ul><li>hexo-theme-melody 主题：<a href="https://molunerfinn.com/hexo-theme-melody-doc/zh-Hans/additional-package-support.html#pwa" target="_blank" rel="noopener">https://molunerfinn.com/hexo-theme-melody-doc/zh-Hans/additional-package-support.html#pwa</a></li><li>hexo-theme-butterfly 主题：<a href="https://jerryc.me/posts/21cfbf15/#PWA" target="_blank" rel="noopener">https://jerryc.me/posts/21cfbf15/#PWA</a></li><li>配置注意事项：<blockquote><ul><li>manifest.json创建的位置是主题中的source文件夹</li><li>因为manifest.json中使用到各尺寸Logo图片，根据路径在主题中的source中建立相应的文件夹，放入指定尺寸大小以及名称的Logo图片</li><li>图片尺寸一定要符合要求必须是长宽像素值大小相等，要不应用的Logo图片无法加载显示</li></ul></blockquote></li></ul></li><li><p>使用到的工具</p><ul><li>Png改变大小：<a href="https://www.iloveimg.com/zh-cn/resize-image" target="_blank" rel="noopener">https://www.iloveimg.com/zh-cn/resize-image</a></li><li>Png-svg：<a href="http://www.bejson.com/convert/image_to_svg/" target="_blank" rel="noopener">http://www.bejson.com/convert/image_to_svg/</a></li></ul></li></ul><h4 id="3-添加本地搜索"><a href="#3-添加本地搜索" class="headerlink" title="3. 添加本地搜索"></a>3. 添加本地搜索</h4><ul><li>官方github链接：<a href="https://github.com/wzpan/hexo-generator-search" target="_blank" rel="noopener">https://github.com/wzpan/hexo-generator-search</a></li><li>使用教程<ul><li>安装：<code>npm install hexo-generator-search --save</code></li><li>修改主题配置文件 butterfly.yml 如下：  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">local_search:</span><br><span class="line">enable: <span class="keyword">true</span></span><br><span class="line">labels:</span><br><span class="line">  input_placeholder: Search <span class="keyword">for</span> Posts</span><br><span class="line">  hits_empty: "We didn't find any results for the search: ${query}" # if there are no result</span><br></pre></td></tr></tbody></table></figure></div><h4 id="4-添加字数统计功能"><a href="#4-添加字数统计功能" class="headerlink" title="4. 添加字数统计功能"></a>4. 添加字数统计功能</h4></li></ul></li><li>使用：<ul><li>安装：<code>npm install hexo-wordcount --save</code></li><li>修改主题配置文件 butterfly.yml 如下：  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wordcount:</span><br><span class="line">  enable: <span class="keyword">true</span></span><br><span class="line">  post_wordcount: <span class="keyword">true</span></span><br><span class="line">  min2read: <span class="keyword">true</span></span><br><span class="line">  total_wordcount: <span class="keyword">true</span></span><br></pre></td></tr></tbody></table></figure></div><h3 id="八、关于创建文章-与-文章发布"><a href="#八、关于创建文章-与-文章发布" class="headerlink" title="八、关于创建文章 与 文章发布"></a>八、关于创建文章 与 文章发布</h3></li></ul></li></ul><ol><li><p>使用next主题编写文章（注意，书写不是markdown规範，而是hexo特有的功能，移植于next主题，故在其它地方会显示不出效果）</p><blockquote><p>链接：<a href="https://theme-next.org/docs/tag-plugins/note" target="_blank" rel="noopener">https://theme-next.org/docs/tag-plugins/note</a></p></blockquote><p> 用法：</p> <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">markdown</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">{% note [class] [no-icon] %}</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">{% endnote %}</span><br><span class="line"></span><br><span class="line">[class]   : default | primary | success | info | warning | danger.</span><br><span class="line">[no-icon] : Disable icon in note.</span><br><span class="line"></span><br><span class="line">All parameters are optional.</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>使用<code>Gallery</code>相册，在文章中插入图片</p><blockquote><p>区别于旧版的Gallery相册,新的Gallery相册会自动根据图片长度进行排版，书写也更加方便，与markdown格式一样。可根据需要插入到相应的md</p></blockquote><p> 用法：</p> <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">markdown</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">{% gallery %}</span><br><span class="line">markdown 图片格式</span><br><span class="line">{% endgallery %}</span><br><span class="line"></span><br><span class="line">eg：</span><br><span class="line">   </span><br><span class="line">{% gallery %}</span><br><span class="line">![](https://gratisography.com/wp-content/uploads/2019/10/gratisography-scary-pumpkin-hand-900x600.jpg)</span><br><span class="line">![](https://gratisography.com/wp-content/uploads/2019/10/gratisography-fresh-fish-dinner-900x600.jpg)</span><br><span class="line">![](https://gratisography.com/wp-content/uploads/2019/10/gratisography-mountain-cloud-landscape-900x600.jpg)</span><br><span class="line">![](https://picjumbo.com/wp-content/uploads/iphone-free-stock-photos-2210x3315.jpg)</span><br><span class="line">![](https://picjumbo.com/wp-content/uploads/young-millennial-girl-drinking-lemonade-and-overlooking-the-city-2210x1473.jpg)</span><br><span class="line">![](https://picjumbo.com/wp-content/uploads/modern-graphic-designer-essentials<span class="emphasis">_free_</span>stock<span class="emphasis">_photos_</span>picjumbo_HNCK4919-2210x1474.jpg)</span><br><span class="line">{% endgallery %}</span><br></pre></td></tr></tbody></table></figure></div><h5 id="OK，配置基本可以了，重新部署一下访问即可！"><a href="#OK，配置基本可以了，重新部署一下访问即可！" class="headerlink" title=" OK，配置基本可以了，重新部署一下访问即可！ "></a><center> <font color="gray">OK，配置基本可以了，重新部署一下访问即可！ </font></center></h5><center> <font color="gray">欢迎将你的个人博客链接留言在下方</font></center><center> <font color="gray">互相交换友链呀~</font></center></li></ol></body></html>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> GitHub Pages </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习之——Vue入门</title>
      <link href="/2020/02/22/study-file/1.0%20Vue%E5%85%A5%E9%97%A8/"/>
      <url>/2020/02/22/study-file/1.0%20Vue%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<html lang="<span" class="string"><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h1 id="一、-Vue-js入门"><a href="#一、-Vue-js入门" class="headerlink" title="一、 Vue.js入门"></a>一、 Vue.js入门</h1><h2 id="1-1-Vue-js是什么"><a href="#1-1-Vue-js是什么" class="headerlink" title="1.1 Vue.js是什么"></a>1.1 Vue.js是什么</h2><p>Vue (读音 /vjuː/，类似于 view) 是一套用于构建前端用户界面、处理用户界面数据的渐进式框架，与此相类似的前端框架还有著名的React、AngularJS等。这类前端框架只关注前端界面的组织构建、后端数据接收以及数据处理，并不关注软件系统本身的业务处理逻辑，将系统本身的业务处理逻辑交由后端系统处理，因此，这类型的框架是基于前后端分离系统组织架构实现的。</p><p>值得让人欣喜和钦佩的是Vue的核心作者是一名中国程序员——尤雨溪，因此Vue的相关中文资料较为丰富，Vue框架本身设计和使用就十分优秀，加之国人对国产技术的支持，Vue框架在国内占有巨大的市场份额。</p><p>2016年9月，尤雨溪加入了阿里Weex团队，专门致力于基于Vue开发的Weex框架设计与研发，推动前端技术的进一步升级改造。</p><h5 id="Vue的特点"><a href="#Vue的特点" class="headerlink" title="Vue的特点"></a>Vue的特点</h5><ul><li>** 前端框架 **：Vue是一种基于JavaScript（ECMAScript 6）的前端框架，它作用于前后端分离架构系统的前端系统，主要用于处理前端系统的界面组织构建、数据接收、数据处理；它负责向后端系统发送异步请求，并将从后端系统接收到的数据呈现到前端系统界面中来，并不关心后端系统如何处理数据的业务逻辑。</li><li>** 高效数据绑定 **：Vue能够将从后端接收到的数据高效地绑定（渲染）到操作界面当中去，与jQuery技术相比，Vue并不关注HTML中的DOM元素，而是以“组件”的形式进行更加简单直接的数据绑定处理，大大简化了传统jQuery操作DOM元素代码的编写，不必再进行复杂的HTML代码拼接。除此之外，Vue也支持双向数据绑定。</li><li>** 渐进式框架 **：Vue内部采用自底向上增量式开发，并且Vue只关注视图层View的处理，因此相比较于React、AngularJS更加易于上手学习，构建小型系统应用更加敏捷快速。Vue的目标是通过尽可能简单的 API 实现响应式的数据绑定和组合的视图组件。</li><li>** MVVM框架 **：Vue是基于MVVM设计思想设计地一种前端框架。MVVM设计思想是指Model-View-ViewModel分层设计思想，与MVC设计思想不同，它更多地是指导前端系统架构的思想，因此MVVM只关注View与Model，并没有控制器Controller的概念。MVVM中，Model是指从后端接收到的数据，View是指系统的UI界面，在传统的系统设计中，数据与界面元素是完全耦合交融在一起的，一同支撑View层的数据呈现；而MVVM设计思想，将Model和View做了进一步的抽象和分离，提出了VM（ViewModel）的处理单元，专门用于UI元素与数据的绑定处理。在Vue框架中，每一个JavaScript对象基本都是一个VM类型的单元对象。</li><li>** 单页面应用 **：单页面应用的英文单词为single page web application，简称SPA，所谓单页面应用就是指通过一个HTML页面来支撑整个应用的组织与构建，所有系统的页面都定义在一个HTML页面中。在传统的web开发中，我们根本无法想象只使用一个HTML文件开发一个应用程序，但在前端框架技术面前，单页面应用的开发成为了可能，且实现起来十分快捷方便，整个应用的组织方式也没有想象当中的那般混乱。Vue从最初的设计上就是为了解决单页面应用开发的。</li></ul><h5 id="Vue与React、AngularJS的对比"><a href="#Vue与React、AngularJS的对比" class="headerlink" title="Vue与React、AngularJS的对比"></a>Vue与React、AngularJS的对比</h5><p>参见官网文档：<a href="https://cn.vuejs.org/v2/guide/comparison.html" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/comparison.html</a></p><h5 id="JavaScript与ECMAScript"><a href="#JavaScript与ECMAScript" class="headerlink" title="JavaScript与ECMAScript"></a>JavaScript与ECMAScript</h5><p>JavaScript是一种运行于浏览器上的一种脚本语言，能够为网页提供动态处理页面元素和数据的功能，广泛应用于当今互联网前端应用的开发中。JavaScript之所以能够运行于浏览器上，是因为所有的浏览器都内置了JavaScript的运行编译器，能够解读这种语言对于网页元素的操作。</p><p>事实上，在早期浏览器诞生时，并不是所有的浏览器都默认内置JavaScript运行编译器的，但JavaScript提供的强大页面动态功能让各大浏览器厂商心动不已，因此，很多浏览器厂商都提供了对JavaScript的支持，但又由于技术壁垒与商业竞争，各家浏览器厂商对JavaScript的支持十分混乱，为了统一浏览器对JavaScript的支持，因而Ecma国际标准组织为浏览器对JavaScript的支持提供了统一的规范，ECMAScript由此诞生。</p><p>ECMAScript是一种由Ecma通过ECMA-262标准化的脚本程序设计语言。这种语言在万维网上应用广泛，它往往被称为JavaScript，所以它可以理解为是JavaScript的一个标准，但实际上JavaScript是ECMA-262标准的实现和扩展。</p><p>ECMAScript至今为止共发布了6个版本，分别是ECMAScript 1、ECMAScript 2、ECMAScript 3、ECMAScript 4、ECMAScript 5、ECMAScript 2015。而我们后续将学习ECMAScript 6规范的相关知识，ECMAScript 6规范是ECMAScript 2015规范基础上的一个草案版本，将是下一代JavaScript的扩展规范，提供了很多新扩展的语法、语言内容。由于Web前端技术的快速更新和发展，很多新版浏览器已经支持了ECMAScript 6规范，但旧版本的浏览器并不支持ECMAScript 6语法。例如IE浏览器8.0版本之前的版本并不支持ECMAScript 6，之后的版本才支持。</p><p>Vue框架的高级应用已经使用了很多ECMAScript 6的规范，为了让这些语法能够被现有浏览器都支持，因此在前端技术中出现了转义器这类技术。</p><p>ECMAScript 6简称为ES6规范。</p><h2 id="1-2-Vue的版本与使用"><a href="#1-2-Vue的版本与使用" class="headerlink" title="1.2 Vue的版本与使用"></a>1.2 Vue的版本与使用</h2><h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><p>Vue短短几年间已经发生了巨大的改变，目前已经发展到了2.5.17版本。从大版本上来说，Vue有0.*版本、1.*版本、2.*版本，0版本与1版本基础语法、语义没有发生太多的变化，但2.0版本之后，Vue发生了巨大的变化，对于很多语法使用进行了简化和调整，语法变得更加严谨规范。目前，Vue作者正在筹备Vue3.0的升级发布，预计将会在2019年年底发布。</p><p>我们对于Vue的学习基于2.0之后的版本来进行学习。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>Vue的使用存在两种方式：</p><ul><li>以独立文件的方式支持Vue的简单使用，对于Vue的入门学习，我们完全可以使用这种方式进行使用。</li><li>以NPM资源管理的方式进行使用，对于使用Vue进行大型应用开发时，我们必须使用这种方式，以应对复杂的资源管理工作。这种使用方式就需要依赖ES6的语法规范。</li></ul><p>这里我们先介绍独立文件的使用方式。</p><p>Vue独立使用时，实际上就是在HTML文件中引用Vue.js文件，这与jQuery组件在HTML中的使用完全相同。</p><p>1.以网络资源引入Vue：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><script src="<span" class="string">"https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js"</span>><<span class="regexp">/script></span></span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><script src=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.17/vue.js"</span>><<span class="regexp">/script></span></span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><script src=<span class="string">"https://unpkg.com/vue@2.5.17/dist/vue.js"</span>><<span class="regexp">/script></span></span><br></pre></td></tr></tbody></table></figure></div><p>2.将Vue.js文件下载到本地，在HTML页面中以相对路径引入：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><script src=<span class="string">"vue/vue.js"</span>><<span class="regexp">/script></span></span><br></pre></td></tr></tbody></table></figure></div><h2 id="1-3-第一个Vue-Hello-World案例"><a href="#1-3-第一个Vue-Hello-World案例" class="headerlink" title="1.3 第一个Vue Hello World案例"></a>1.3 第一个Vue Hello World案例</h2><p>这里，我们直接编写一个Vue的入门案例，来看看Vue为前端页面数据输出和界面组织带来的变化。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><!DOCTYPE html></span><br><span class="line"><html lang=<span class="string">"en"</span>></span><br><span class="line"><head></span><br><span class="line">    <meta charset=<span class="string">"UTF-8"</span>></span><br><span class="line">    <title>Vue Hello World入门案例程序<<span class="regexp">/title></span></span><br><span class="line"><span class="regexp">    <script src="vue/</span>vue.js<span class="string">"></script></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    <div id="</span>web<span class=" string">"><br><span class="line"><span class="string">        <h1>{{message}}</h1></span></span><br><span class="line"><span class="string">        <input type="</span>text<span class=" string">" v-model="</span>message<span class="string">"></span></span><br><span class="line"><span class="string">    </span></span></div></span></span><br><span class="line"><span class="string">    <script></span></span><br><span class="line"><span class="string">        var vm = new Vue({</span></span><br><span class="line"><span class="string">            el: '#web',</span></span><br><span class="line"><span class="string">            data: {</span></span><br><span class="line"><span class="string">                message: 'Hello Vue！'</span></span><br><span class="line"><span class="string">            }</span></span><br><span class="line"><span class="string">        });</span></span><br><span class="line"><span class="string">    </script></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></tbody></table></figure></div><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><ol><li>尝试修改input框中的值。</li><li>尝试修改JS对象中的message值。</li><li>在浏览器中通过F12打开开发者视图，在console控制台输入vm.message。</li><li>在console控制台输入vm.message = ‘哈哈’。</li></ol><p>从上述案例中，我们改变输入框的值，立刻就会影响到h1标题标签上去。h1标签元素和input标签都可以看做是页面的UI界面元素，也就是MVVM设计思想中的视图V；而h1中的值和input中的值都是数据，也就是MVVM中的M；数据与UI界面元素的绑定实际上是通过JS代码来实现的，也就是vm对象中的data.message属性，改变data.message属性值，同样可以影响视图信息，该JS对象也就是MVVM中的VM。</p><p>将message“变量”的值动态地赋值给界面元素的过程，实际上就是数据绑定的过程，而这里的input输入框实际上实现了双向数据绑定。即通过修改data.message的值，可以影响输入框中的值；在输入框中输入值，同样可以影响data.message的值。</p><h2 id="1-4-Vue框架的核心语法构成"><a href="#1-4-Vue框架的核心语法构成" class="headerlink" title="1.4 Vue框架的核心语法构成"></a>1.4 Vue框架的核心语法构成</h2><p>Vue.js是基于JavaScript语言的一种框架技术，因此，它的语法基础与JavaScript的语法完全一致，但Vue.js在JavaScript语法基础上加入了基于ES6规范的语法内容，因此，较老版本的浏览器并不支持Vue框架。</p><p>Vue语法主要由三大核心内容构成：</p><ol><li>Vue实例对象（本质上就是一个JS对象），上述Hello World案例中vm对象就是一个Vue实例对象。</li><li>Vue指令，上述Hello World案例中的v-model就是Vue的一种指令。</li><li>Vue组件，Vue构建单页面应用的核心，整个单页面就是一个个的组件构成的。</li></ol><p>Vue定义的一个简单组件：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">"en"</span>><br><span class="line"></span><br><span class="line">    <meta charset="<span" class="string">"UTF-8"</span>><br><span class="line">    <title>Vue模板案例<<span class="regexp">/title></span></span><br><span class="line"><span class="regexp">    <script src="vue/</span>vue.js<span class="string">"></script></span></span><br><span class="line"><span class="string"></head></span></span><br><span class="line"><span class="string"><body></span></span><br><span class="line"><span class="string">    <div id="</span>web<span class="string">"></span></span><br><span class="line"><span class="string">        <my-component></my-component></span></span><br><span class="line"><span class="string">        <my-component></my-component></span></span><br><span class="line"><span class="string">        <my-component></my-component></span></span><br><span class="line"><span class="string">    </div></span></span><br><span class="line"><span class="string">    <script></span></span><br><span class="line"><span class="string">        Vue.component("</span>my-component<span class="string">",{</span></span><br><span class="line"><span class="string">            template: "</span><div><span class="xml"><span class="tag"><<span class="name">h1</span>></span>Hello World标题<span class="tag"></<span class="name">h1</span>></span></span><<span class="regexp">/div>"</span></span><br><span class="line"><span class="regexp">        });</span></span><br><span class="line"><span class="regexp">        var vm = new Vue({</span></span><br><span class="line"><span class="regexp">            el: "#web"</span></span><br><span class="line"><span class="regexp">        });</span></span><br><span class="line"><span class="regexp">    </</span>script></span><br><span class="line"><<span class="regexp">/body></span></span><br><span class="line"><span class="regexp"></</span>html></span><br></pre></td></tr></tbody></table></figure></div></body></html></title></span></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习之——Vue数据请求</title>
      <link href="/2020/02/22/study-file/10.0%20Vue%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82/"/>
      <url>/2020/02/22/study-file/10.0%20Vue%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h1 id="十、-Vue数据请求"><a href="#十、-Vue数据请求" class="headerlink" title="十、 Vue数据请求"></a>十、 Vue数据请求</h1><p>前端应用中发起数据请求是一种必然的需求，在传统的技术方案中，我们可以使用最为底层、基础的JavaScript Ajax进行异步数据请求，同样为了简化Ajax的使用，可以使用jQuery提供的Ajax封装。</p><p>上述的Ajax技术在Vue框架中当然也是适用的，但Vue框架是数据驱动的MVVM框架，关注点不在于DOM元素操作，而在于数据绑定，Vue为了简化Ajax的使用，同时提供自身的适用性，提供了一项Vue自身的Ajax技术，这就是我们要学习的vue-resource组件。</p><p>与vue-resource组件相同功能的第三方组件还有axios、Fetch JSONP，他们都属于GitHub上的开源项目，但我们更推荐使用官方提供的vue-resource。</p><h2 id="10-1-vue-resource的安装与集成"><a href="#10-1-vue-resource的安装与集成" class="headerlink" title="10.1 vue-resource的安装与集成"></a>10.1 vue-resource的安装与集成</h2><p>vue-resource组件本质上就是一个js资源包，名为vue-resource.js，我们可以单独引入该文件，进行该组件的使用。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><script src="<span" class="string">"js/vue.js"</span>><<span class="regexp">/script></span></span><br><span class="line"><span class="regexp"><script src="js/</span>vue-resource.js<span class="string">"></script></span><br></pre></td></tr></tbody></table></figure></div><p>但在webpack集成环境中，我们需要使用npm进行vue-resource的安装。</p><p>在先前的工程中集成vue-resource组件，在工程根目录下使用npm进行组件的引入安装，与VueRouter的安装方式相同。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">F:\yingcaiTestModel\WebProject\vue\vuetest05>npm install vue-resource --save</span><br></pre></td></tr></tbody></table></figure></div><p>执行上述命令后，就在当前工程中引入了vue-resource组件，并在package.json中添加了组件依赖。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"dependencies"</span>: {</span><br><span class="line"><span class="string">"vue"</span>: <span class="string">"^2.5.11"</span>,</span><br><span class="line"><span class="string">"vue-resource"</span>: <span class="string">"^1.5.1"</span>,</span><br><span class="line"><span class="string">"vue-router"</span>: <span class="string">"^3.0.2"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>之后，在main.js中引入vue-resource组件实例，并让Vue实例启动该功能，最终整个功能便支持了vue-resource功能。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> VueResource <span class="keyword">from</span> <span class="string">'vue-resource'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//让Vue启用VueResource组件功能</span></span><br><span class="line">Vue.use(VueResource);</span><br></pre></td></tr></tbody></table></figure></div><h2 id="10-2-vue-resource基础语法"><a href="#10-2-vue-resource基础语法" class="headerlink" title="10.2 vue-resource基础语法"></a>10.2 vue-resource基础语法</h2><p>引入vue-resource后，可以基于全局的Vue对象使用http，也可以基于某个Vue实例使用http。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基于全局Vue对象使用http</span></span><br><span class="line">Vue.http.get(<span class="string">'/someUrl'</span>, [options]).then(successCallback, errorCallback).catch(catchCallback);</span><br><span class="line">Vue.http.post(<span class="string">'/someUrl'</span>, [body], [options]).then(successCallback, errorCallback).catch(catchCallback);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在一个Vue实例内使用$http</span></span><br><span class="line"><span class="keyword">this</span>.$http.get(<span class="string">'/someUrl'</span>, [options]).then(successCallback, errorCallback).catch(catchCallback);</span><br><span class="line"><span class="keyword">this</span>.$http.post(<span class="string">'/someUrl'</span>, [body], [options]).then(successCallback, errorCallback).catch(catchCallback);</span><br></pre></td></tr></tbody></table></figure></div><p>vue-resource支持HTTP协议通用的请求类型：get、post、delete、put、head等，但我们常用的为post请求与get请求。</p><ul><li>get(url, [options])</li><li>head(url, [options])</li><li>delete(url, [options])</li><li>jsonp(url, [options])</li><li>post(url, [body], [options])</li><li>put(url, [body], [options])</li><li>patch(url, [body], [options])</li></ul><p>不管是哪种类型的请求方式，对应请求函数都接收一个url请求路径字符串，而对于get请求类型，支持options JSON格式数据的配置；对于post请求，除了支持options JSON格式数据的配置外，还支持body请求体的JSON格式数据的处理。then函数接收两个函数类型的JS对象，第一个参数为请求成功的回调函数；第二个参数为请求失败的回调函数。catch函数接收一个函数类型的JS对象，用于处理整个请求过程中出现异常时的异常处理。</p><p>options支持的配置信息如下：</p><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>url</td><td><code>string</code></td><td>URL to which the request is sent</td></tr><tr><td>body</td><td><code>Object</code>, <code>FormData</code>, <code>string</code></td><td>Data to be sent as the request body</td></tr><tr><td>headers</td><td><code>Object</code></td><td>Headers object to be sent as HTTP request headers</td></tr><tr><td>params</td><td><code>Object</code></td><td>Parameters object to be sent as URL parameters</td></tr><tr><td>method</td><td><code>string</code></td><td>HTTP method (e.g. GET, POST, …)</td></tr><tr><td>responseType</td><td><code>string</code></td><td>Type of the response body (e.g. text, blob, json, …)</td></tr><tr><td>timeout</td><td><code>number</code></td><td>Request timeout in milliseconds (<code>0</code> means no timeout)</td></tr><tr><td>emulateHTTP</td><td><code>boolean</code></td><td>Send PUT, PATCH and DELETE requests with a HTTP POST and set the <code>X-HTTP-Method-Override</code> header</td></tr><tr><td>emulateJSON</td><td><code>boolean</code></td><td>Send request body as <code>application/x-www-form-urlencoded</code> content type</td></tr><tr><td>before</td><td><code>function(request)</code></td><td>Callback function to modify the request object before it is sent</td></tr><tr><td>uploadProgress</td><td><code>function(event)</code></td><td>Callback function to handle the <a href="https://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent" target="_blank" rel="noopener">ProgressEvent</a> of uploads</td></tr><tr><td>downloadProgress</td><td><code>function(event)</code></td><td>Callback function to handle the <a href="https://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent" target="_blank" rel="noopener">ProgressEvent</a> of downloads</td></tr></tbody></table><h2 id="10-3-vue-resource请求处理详解"><a href="#10-3-vue-resource请求处理详解" class="headerlink" title="10.3 vue-resource请求处理详解"></a>10.3 vue-resource请求处理详解</h2><p>在先前的测试工程中新添加一个“数据请求”菜单项，用于测试Resource组件的使用。</p><p>App.vue:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><ul id="<span" class="string">"topUl"><br><span class="line"><li><span class="xml"><span class="tag"><<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/home"</span>></span>首页<span class="tag"><!--<span class="name"-->router-link</span>></span><<span class="regexp">/li></span><br><span class="line"><span class="regexp"></span></span></li><li><router-link to="/</span>news<span class=" string">">新闻</router-link></li></span><br><span class="line"><span class="string"><li><router-link to="</span>/product<span class=" string">">产品</router-link></li></span></span><br><span class="line"><span class="string"><li><router-link to="</span>/user<span class=" string">">用户</router-link></li></span></span><br><span class="line"><span class="string"><li><router-link to="</span>/setting<span class=" string">">设置</router-link></li></span></span><br><span class="line"><span class="string"><li><router-link to="</span>/resource<span class=" string">">数据请求</router-link></li></span></span><br><span class="line"><span class="string"></span></span></ul></span><br></pre></td></tr></tbody></table></figure></div><p>新建Resource.vue:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><template><br><span class="line">    <div><br><span class="line">        <h3>resource数据请求测试<<span class="regexp">/h3></span><br><span class="line"><span class="regexp">    <!--</span-->div></span><br><span class="line"><<span class="regexp">/template></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"><script></span></span><br><span class="line"><span class="regexp">    export default {</span></span><br><span class="line"><span class="regexp">        name: "Resource"</span></span><br><span class="line"><span class="regexp">    }</span></span><br><span class="line"><span class="regexp"></</span>script></span><br><span class="line"></span><br><span class="line"><style scoped></span><br><span class="line"></span><br><span class="line"><<span class="regexp">/style></span></span><br></pre></td></tr></tbody></table></figure></div><p>配置路由，main.js：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Resource <span class="keyword">from</span> <span class="string">'./components/Resource'</span>;</span><br><span class="line"></span><br><span class="line">{<span class="attr">path</span>: <span class="string">'/resource'</span>,<span class="attr">component</span>: Resource}</span><br></pre></td></tr></tbody></table></figure></div><p>创建后端请求模拟数据，在当前工程下新建一个static文件夹，在该文件夹下新建一个test.json格式数据。该文件用于数据模拟。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  {</span><br><span class="line">    <span class="string">"id"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"title"</span>: <span class="string">"新闻1"</span>,</span><br><span class="line">    <span class="string">"info"</span>: <span class="string">"新闻内容1"</span>,</span><br><span class="line">    <span class="string">"date"</span>: <span class="string">"2019.01.01"</span></span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="string">"id"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">"title"</span>: <span class="string">"新闻2"</span>,</span><br><span class="line">    <span class="string">"info"</span>: <span class="string">"新闻内容2"</span>,</span><br><span class="line">    <span class="string">"date"</span>: <span class="string">"2019.01.01"</span></span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="string">"id"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">"title"</span>: <span class="string">"新闻3"</span>,</span><br><span class="line">    <span class="string">"info"</span>: <span class="string">"新闻内容3"</span>,</span><br><span class="line">    <span class="string">"date"</span>: <span class="string">"2019.01.01"</span></span><br><span class="line">  }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure></div><p>注意：vue要求将json格式的静态数据存放在static目录中，文件名必须为static，否则无法通过vue-resource进行数据访问。</p><h3 id="10-3-1-get请求处理"><a href="#10-3-1-get请求处理" class="headerlink" title="10.3.1 get请求处理"></a>10.3.1 get请求处理</h3><p>在Resource组件进行请求发起：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><template></span><br><span class="line">    <div></span><br><span class="line">        <h3>resource数据请求测试<<span class="regexp">/h3></span></span><br><span class="line"><span class="regexp">        <button @click="getTest()">get请求测试</</span>button></span><br><span class="line">    <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp"></</span>template></span><br><span class="line"></span><br><span class="line"><script></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">        name: <span class="string">"Resource"</span>,</span><br><span class="line">        methods: {</span><br><span class="line">            getTest(){</span><br><span class="line">                <span class="keyword">this</span>.$http.get(<span class="string">"/static/test.json"</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>{</span><br><span class="line">                    <span class="built_in">console</span>.log(response);</span><br><span class="line">                },<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>{</span><br><span class="line">                    <span class="built_in">console</span>.log(error);</span><br><span class="line">                }).catch(<span class="function"><span class="keyword">function</span> (<span class="params">exception</span>) </span>{</span><br><span class="line">                    <span class="built_in">console</span>.log(exception);</span><br><span class="line">                });</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"><<span class="regexp">/script></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"><style scoped></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></</span>style></span><br></pre></td></tr></tbody></table></figure></div><p>上述案例测试了vue-resource发起get请求，访问静态JSON资源的过程。通过F12开发者工具能够发现，访问成功回调函数会传入了一个response类型的参数，这里我们取名就为response；同理，访问失败回调函数同样会传递一个response类型的参数，我们取名为error；访问出现异常回调函数同样也会传递一个response类型的参数，我们取名为exception。</p><h5 id="response对象的使用"><a href="#response对象的使用" class="headerlink" title="response对象的使用"></a>response对象的使用</h5><p>参考官方文档，配合控制台，我们可以看到response类型对象的使用方式：<br>Property | Type | Description<br>——– | —- | ———–<br>url | <code>string</code> | Response URL origin<br>body | <code>Object</code>, <code>Blob</code>, <code>string</code> | Response body<br>headers | <code>Header</code> | Response Headers object<br>ok | <code>boolean</code> | HTTP status code between 200 and 299<br>status | <code>number</code> | HTTP status code of the response<br>statusText | <code>string</code> | HTTP status text of the response<br><strong>Method</strong> | <strong>Type</strong> | <strong>Description</strong><br>text() | <code>Promise</code> | Resolves the body as string<br>json() | <code>Promise</code> | Resolves the body as parsed JSON object<br>blob() | <code>Promise</code> | Resolves the body as Blob object</p><p>官方文档没有罗列response对象的一个重要参数data的使用说明，该属性包含着响应报文中报文体JSON格式的数据。我们可以通过response.data来获取请求返回数据。</p><h5 id="数据绑定方式"><a href="#数据绑定方式" class="headerlink" title="数据绑定方式"></a>数据绑定方式</h5><p>通过vue-resource组件获取请求数据后，我们便可以将数据绑定到组件当中去，进行页面渲染。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><template></span><br><span class="line">    <div></span><br><span class="line">        <h3>resource数据请求测试<<span class="regexp">/h3></span></span><br><span class="line"><span class="regexp">        <button @click="getTest()">get请求测试</</span>button></span><br><span class="line">        <div></span><br><span class="line">            <ul></span><br><span class="line">                <li v-<span class="keyword">for</span>=<span class="string">"(item,key) in list"</span>>{{key}}---{{item.id}}---{{item.title}}---{{item.info}}---{{item.date}}<<span class="regexp">/li></span></span><br><span class="line"><span class="regexp">            </u</span>l></span><br><span class="line">        <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp">    </</span>div></span><br><span class="line"><<span class="regexp">/template></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"><script></span></span><br><span class="line"><span class="regexp">    export default {</span></span><br><span class="line"><span class="regexp">        name: "Resource",</span></span><br><span class="line"><span class="regexp">        data: function(){</span></span><br><span class="line"><span class="regexp">            return {</span></span><br><span class="line"><span class="regexp">                list: []</span></span><br><span class="line"><span class="regexp">            }</span></span><br><span class="line"><span class="regexp">        },</span></span><br><span class="line"><span class="regexp">        methods: {</span></span><br><span class="line"><span class="regexp">            getTest(){</span></span><br><span class="line"><span class="regexp">                this.$http.get("/</span><span class="keyword">static</span>/test.json<span class="string">").then(function (response) {</span></span><br><span class="line"><span class="string">                    console.log(response.data);</span></span><br><span class="line"><span class="string">                    this.list = response.data;</span></span><br><span class="line"><span class="string">                },function (error) {</span></span><br><span class="line"><span class="string">                    console.log(error);</span></span><br><span class="line"><span class="string">                }).catch(function (exception) {</span></span><br><span class="line"><span class="string">                    console.log(exception);</span></span><br><span class="line"><span class="string">                });</span></span><br><span class="line"><span class="string">            }</span></span><br><span class="line"><span class="string">        }</span></span><br><span class="line"><span class="string">    }</span></span><br><span class="line"><span class="string"></script></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"><style scoped></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></style></span></span><br></span></h3></span></div><p>我们在组件中初始化了一个list数据属性，在请求方法中对该属性进行了赋值，之后在组件模板中对数据进行了动态绑定。</p><h5 id="箭头函数的使用"><a href="#箭头函数的使用" class="headerlink" title="箭头函数的使用"></a>箭头函数的使用</h5><p>上述案例的回调函数是传统的编写方式，但在实际开发过程中，我们更推荐使用更为简洁、安全的ES 6的Lambda写法，即箭头函数的使用。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">getTest(){</span><br><span class="line"><span class="keyword">this</span>.$http.get(<span class="string">"/static/test.json"</span>).then(<span class="function">(<span class="params">response</span>) =></span> {</span><br><span class="line"><span class="built_in">console</span>.log(response.data);</span><br><span class="line"><span class="keyword">this</span>.list = response.data;</span><br><span class="line">},(error) => {</span><br><span class="line"><span class="built_in">console</span>.log(error);</span><br><span class="line">alert(error);</span><br><span class="line">}).catch(<span class="function"><span class="keyword">function</span> (<span class="params">exception</span>) </span>{</span><br><span class="line"><span class="built_in">console</span>.log(exception);</span><br><span class="line">});</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>表面上看，箭头函数只是通过=>的方式将function关键字进行了替换，但在本质上，箭头函数与普通函数有巨大的区别，箭头函数的出现更多的是为了解决面向对象this关键字的使用。</p><p>关于箭头函数的具体作用，请参考资料：<a href="https://blog.csdn.net/macongliang123/article/details/79757813" target="_blank" rel="noopener">https://blog.csdn.net/macongliang123/article/details/79757813</a> 。</p><h5 id="get请求后端服务以及请求参数传递"><a href="#get请求后端服务以及请求参数传递" class="headerlink" title="get请求后端服务以及请求参数传递"></a>get请求后端服务以及请求参数传递</h5><p>在后端编写一个简单Servlet服务，请求路径为：<a href="http://localhost:8081/TestServlet" target="_blank" rel="noopener">http://localhost:8081/TestServlet</a> ，请求入参为id和title，代码如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">String id = request.getParameter(<span class="string">"id"</span>);</span><br><span class="line">String title = request.getParameter(<span class="string">"title"</span>);</span><br><span class="line">System.out.println(id + <span class="string">"----"</span> + title);</span><br><span class="line"></span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=UTF-8;pageEncoding=UTF-8"</span>);</span><br><span class="line">response.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设置响应头允许ajax跨域访问 */</span></span><br><span class="line"><span class="comment">/* 星号表示所有的异域请求都可以接受*/</span></span><br><span class="line">response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line"></span><br><span class="line">response.setHeader(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"GET,POST"</span>);</span><br><span class="line">response.getWriter().write(<span class="string">"[\n"</span> +</span><br><span class="line"><span class="string">"  {\n"</span> +</span><br><span class="line"><span class="string">"    \"id\": 1,\n"</span> +</span><br><span class="line"><span class="string">"    \"title\": \"新闻1\",\n"</span> +</span><br><span class="line"><span class="string">"    \"info\": \"新闻内容1\",\n"</span> +</span><br><span class="line"><span class="string">"    \"date\": \"2019.01.01\"\n"</span> +</span><br><span class="line"><span class="string">"  },\n"</span> +</span><br><span class="line"><span class="string">"  {\n"</span> +</span><br><span class="line"><span class="string">"    \"id\": 2,\n"</span> +</span><br><span class="line"><span class="string">"    \"title\": \"新闻2\",\n"</span> +</span><br><span class="line"><span class="string">"    \"info\": \"新闻内容2\",\n"</span> +</span><br><span class="line"><span class="string">"    \"date\": \"2019.01.01\"\n"</span> +</span><br><span class="line"><span class="string">"  },\n"</span> +</span><br><span class="line"><span class="string">"  {\n"</span> +</span><br><span class="line"><span class="string">"    \"id\": 3,\n"</span> +</span><br><span class="line"><span class="string">"    \"title\": \"新闻3\",\n"</span> +</span><br><span class="line"><span class="string">"    \"info\": \"新闻内容3\",\n"</span> +</span><br><span class="line"><span class="string">"    \"date\": \"2019.01.01\"\n"</span> +</span><br><span class="line"><span class="string">"  }\n"</span> +</span><br><span class="line"><span class="string">"]"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>Vue请求为：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">getTestServer(){</span><br><span class="line">    <span class="comment">//http://127.0.0.1:8081/TestServlet</span></span><br><span class="line">    <span class="keyword">this</span>.$http.get(<span class="string">"http://localhost:8081/TestServlet?id=1&title=new1"</span>)</span><br><span class="line">.then(<span class="function">(<span class="params">response</span>) =></span> {</span><br><span class="line">  <span class="built_in">console</span>.log(response);</span><br><span class="line">},(error) => {</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">  alert(error);</span><br><span class="line">}).catch(<span class="function"><span class="keyword">function</span> (<span class="params">exception</span>) </span>{</span><br><span class="line"><span class="built_in">console</span>.log(exception);</span><br><span class="line">});</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>请求参数直接拼接在了请求路径的后面，这是一种get请求传递的方式。还有另一种以JSON格式数据的传递方式。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">getTestServer(){</span><br><span class="line">  <span class="keyword">this</span>.$http.get(<span class="string">"http://localhost:8081/TestServlet"</span>,{<span class="attr">params</span>:{<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">title</span>:<span class="string">'new1'</span>}})</span><br><span class="line">.then(<span class="function">(<span class="params">response</span>) =></span> {</span><br><span class="line">  <span class="built_in">console</span>.log(response);</span><br><span class="line">},(error) => {</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">  alert(error);</span><br><span class="line">}).catch(<span class="function"><span class="keyword">function</span> (<span class="params">exception</span>) </span>{</span><br><span class="line"><span class="built_in">console</span>.log(exception);</span><br><span class="line">});</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>url路径后的JSON对象中除了可以通过params属性传递数据外，也可以根据实际情况设置其他请求配置。</p><h3 id="10-3-2-post请求处理"><a href="#10-3-2-post请求处理" class="headerlink" title="10.3.2 post请求处理"></a>10.3.2 post请求处理</h3><p>post请求处理与get请求处理基本一致，只是post请求多出了一个请求体设置。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">postTestServet(){</span><br><span class="line">  <span class="keyword">this</span>.$http.post(</span><br><span class="line"><span class="string">"http://localhost:8081/TestServlet"</span>,</span><br><span class="line">{<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">title</span>:<span class="string">'new1'</span>},{</span><br><span class="line">  emulateJSON:<span class="literal">true</span></span><br><span class="line">}</span><br><span class="line">  ).then(</span><br><span class="line">(response)=>{</span><br><span class="line">  <span class="built_in">console</span>.log(response);</span><br><span class="line">},</span><br><span class="line">(error)=>{</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">}</span><br><span class="line">  ).catch(</span><br><span class="line">(exception)=>{</span><br><span class="line">  <span class="built_in">console</span>.log(exception);</span><br><span class="line">}</span><br><span class="line">  );</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>上述案例中，url路径后的第一个JSON对象为post请求设置的请求体数据信息；第二个JSON对象为设置post请求的报文信息。其中的emulateJSON属性作用很大，Vue的ajax请求默认为application/json类型的请求，因为我们传递的报文体是一个JSON格式的数据，但后端服务器不一定支持application/json类型的数据，因此，必须在发送报文之前进行数据格式的转换，将其转换为通用的form表单格式数据。</p><p>显然，我们后端编写的servlet只是一个普通的form表单类型的服务，因此无法解析application/json数据，必须设置emulateJSON属性。</p><h3 id="10-3-3-jsonp请求处理"><a href="#10-3-3-jsonp请求处理" class="headerlink" title="10.3.3 jsonp请求处理"></a>10.3.3 jsonp请求处理</h3><p>既然我们已经学习了通用的get和post请求，为何Vue还提供了一个jsonp类型的请求处理呢？</p><p>尝试在浏览器地址栏访问远程主机接口<a href="http://123.56.12.60:8080/MessageBoardAPP/MessageServlet?method=queryMessage&username=zq" target="_blank" rel="noopener">http://123.56.12.60:8080/MessageBoardAPP/MessageServlet?method=queryMessage&username=zq</a> ，我们会发现该接口可以进行数据访问，并且能够返回JSON格式的数据。</p><p>我们尝试通过post或者get方法来访问该接口。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">jsonpTestServlet(){</span><br><span class="line">  <span class="keyword">this</span>.$http.post(</span><br><span class="line"><span class="string">"http://123.56.12.60:8080/MessageBoardAPP/MessageServlet"</span>,</span><br><span class="line">{</span><br><span class="line">  method: <span class="string">'queryMessage'</span>,</span><br><span class="line">  username: <span class="string">'zq'</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">  emulateJSON:<span class="literal">true</span></span><br><span class="line">}</span><br><span class="line">  ).then(</span><br><span class="line">(response)=>{</span><br><span class="line">  <span class="built_in">console</span>.log(response);</span><br><span class="line">},</span><br><span class="line">(error)=>{</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">}</span><br><span class="line">  ).catch(</span><br><span class="line">(exception)=>{</span><br><span class="line">  <span class="built_in">console</span>.log(exception);</span><br><span class="line">}</span><br><span class="line">  );</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>我们发现上述远程接口并无法正常获取到数据，浏览器控制台抛出了数据异常：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failed to load http:<span class="comment">//123.56.12.60:8080/MessageBoardAPP/MessageServlet: No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://localhost:8080' is therefore not allowed access.</span></span><br></pre></td></tr></tbody></table></figure></div><p>日志告诉我们加载<a href="http://123.56.12.60:8080/MessageBoardAPP/MessageServlet" target="_blank" rel="noopener">http://123.56.12.60:8080/MessageBoardAPP/MessageServlet</a> 接口失败，但在网络监控中，我们发现请求似乎已经成功，这又是什么原因造成的呢？</p><p>出现上述问题的原因是：浏览器在诞生之初，为了考虑数据访问安全，设计了请求同源策略，其中很重要的Cookie技术就是为了解决这种问题的。在后续JavaScript推出的AJAX技术本身也要解决该类问题，AJAX在设计上本身就不支持“跨域”请求，这是AJAX中极其重要的一大问题。</p><p>所谓跨域问题，就是指当前应用只允许访问该主机下的应用资源，请求要么访问应用本身的资源，要么访问同主机下的其他资源，不需要访问其他主机上的资源。</p><p>在上述案例中，我们的Vue应用部署在localhost主机上，访问应用自身的test.json资源完全没有问题，访问8081Tomcat容器中的应用资源也没有问题，他们都是属于同一域内的资源；但要访问123.56.12.60主机上的资源就存在了跨域问题，无法获取远程主机上的数据，所以请求出现失败。</p><p>jsonp技术是一种解决客户端AJAX请求跨域的方案，这种方案相对来说是一种简单的实现技术，若想实现复杂的跨域方案，可以使用CORS技术。</p><p>注意jsonp技术底层是通过get请求来实现的，因此，我们需要以get请求的方式来进行数据处理。</p><p>我们将上述请求案例修改jsonp的请求方法：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">jsonpTestServlet(){</span><br><span class="line">  <span class="keyword">this</span>.$http.jsonp(</span><br><span class="line"><span class="string">"http://localhost:8081/TestServlet"</span>,</span><br><span class="line">{</span><br><span class="line">  params:{<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">title</span>:<span class="string">'new1'</span>},</span><br><span class="line">  emulateJSON:<span class="literal">true</span></span><br><span class="line">}</span><br><span class="line">  ).then(</span><br><span class="line">(response)=>{</span><br><span class="line">  <span class="built_in">console</span>.log(response);</span><br><span class="line">},</span><br><span class="line">(error)=>{</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">}</span><br><span class="line">  ).catch(</span><br><span class="line">(exception)=>{</span><br><span class="line">  <span class="built_in">console</span>.log(exception);</span><br><span class="line">}</span><br><span class="line">  );</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>1、上述案例请求路径为本地的<a href="http://localhost:8081/TestServlet" target="_blank" rel="noopener">http://localhost:8081/TestServlet</a> 。<br>2、请求数据以get请求的方式进行组织，并且设置了请求类型支持json格式转换。</p><p>尝试测试上述案例，发现控制台已经不再报错，但在response对象中依旧没有获取到数据，body数据为null，也就是我们的请求依旧是失败的。</p><p>在仔细查看报文，我们发现请求路径<a href="http://localhost:8081/TestServlet?id=1&title=new1&callback=_jsonpjgu3hmwmlqb" target="_blank" rel="noopener">http://localhost:8081/TestServlet?id=1&title=new1&callback=_jsonpjgu3hmwmlqb</a> 中，多出了一个jsonp的数据callback=_jsonpjgu3hmwmlqb，该数据是jsonp技术为我们自动添加的唯一字符串标识。</p><p>在网络中，我们已经看到请求获取到了数据，但该这些数据并没有加载到应用中来。</p><p>实际上，jsonp是一种类似于Cookie的数据共享技术，要求服务端也进行jsonp请求的支持。</p><p>将我们服务端代码修改为：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line">String id = request.getParameter(<span class="string">"id"</span>);</span><br><span class="line">String title = request.getParameter(<span class="string">"title"</span>);</span><br><span class="line">String callback = request.getParameter(<span class="string">"callback"</span>);</span><br><span class="line">System.out.println(id + <span class="string">"----"</span> + title + <span class="string">"----"</span> + jsonp);</span><br><span class="line"></span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=UTF-8;pageEncoding=UTF-8"</span>);</span><br><span class="line">response.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设置响应头允许ajax跨域访问 */</span></span><br><span class="line"><span class="comment">/* 星号表示所有的异域请求都可以接受*/</span></span><br><span class="line">response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line"></span><br><span class="line">response.setHeader(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"GET,POST"</span>);</span><br><span class="line">String data = <span class="string">"[\n"</span> +</span><br><span class="line"><span class="string">"  {\n"</span> +</span><br><span class="line"><span class="string">"    \"id\": 1,\n"</span> +</span><br><span class="line"><span class="string">"    \"title\": \"新闻1\",\n"</span> +</span><br><span class="line"><span class="string">"    \"info\": \"新闻内容1\",\n"</span> +</span><br><span class="line"><span class="string">"    \"date\": \"2019.01.01\"\n"</span> +</span><br><span class="line"><span class="string">"  },\n"</span> +</span><br><span class="line"><span class="string">"  {\n"</span> +</span><br><span class="line"><span class="string">"    \"id\": 2,\n"</span> +</span><br><span class="line"><span class="string">"    \"title\": \"新闻2\",\n"</span> +</span><br><span class="line"><span class="string">"    \"info\": \"新闻内容2\",\n"</span> +</span><br><span class="line"><span class="string">"    \"date\": \"2019.01.01\"\n"</span> +</span><br><span class="line"><span class="string">"  },\n"</span> +</span><br><span class="line"><span class="string">"  {\n"</span> +</span><br><span class="line"><span class="string">"    \"id\": 3,\n"</span> +</span><br><span class="line"><span class="string">"    \"title\": \"新闻3\",\n"</span> +</span><br><span class="line"><span class="string">"    \"info\": \"新闻内容3\",\n"</span> +</span><br><span class="line"><span class="string">"    \"date\": \"2019.01.01\"\n"</span> +</span><br><span class="line"><span class="string">"  }\n"</span> +</span><br><span class="line"><span class="string">"]"</span>;</span><br><span class="line"></span><br><span class="line">response.getWriter().write(callback + <span class="string">"("</span> + data + <span class="string">")"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h5 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h5><p>1、服务端servlet除了获取正常业务数据外，还需要获取传递的唯一字符串参数callback。<br>2、将获取到的callback字符串当做一个JS函数结构进行拼接callback()，在该函数括号中再拼接将要返回的JSON格式数据。</p><p>进行以上修改后，再次测试，发现应用请求正常，查看网络中截获的报文，发现响应数据格式已经变成了如下格式：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">_jsonpcxmlstwrk4([</span><br><span class="line">  {</span><br><span class="line">    <span class="string">"id"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"title"</span>: <span class="string">"新闻1"</span>,</span><br><span class="line">    <span class="string">"info"</span>: <span class="string">"新闻内容1"</span>,</span><br><span class="line">    <span class="string">"date"</span>: <span class="string">"2019.01.01"</span></span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="string">"id"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">"title"</span>: <span class="string">"新闻2"</span>,</span><br><span class="line">    <span class="string">"info"</span>: <span class="string">"新闻内容2"</span>,</span><br><span class="line">    <span class="string">"date"</span>: <span class="string">"2019.01.01"</span></span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="string">"id"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">"title"</span>: <span class="string">"新闻3"</span>,</span><br><span class="line">    <span class="string">"info"</span>: <span class="string">"新闻内容3"</span>,</span><br><span class="line">    <span class="string">"date"</span>: <span class="string">"2019.01.01"</span></span><br><span class="line">  }</span><br><span class="line">])</span><br></pre></td></tr></tbody></table></figure></div><p>jsonp技术本质上是在请求发送前，在客户端记录一个唯一标识的字符串，在发送时将该字符串传递到服务端，服务端在进行响应时，再以特定格式进行将该字符串传递回来。保证客户端请求与服务端响应持有相同的唯一串码，表示本次请求没有拦截篡改。</p><p>通过上述jsonp的技术，我们就能够实现跨域请求，如果将后端服务部署到远程主机，再次进行请求，就不会出现最初的跨域异常问题。</p><h3 id="10-3-4-页面初始化发起AJAX请求"><a href="#10-3-4-页面初始化发起AJAX请求" class="headerlink" title="10.3.4 页面初始化发起AJAX请求"></a>10.3.4 页面初始化发起AJAX请求</h3><p>如果我们想要我们的组件在页面一加载时，就发起AJAX请求，进行页面数据处理，我们可以借助组件的生命周期函数mounted。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mounted(){</span><br><span class="line">  <span class="keyword">this</span>.getTest();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></span></template></span></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习之——Vue数据绑定（一）</title>
      <link href="/2020/02/22/study-file/3.0%20%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2020/02/22/study-file/3.0%20%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h1 id="三、Vue数据绑定（一）"><a href="#三、Vue数据绑定（一）" class="headerlink" title="三、Vue数据绑定（一）"></a>三、Vue数据绑定（一）</h1><h2 id="3-1-文本插值"><a href="#3-1-文本插值" class="headerlink" title="3.1 文本插值"></a>3.1 文本插值</h2><p>数据绑定最常见的形式就是使用“Mustache”语法 (双大括号) 的文本插值：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <div id="<span" class="string">"web"><br><span class="line">        <p>{{message}}<<span class="regexp">/p></span><br><span class="line"><span class="regexp">    <!--</span-->div></span><br><span class="line">    <script></span><br><span class="line">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue({</span><br><span class="line">           el: <span class="string">"#web"</span>,</span><br><span class="line">           data: {</span><br><span class="line">               message: <span class="string">"文本插值"</span></span><br><span class="line">           }</span><br><span class="line">        });</span><br><span class="line">    <<span class="regexp">/script></span></span><br><span class="line"><span class="regexp"></</span>body></span><br></pre></td></tr></tbody></table></figure></div><p>Mustache 标签将会被替代为对应数据对象上 message 属性的值。无论何时，绑定的数据对象上 message 属性发生了改变，插值处的内容都会更新。</p><p>通过使用 v-once 指令，你也能执行一次性地插值，当数据改变时，插值处的内容不会更新。但请留心这会影响到该节点上的其它数据绑定：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line">    <div id=<span class="string">"web"</span>></span><br><span class="line">        <p>{{message}}<<span class="regexp">/p></span></span><br><span class="line"><span class="regexp">        <p><span v-once>一次性插值：{{spanValue}}</</span>span><<span class="regexp">/p></span></span><br><span class="line"><span class="regexp">    </</span>div></span><br><span class="line">    <script></span><br><span class="line">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue({</span><br><span class="line">           el: <span class="string">"#web"</span>,</span><br><span class="line">           data: {</span><br><span class="line">               message: <span class="string">"文本插值"</span>,</span><br><span class="line">               spanValue: <span class="string">"spanValue"</span></span><br><span class="line">           }</span><br><span class="line">        });</span><br><span class="line">    <<span class="regexp">/script></span></span><br><span class="line"><span class="regexp"></</span>body></span><br></pre></td></tr></tbody></table></figure></div><h2 id="3-2-原始HTML文本插值"><a href="#3-2-原始HTML文本插值" class="headerlink" title="3.2 原始HTML文本插值"></a>3.2 原始HTML文本插值</h2><p>双大括号Mustache标签会将数据解释为普通文本，而非 HTML 代码。为了输出真正的 HTML，你需要使用 v-html 指令。</p><p>v-html指令接收一个字符串类型的数据，将该字符串解析为HTML模板内容之后，再进行输出。v-html指令要求必须挂载一个HTML元素节点下。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line"><div id=<span class="string">"web"</span>></span><br><span class="line">    <p>直接显示html文本内容：{{html}}<<span class="regexp">/p></span></span><br><span class="line"><span class="regexp">    <p v-html="html"></</span>p></span><br><span class="line">    <p>将html文本内容渲染为html内容后显示：<div v-html=<span class="string">"html"</span>><<span class="regexp">/div></</span>p></span><br><span class="line">    <!--<span class="xml"><span class="tag"><<span class="name">p</span>></span>将html文本内容渲染为html内容后显示：<span class="tag"><<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"{{html}}"</span>></span><span class="tag"></<span class="name">div</span>></span><span class="tag"></<span class="name">p</span>></span></span>--></span><br><span class="line">    <!--<span class="xml"><span class="tag"><<span class="name">p</span> <span class="attr">v-html</span>></span>将html文本内容渲染为html内容后显示：{{html}}<span class="tag"></<span class="name">p</span>></span></span>--></span><br><span class="line">    <!--<span class="xml"><span class="tag"><<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">"将html文本内容渲染为html内容后显示：+ {{html}}"</span>></span><span class="tag"></<span class="name">p</span>></span></span>--></span><br><span class="line"><<span class="regexp">/div></span></span><br><span class="line"><span class="regexp"><script></span></span><br><span class="line"><span class="regexp">    var vm = new Vue({</span></span><br><span class="line"><span class="regexp">        el: "#web",</span></span><br><span class="line"><span class="regexp">        data: {</span></span><br><span class="line"><span class="regexp">            html: "<span style='color: red'>这是一段文本内容</</span>span><span class="string">"</span></span><br><span class="line"><span class="string">        }</span></span><br><span class="line"><span class="string">    });</span></span><br><span class="line"><span class="string"></script></span></span><br><span class="line"><span class="string"></span></span><br></p></span></div></span></pre></td></tr></tbody></table></figure></div><h2 id="3-3-HTML属性绑定值"><a href="#3-3-HTML属性绑定值" class="headerlink" title="3.3 HTML属性绑定值"></a>3.3 HTML属性绑定值</h2><p>Mustache语法不能作用在 HTML 特性上，遇到这种情况应该使用 v-bind 指令。v-bind指令接收一个Vue实例中的属性，也可以接收一个字符串内容。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <div id="<span" class="string">"web"><br><span class="line">        <p v-bind:style="<span" class="string">"message">段落文本<<span class="regexp">/p></span><br><span class="line"><span class="regexp">        </span></span></p><p v-bind:style="'font-size:20px;' + message">段落文本<!--</span-->p><br><span class="line">    <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp">    <script></span></span><br><span class="line"><span class="regexp">        var vm = new Vue({</span></span><br><span class="line"><span class="regexp">           el: "#web",</span></span><br><span class="line"><span class="regexp">           data: {</span></span><br><span class="line"><span class="regexp">               message: "color:red"</span></span><br><span class="line"><span class="regexp">           }</span></span><br><span class="line"><span class="regexp">        });</span></span><br><span class="line"><span class="regexp">    </</span>script></span><br><span class="line"><<span class="regexp">/body></span></span><br></pre></td></tr></tbody></table></figure></div><h2 id="3-4-数据绑定中的JavaScript的表达式"><a href="#3-4-数据绑定中的JavaScript的表达式" class="headerlink" title="3.4 数据绑定中的JavaScript的表达式"></a>3.4 数据绑定中的JavaScript的表达式</h2><p>迄今为止，在我们的模板中，我们一直都只绑定简单的属性键值。但事实上，对于所有的数据绑定，Vue.js 都提供了完全的 JavaScript 表达式支持。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line">    <div id=<span class="string">"web"</span>></span><br><span class="line">        <h3>number：{{number++}}<<span class="regexp">/h3></span></span><br><span class="line"><span class="regexp">        <h3>{{boolean ? "yes" : "no"}}</</span>h3></span><br><span class="line">        <h3>{{str.split(<span class="string">','</span>).reverse().join(<span class="string">','</span>)}}<<span class="regexp">/h3></span></span><br><span class="line"><span class="regexp">    </</span>div></span><br><span class="line">    <script></span><br><span class="line">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue({</span><br><span class="line">            el: <span class="string">"#web"</span>,</span><br><span class="line">            data: {</span><br><span class="line">                number: <span class="number">1</span>,</span><br><span class="line">                boolean: <span class="literal">true</span>,</span><br><span class="line">                str: <span class="string">"a,b,c,d"</span></span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">    <<span class="regexp">/script></span></span><br><span class="line"><span class="regexp"></</span>body></span><br></pre></td></tr></tbody></table></figure></div><p>要注意，在进行数据绑定时，只能使用一个JavaScript的表达式：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><h3>{{<span class="keyword">var</span> a = <span class="number">1</span>}}<<span class="regexp">/h3></span></span><br><span class="line"><span class="regexp"><h3>{{if(boolean){ return number;} }}</</span>h3></span><br></pre></td></tr></tbody></table></figure></div><h2 id="3-5-Vue自定义过滤器"><a href="#3-5-Vue自定义过滤器" class="headerlink" title="3.5 Vue自定义过滤器"></a>3.5 Vue自定义过滤器</h2><p>在Vue数据绑定过程中可以通过自定义过滤器对数据进行简单的文本格式化，过滤器的使用通过管道符“|”来指示。</p><p>Vue自定义过滤器存在全局定义的方式和局部定义的方式。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line">    <div id=<span class="string">"web"</span>></span><br><span class="line">        <h1>Vue实例<span class="number">1</span>挂载对象<<span class="regexp">/h1></span></span><br><span class="line"><span class="regexp">        <h3>{{message}}</</span>h3></span><br><span class="line">        <h3>{{message | toUpperCase}}<<span class="regexp">/h3></span></span><br><span class="line"><span class="regexp">        <h3>{{value | number(2)}}</</span>h3></span><br><span class="line">    <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp">    <div id="web1"></span></span><br><span class="line"><span class="regexp">        <h1>Vue实例2挂载对象</</span>h1></span><br><span class="line">        <h3>{{message | toUpperCase}}<<span class="regexp">/h3></span></span><br><span class="line"><span class="regexp">    </</span>div></span><br><span class="line">    <script></span><br><span class="line">        <span class="comment">/*全局式过滤器定义，在此之后的vue实例都可以使用该过滤器*/</span></span><br><span class="line">        <span class="comment">/*过滤器函数默认会把管道符指示的绑定数据当做首个参数传入，当前toUpperCase只接收一个参数，即message*/</span></span><br><span class="line">        Vue.filter(<span class="string">"toUpperCase"</span>,<span class="function"><span class="keyword">function</span> (<span class="params">inString</span>) </span>{</span><br><span class="line">            <span class="keyword">return</span> inString.toUpperCase();</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue({</span><br><span class="line">            el: <span class="string">"#web"</span>,</span><br><span class="line">            data: {</span><br><span class="line">                message: <span class="string">"Hello World!"</span>,</span><br><span class="line">                value: <span class="number">3.1415926</span></span><br><span class="line">            },</span><br><span class="line">            <span class="comment">/*局部式过滤器定义，在此定义的过滤器只能在当前Vue实例挂载的元素节点下使用*/</span></span><br><span class="line">            filters:{</span><br><span class="line">                <span class="comment">/*将传入的绑定数据data，保留指定n位小数，该过滤器接收两个参数*/</span></span><br><span class="line">                number: <span class="function"><span class="keyword">function</span> (<span class="params">data,num</span>) </span>{</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line">                    <span class="keyword">return</span> data.toFixed(num);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> vm1 = <span class="keyword">new</span> Vue({</span><br><span class="line">            el: <span class="string">"#web1"</span>,</span><br><span class="line">            data: {</span><br><span class="line">                message: <span class="string">"Hello World!"</span></span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">    <<span class="regexp">/script></span></span><br><span class="line"><span class="regexp"></</span>body></span><br></pre></td></tr></tbody></table></figure></div><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><ul><li>在控制台输入vm.value = 3.1123。再次尝试输入其他数字。</li></ul><p>自定义过滤器的实现本质上就通过Vue实例生命周期钩子函数beforeUpdate来实现的，我们每次更新Vue实例中的数据时，自定义过滤器都会生效，操作完数据后，再将处理后的值覆盖当实例数据中去。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line">    <div id=<span class="string">"web2"</span>></span><br><span class="line">        <h1>Vue实例<span class="number">3</span>挂载对象<<span class="regexp">/h1></span></span><br><span class="line"><span class="regexp">        <h3>{{message}}</</span>h3></span><br><span class="line">    <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp">    <script></span></span><br><span class="line"><span class="regexp">        var vm2 = new Vue({</span></span><br><span class="line"><span class="regexp">            el: "#web2",</span></span><br><span class="line"><span class="regexp">            data: {</span></span><br><span class="line"><span class="regexp">                message: "Hello World!"</span></span><br><span class="line"><span class="regexp">            },</span></span><br><span class="line"><span class="regexp">            beforeMount: function(){</span></span><br><span class="line"><span class="regexp">                this.message = this.message.toLowerCase();</span></span><br><span class="line"><span class="regexp">            },</span></span><br><span class="line"><span class="regexp">            beforeUpdate: function () {</span></span><br><span class="line"><span class="regexp">                this.message = this.message.toLowerCase();</span></span><br><span class="line"><span class="regexp">            }</span></span><br><span class="line"><span class="regexp">        })</span></span><br><span class="line"><span class="regexp">    </</span>script></span><br><span class="line"><<span class="regexp">/body></span></span><br></pre></td></tr></tbody></table></figure></div><p>Vue1.0版本提供了Vue自带的几个过滤器，但这几个过滤器功能相对都比较简单，例如我们上面编写的大小写转换过滤器，意义并不大，因此，Vue2.0取消了这些自定义过滤器，统一由编程者进行过滤器的编写。</p><h2 id="3-7-计算属性"><a href="#3-7-计算属性" class="headerlink" title="3.7 计算属性"></a>3.7 计算属性</h2><h5 id="来源于方法的数据绑定"><a href="#来源于方法的数据绑定" class="headerlink" title="来源于方法的数据绑定"></a>来源于方法的数据绑定</h5><p>在介绍计算属性之前，我们先看一下使用来源方法的数据绑定：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line"><div id=<span class="string">"web"</span>></span><br><span class="line">    <h3>{{message}}<<span class="regexp">/h3></span></span><br><span class="line"><span class="regexp">    <h3>{{oldMessage}}</</span>h3></span><br><span class="line">    <h3>{{change()}}<<span class="regexp">/h3></span></span><br><span class="line"><span class="regexp"></</span>div></span><br><span class="line"><script></span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue({</span><br><span class="line">        el: <span class="string">"#web"</span>,</span><br><span class="line">        data: {</span><br><span class="line">            message: <span class="string">"Hello World!"</span>,</span><br><span class="line">            oldMessage: <span class="string">""</span></span><br><span class="line">        },</span><br><span class="line">        methods: {</span><br><span class="line">            change: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">                <span class="keyword">this</span>.oldMessage = <span class="keyword">this</span>.message.toUpperCase()</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.oldMessage;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    });</span><br><span class="line"><<span class="regexp">/script></span></span><br><span class="line"><span class="regexp"></</span>body></span><br></pre></td></tr></tbody></table></figure></div><p>当我们在控制台动态地修改message属性的信息时，我们可以看到change方法中的数据也发生了变化。message信息发生一次变化，相当就触发了一次change方法，将变化后的数据渲染在页面上。</p><p>Vue计算属性的出现就是为了实现方法调用的类似功能，但计算属性的功能比方法的使用更加高效与强大。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line"><div id=<span class="string">"web"</span>></span><br><span class="line">    <h3>{{message}}<<span class="regexp">/h3></span></span><br><span class="line"><span class="regexp">    <h3>{{newMessage}}</</span>h3></span><br><span class="line"><h3>{{newMessageMethod()}}<<span class="regexp">/h3></span></span><br><span class="line"><span class="regexp"></</span>div></span><br><span class="line"><script></span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue({</span><br><span class="line">        el: <span class="string">"#web"</span>,</span><br><span class="line">        data: {</span><br><span class="line">            message: <span class="string">"Hello World!"</span></span><br><span class="line">        },</span><br><span class="line">        computed: {</span><br><span class="line">            newMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.message.toUpperCase();</span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">methods:{</span><br><span class="line">newMessageMethod: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.message.toUpperCase();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">    });</span><br><span class="line"><<span class="regexp">/script></span></span><br><span class="line"><span class="regexp"></</span>body></span><br></pre></td></tr></tbody></table></figure></div><p>Vue计算属性通过Vue实例中的computed属性来定义，该JSON结构下的属性即为计算属性，接收一个函数类型的对象。</p><p>计算属性之所以称之为计算属性，是因为computed定义的属性都是通过一些复杂计算得出的，在计算过程中，该属性的值可以依赖于当前Vue实例的其他属性数据。</p><h5 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h5><ul><li>在控制台输入vm.message = ‘abc’。</li><li>在控制台输入vm.newMessage = ‘123’。</li></ul><p>当我们修改计算属性依赖的属性时，计算属性也会动态的发生改变。但我们直接修改计算属性时，会出现一个异常。这是因为计算属性的默认定义方式并没有提供setter方法。</p><p>我们显示地定义计算属性的setter方法：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line"><div id=<span class="string">"web"</span>></span><br><span class="line">    <h3>{{message}}<<span class="regexp">/h3></span></span><br><span class="line"><span class="regexp">    <h3>{{newMessage}}</</span>h3></span><br><span class="line"><<span class="regexp">/div></span></span><br><span class="line"><span class="regexp"><script></span></span><br><span class="line"><span class="regexp">    var vm = new Vue({</span></span><br><span class="line"><span class="regexp">        el: "#web",</span></span><br><span class="line"><span class="regexp">        data: {</span></span><br><span class="line"><span class="regexp">            message: "Hello World!"</span></span><br><span class="line"><span class="regexp">        },</span></span><br><span class="line"><span class="regexp">        computed: {</span></span><br><span class="line"><span class="regexp">            newMessage:{</span></span><br><span class="line"><span class="regexp">                /</span><span class="regexp">/get方法，计算属性默认定义的函数相当于设置get函数</span></span><br><span class="line"><span class="regexp">                get: function () {</span></span><br><span class="line"><span class="regexp">                    return this.message.toUpperCase();</span></span><br><span class="line"><span class="regexp">                },</span></span><br><span class="line"><span class="regexp">                set: function (newValue) {</span></span><br><span class="line"><span class="regexp">                    console.log("新值：" + newValue);</span></span><br><span class="line"><span class="regexp">                    console.log("老值：" + this.newMessage);</span></span><br><span class="line"><span class="regexp">                    /</span><span class="regexp">/直接使用传入值为当前计算属性设置值，将会引起死循环，因为直接为newMessage赋值将会触发set方法</span></span><br><span class="line"><span class="regexp">                    /</span><span class="regexp">/this.newMessage = newValue;</span></span><br><span class="line"><span class="regexp">                    /</span><span class="regexp">/触发message值的修改，之后在通过get函数来获取newMessage的值</span></span><br><span class="line"><span class="regexp">                    this.message = newValue;</span></span><br><span class="line"><span class="regexp">                }</span></span><br><span class="line"><span class="regexp">            }</span></span><br><span class="line"><span class="regexp">        }</span></span><br><span class="line"><span class="regexp">    });</span></span><br><span class="line"><span class="regexp"></</span>script></span><br><span class="line"><<span class="regexp">/body></span></span><br></pre></td></tr></tbody></table></figure></div><p>通过上述案例，我们可以看到message属性的变化前的值以及变化后的值。通过计算属性的操作方式，我们可以获取到属性值的变化内容。</p><p>当Vue实例中定义的属性在进行渲染之前，涉及复杂的内容计算或者与其他属性存在依赖关系时，我们可以考虑将该属性定义为计算属性。</p><h5 id="计算属性与方法数据绑定的比较"><a href="#计算属性与方法数据绑定的比较" class="headerlink" title="计算属性与方法数据绑定的比较"></a>计算属性与方法数据绑定的比较</h5><p>虽然计算属性与方法的数据绑定都能实现类似的数据绑定功能，使得呈现出的数据效果相同，但两种用法却存在本质的差别。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line"><div id=<span class="string">"web"</span>></span><br><span class="line">    <h3>{{message}}<<span class="regexp">/h3></span></span><br><span class="line"><span class="regexp">    <h3>{{newMessage}}</</span>h3></span><br><span class="line">    <h3>{{newMessage}}<<span class="regexp">/h3></span></span><br><span class="line"><span class="regexp">    <h3>{{newMessageMethod()}}</</span>h3></span><br><span class="line">    <h3>{{newMessageMethod()}}<<span class="regexp">/h3></span></span><br><span class="line"><span class="regexp">    <h3>{{newMessageMethod()}}</</span>h3></span><br><span class="line"><<span class="regexp">/div></span></span><br><span class="line"><span class="regexp"><script></span></span><br><span class="line"><span class="regexp">    var vm = new Vue({</span></span><br><span class="line"><span class="regexp">        el: "#web",</span></span><br><span class="line"><span class="regexp">        data: {</span></span><br><span class="line"><span class="regexp">            message: "abc"</span></span><br><span class="line"><span class="regexp">        },</span></span><br><span class="line"><span class="regexp">        computed: {</span></span><br><span class="line"><span class="regexp">            newMessage: function () {</span></span><br><span class="line"><span class="regexp">                console.log("--计算属性--");</span></span><br><span class="line"><span class="regexp">                return this.message.toUpperCase();</span></span><br><span class="line"><span class="regexp">            }</span></span><br><span class="line"><span class="regexp">        },</span></span><br><span class="line"><span class="regexp">        methods:{</span></span><br><span class="line"><span class="regexp">            newMessageMethod: function(){</span></span><br><span class="line"><span class="regexp">                console.log("--方法计算值--");</span></span><br><span class="line"><span class="regexp">                return this.message.toUpperCase();</span></span><br><span class="line"><span class="regexp">            }</span></span><br><span class="line"><span class="regexp">        }</span></span><br><span class="line"><span class="regexp">    });</span></span><br><span class="line"><span class="regexp"></</span>script></span><br><span class="line"></span><br><span class="line"><<span class="regexp">/body></span></span><br></pre></td></tr></tbody></table></figure></div><p>而对于计算属性newMessage，内部会进行相关的缓存操作，如果计算属性的依赖属性message内容没有发生改变，newMessage属性的值也不会发生改变，而是直接进行数据返回，计算属性进行一次计算之后将不再进行计算。因此，计算属性的执行效率要高于方法的数据绑定，因此，我们能使用计算属性进行数据绑定时，尽量使用计算属性。</p><h2 id="3-8-侦听属性"><a href="#3-8-侦听属性" class="headerlink" title="3.8 侦听属性"></a>3.8 侦听属性</h2><p>Vue为实例属性值变化提供了一种监听机制，当某个属性发生变化时，将触发该属性的侦听函数。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line">    <div id=<span class="string">"web"</span>></span><br><span class="line">        <h3>{{firstName}}<<span class="regexp">/h3></span></span><br><span class="line"><span class="regexp">        <h3>{{lastName}}</</span>h3></span><br><span class="line">        <h3>{{fullName}}<<span class="regexp">/h3></span></span><br><span class="line"><span class="regexp">    </</span>div></span><br><span class="line">    <script></span><br><span class="line">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue({</span><br><span class="line">            el: <span class="string">"#web"</span>,</span><br><span class="line">            data: {</span><br><span class="line">                firstName: <span class="string">"Jackie"</span>,</span><br><span class="line">                lastName: <span class="string">"Chan"</span>,</span><br><span class="line">                fullName: <span class="string">"Jackie Chan"</span></span><br><span class="line">            },</span><br><span class="line">            watch: {</span><br><span class="line">                <span class="comment">//侦听函数的第一个参数为当前属性传入的新值，第二个参数为当前属性的旧值</span></span><br><span class="line">                firstName: <span class="function"><span class="keyword">function</span> (<span class="params">newval,oldval</span>) </span>{</span><br><span class="line">                    <span class="built_in">console</span>.log(newval);</span><br><span class="line">                    <span class="built_in">console</span>.log(oldval);</span><br><span class="line">                    <span class="keyword">this</span>.fullName = newval + <span class="string">" "</span> + <span class="keyword">this</span>.lastName;</span><br><span class="line">                },</span><br><span class="line">                lastName: <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>{</span><br><span class="line">                    <span class="built_in">console</span>.log(val);</span><br><span class="line">                    <span class="keyword">this</span>.fullName = <span class="keyword">this</span>.firstName + <span class="string">" "</span> + val;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">    <<span class="regexp">/script></span></span><br><span class="line"><span class="regexp"></</span>body></span><br></pre></td></tr></tbody></table></figure></div><p>为Vue实例定义一个watch属性，在该属性即可对该实例中声明的属性设置监听函数，当侦听属性发生变化时，将会触发侦听函数的执行。</p><p>对于侦听属性，我们完全可以通过计算属性来替代，而且代码编写更加简洁。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line">    <div id=<span class="string">"web"</span>></span><br><span class="line">        <h3>{{firstName}}<<span class="regexp">/h3></span></span><br><span class="line"><span class="regexp">        <h3>{{lastName}}</</span>h3></span><br><span class="line">        <h3>{{fullName}}<<span class="regexp">/h3></span></span><br><span class="line"><span class="regexp">    </</span>div></span><br><span class="line">    <script></span><br><span class="line">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue({</span><br><span class="line">            el: <span class="string">"#web"</span>,</span><br><span class="line">            data: {</span><br><span class="line">                firstName: <span class="string">"Jackie"</span>,</span><br><span class="line">                lastName: <span class="string">"Chan"</span></span><br><span class="line">            },</span><br><span class="line">            computed: {</span><br><span class="line">                fullName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">" "</span> + <span class="keyword">this</span>.lastName;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">    <<span class="regexp">/script></span></span><br><span class="line"><span class="regexp"></</span>body></span><br></pre></td></tr></tbody></table></figure></div></body></html></script></span></span></p></span></div></span></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习之——Vue数据绑定（二）</title>
      <link href="/2020/02/22/study-file/4.0%20%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2020/02/22/study-file/4.0%20%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h1 id="四、Vue数据绑定（二）"><a href="#四、Vue数据绑定（二）" class="headerlink" title="四、Vue数据绑定（二）"></a>四、Vue数据绑定（二）</h1><h2 id="4-1-表单渲染"><a href="#4-1-表单渲染" class="headerlink" title="4.1 表单渲染"></a>4.1 表单渲染</h2><p>渲染是web前端中常见的一个术语，表示将HTML、CSS、JavaScript相关代码解析为浏览器展示的内容，我们使用Vue框架就是以框架的方式进行页面的代码组织。</p><p>form表单是HTML中一项极其重要的数据交互技术，我们可以通过form表单进行数据的提交，也可以将数据呈现于form表单中，也就是说form表单中操作的数据存在输入、输出的操作，这就涉及到了Vue中的双向数据绑定，也就是我们现在在入门案例中提到的v-model指令。</p><h3 id="4-1-1-文本输入框"><a href="#4-1-1-文本输入框" class="headerlink" title="4.1.1 文本输入框"></a>4.1.1 文本输入框</h3><p>v-model指令接收一个Vue实例中属性值，当修改form表单中的数据时，Vue实例中绑定的数据会发生改变；而修改Vue实例中的数据，也会同步地影响form表单中的数据，这就是双向数据绑定。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <div id="<span" class="string">"web"><br><span class="line">        <form><br><span class="line">            文本输入框：<input type="<span" class="string">"text"</span> v-model=<span class="string">"inputInfo"</span>><br><span class="line">            <p>{{inputInfo}}<<span class="regexp">/p></span><br><span class="line"><span class="regexp">        <!--</span-->form></span><br><span class="line">    <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp">    <script></span></span><br><span class="line"><span class="regexp">        var vm = new Vue({</span></span><br><span class="line"><span class="regexp">            el: "#web",</span></span><br><span class="line"><span class="regexp">            data: {</span></span><br><span class="line"><span class="regexp">                inputInfo: "Hello World"</span></span><br><span class="line"><span class="regexp">            }</span></span><br><span class="line"><span class="regexp">        });</span></span><br><span class="line"><span class="regexp">    </</span>script></span><br><span class="line"><<span class="regexp">/body></span></span><br></pre></td></tr></tbody></table></figure></div><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><ul><li>修改输入框中的值。</li><li>在控制台修改Vue实例中的值。</li></ul><h3 id="4-1-2-多行文本"><a href="#4-1-2-多行文本" class="headerlink" title="4.1.2 多行文本"></a>4.1.2 多行文本</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line">    <div id=<span class="string">"web"</span>></span><br><span class="line">        <form></span><br><span class="line">            <h3>多行文本<<span class="regexp">/h3></span></span><br><span class="line"><span class="regexp">            <textarea v-model="textareaInfo"></</span>textarea></span><br><span class="line">            <p>{{textareaInfo}}<<span class="regexp">/p></span></span><br><span class="line"><span class="regexp">        </</span>form></span><br><span class="line">    <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp">    <script></span></span><br><span class="line"><span class="regexp">        var vm = new Vue({</span></span><br><span class="line"><span class="regexp">            el: "#web",</span></span><br><span class="line"><span class="regexp">            data: {</span></span><br><span class="line"><span class="regexp">                textareaInfo: "hahaha"</span></span><br><span class="line"><span class="regexp">            }</span></span><br><span class="line"><span class="regexp">        });</span></span><br><span class="line"><span class="regexp">    </</span>script></span><br><span class="line"><<span class="regexp">/body></span></span><br></pre></td></tr></tbody></table></figure></div><h3 id="4-1-3-单选框"><a href="#4-1-3-单选框" class="headerlink" title="4.1.3 单选框"></a>4.1.3 单选框</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line">    <div id=<span class="string">"web"</span>></span><br><span class="line">        <form></span><br><span class="line">            <h3>单选框<<span class="regexp">/h3></span></span><br><span class="line"><span class="regexp">            <label><input type="radio" value="male" v-model="sex">男</</span>label></span><br><span class="line">            <label><span class="xml"><span class="tag"><<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">"remale"</span> <span class="attr">v-model</span>=<span class="string">"sex"</span>></span>女<span class="tag"></<span class="name">label</span>></span></span></span><br><span class="line">            <p>{{sex}}<<span class="regexp">/p></span></span><br><span class="line"><span class="regexp">        </</span>form></span><br><span class="line">    <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp">    <script></span></span><br><span class="line"><span class="regexp">        var vm = new Vue({</span></span><br><span class="line"><span class="regexp">            el: "#web",</span></span><br><span class="line"><span class="regexp">            data: {</span></span><br><span class="line"><span class="regexp">                sex: "male"</span></span><br><span class="line"><span class="regexp">            }</span></span><br><span class="line"><span class="regexp">        });</span></span><br><span class="line"><span class="regexp">    </</span>script></span><br><span class="line"><<span class="regexp">/body></span></span><br></pre></td></tr></tbody></table></figure></div><h3 id="4-1-4-复选框"><a href="#4-1-4-复选框" class="headerlink" title="4.1.4 复选框"></a>4.1.4 复选框</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line">    <div id=<span class="string">"web"</span>></span><br><span class="line">        <form></span><br><span class="line">            <h3>复选框<<span class="regexp">/h3></span></span><br><span class="line"><span class="regexp">            <!--默认产生true或者false--></span></span><br><span class="line"><span class="regexp">            <label>是否选择：<input type="checkbox" v-model="isCheck"></</span>label></span><br><span class="line">            <p>{{isCheck}}<<span class="regexp">/p></span></span><br><span class="line"><span class="regexp">            <label>选择1：<input type="checkbox" value="1" v-model="checkArr"></</span>label></span><br><span class="line">            <label>选择<span class="number">2</span>：<input type=<span class="string">"checkbox"</span> value=<span class="string">"2"</span> v-model=<span class="string">"checkArr"</span>><<span class="regexp">/label></span></span><br><span class="line"><span class="regexp">            <label>选择3：<input type="checkbox" value="3" v-model="checkArr"></</span>label></span><br><span class="line">            <p>{{checkArr}}<<span class="regexp">/p></span></span><br><span class="line"><span class="regexp">        </</span>form></span><br><span class="line">    <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp">    <script></span></span><br><span class="line"><span class="regexp">        var vm = new Vue({</span></span><br><span class="line"><span class="regexp">            el: "#web",</span></span><br><span class="line"><span class="regexp">            data: {</span></span><br><span class="line"><span class="regexp">isCheck: "",</span></span><br><span class="line"><span class="regexp">                /</span>*复选框使用数组来存放数据*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">                checkArr: []</span></span><br><span class="line"><span class="regexp">            }</span></span><br><span class="line"><span class="regexp">        });</span></span><br><span class="line"><span class="regexp">    </</span>script></span><br><span class="line"><<span class="regexp">/body></span></span><br></pre></td></tr></tbody></table></figure></div><h3 id="4-1-5-选择框"><a href="#4-1-5-选择框" class="headerlink" title="4.1.5 选择框"></a>4.1.5 选择框</h3><p>单选情况：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line">    <div id=<span class="string">"web"</span>></span><br><span class="line">        <form></span><br><span class="line">            <h3>选择框<<span class="regexp">/h3></span></span><br><span class="line"><span class="regexp">            请选择：</span></span><br><span class="line"><span class="regexp">            <!--<select v-model="selectValue"></span></span><br><span class="line"><span class="regexp">                <option value="">请选择</</span>option></span><br><span class="line">                <option>A<<span class="regexp">/option></span></span><br><span class="line"><span class="regexp">                <option>B</</span>option></span><br><span class="line">                <option>C<<span class="regexp">/option></span></span><br><span class="line"><span class="regexp">            </</span>select>--></span><br><span class="line">            <select v-model=<span class="string">"selectValue"</span>></span><br><span class="line">                <option value=<span class="string">""</span>>请选择<<span class="regexp">/option></span></span><br><span class="line"><span class="regexp">                <option value="A-value">A</</span>option></span><br><span class="line">                <option value=<span class="string">"B-value"</span>>B<<span class="regexp">/option></span></span><br><span class="line"><span class="regexp">                <option value="C-value">C</</span>option></span><br><span class="line">            <<span class="regexp">/select></span></span><br><span class="line"><span class="regexp">            <p>{{selectValue}}</</span>p></span><br><span class="line">        <<span class="regexp">/form></span></span><br><span class="line"><span class="regexp">    </</span>div></span><br><span class="line">    <script></span><br><span class="line">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue({</span><br><span class="line">            el: <span class="string">"#web"</span>,</span><br><span class="line">            data: {</span><br><span class="line">                selectValue: <span class="string">""</span></span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">    <<span class="regexp">/script></span></span><br><span class="line"><span class="regexp"></</span>body></span><br></pre></td></tr></tbody></table></figure></div><p>多选情况：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line">    <div id=<span class="string">"web"</span>></span><br><span class="line">        <form></span><br><span class="line">            <h3>选择框<<span class="regexp">/h3></span></span><br><span class="line"><span class="regexp">            多选框，请选择：</span></span><br><span class="line"><span class="regexp">            <select v-model="mulSelectValue" multiple></span></span><br><span class="line"><span class="regexp">                <option value="" disabled>请选择</</span>option></span><br><span class="line">                <option value=<span class="string">"A-value"</span>>A<<span class="regexp">/option></span></span><br><span class="line"><span class="regexp">                <option value="B-value">B</</span>option></span><br><span class="line">                <option value=<span class="string">"C-value"</span>>C<<span class="regexp">/option></span></span><br><span class="line"><span class="regexp">            </</span>select></span><br><span class="line">            <p>{{mulSelectValue}}<<span class="regexp">/p></span></span><br><span class="line"><span class="regexp">        </</span>form></span><br><span class="line">    <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp">    <script></span></span><br><span class="line"><span class="regexp">        var vm = new Vue({</span></span><br><span class="line"><span class="regexp">            el: "#web",</span></span><br><span class="line"><span class="regexp">            data: {</span></span><br><span class="line"><span class="regexp">                mulSelectValue: []</span></span><br><span class="line"><span class="regexp">            }</span></span><br><span class="line"><span class="regexp">        });</span></span><br><span class="line"><span class="regexp">    </</span>script></span><br><span class="line"><<span class="regexp">/body></span></span><br></pre></td></tr></tbody></table></figure></div><h3 id="4-1-6-元素属性的数据绑定"><a href="#4-1-6-元素属性的数据绑定" class="headerlink" title="4.1.6 元素属性的数据绑定"></a>4.1.6 元素属性的数据绑定</h3><p>一般情况，单选框、复选框中的value值都是字符串类型，如果我们想要绑定一个复合的JS数据类型时，可以配合v-bind指令来实现。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line">    <div id=<span class="string">"web"</span>></span><br><span class="line">        <form></span><br><span class="line">            <h3>属性的数据绑定<<span class="regexp">/h3></span></span><br><span class="line"><span class="regexp">            <select v-model="selectValue"></span></span><br><span class="line"><span class="regexp">                <option value="">请选择</</span>option></span><br><span class="line">                <option v-bind:value=<span class="string">"selectValueType.aValue"</span>>A<<span class="regexp">/option></span></span><br><span class="line"><span class="regexp">                <option v-bind:value="selectValueType.bValue">B</</span>option></span><br><span class="line">                <option v-bind:value=<span class="string">"selectValueType.cValue"</span>>C<<span class="regexp">/option></span></span><br><span class="line"><span class="regexp">            </</span>select></span><br><span class="line">            <p>{{selectValue}}<<span class="regexp">/p></span></span><br><span class="line"><span class="regexp">        </</span>form></span><br><span class="line">    <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp">    <script></span></span><br><span class="line"><span class="regexp">        var vm = new Vue({</span></span><br><span class="line"><span class="regexp">            el: "#web",</span></span><br><span class="line"><span class="regexp">            data: {</span></span><br><span class="line"><span class="regexp">                selectValue: "",</span></span><br><span class="line"><span class="regexp">                selectValueType: {</span></span><br><span class="line"><span class="regexp">                    aValue: "aValue",</span></span><br><span class="line"><span class="regexp">                    bValue: "bValue",</span></span><br><span class="line"><span class="regexp">                    cValue: "cValue"</span></span><br><span class="line"><span class="regexp">                }</span></span><br><span class="line"><span class="regexp">            }</span></span><br><span class="line"><span class="regexp">        });</span></span><br><span class="line"><span class="regexp">    </</span>script></span><br><span class="line"><<span class="regexp">/body></span></span><br></pre></td></tr></tbody></table></figure></div><h5 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h5><ul><li>在控制台输入vm.selectValueType.bValue = ‘a’，之后选中A选项值。</li></ul><h3 id="4-1-7-双向数据绑定的修饰符"><a href="#4-1-7-双向数据绑定的修饰符" class="headerlink" title="4.1.7 双向数据绑定的修饰符"></a>4.1.7 双向数据绑定的修饰符</h3><p>双向数据绑定指令v-model可以添加一些修饰符，进行相关数据绑定的特性处理。</p><h4 id="lazy"><a href="#lazy" class="headerlink" title=".lazy"></a>.lazy</h4><p>在默认情况下，v-model 在每次 input 事件触发后将输入框的值与数据进行同步修改。我们可以添加为v-model添加lazy 修饰符，从而转变为使用 change 事件进行同步，即当输入框失去焦点时，进行数据同步。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line">    <div id=<span class="string">"web"</span>></span><br><span class="line">        <input type=<span class="string">"text"</span> v-model.lazy=<span class="string">"message"</span>></span><br><span class="line">        <p>{{message}}<<span class="regexp">/p></span></span><br><span class="line"><span class="regexp">    </</span>div></span><br><span class="line">    <script></span><br><span class="line">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue({</span><br><span class="line">            el: <span class="string">"#web"</span>,</span><br><span class="line">            data:{</span><br><span class="line">                message: <span class="string">"Hello World"</span></span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">    <<span class="regexp">/script></span></span><br><span class="line"><span class="regexp"></</span>body></span><br></pre></td></tr></tbody></table></figure></div><h4 id="number"><a href="#number" class="headerlink" title=".number"></a>.number</h4><p>如果想要自动将用户的输入字符串值转为数值类型，可以给 v-model 添加 number 修饰符。number修饰符内部相当于调用了parseFloat()函数，如果这个值无法被 parseFloat() 解析，则会返回原始的值。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line">    <div id=<span class="string">"web"</span>></span><br><span class="line">        <input type=<span class="string">"text"</span> v-model.lazy.number=<span class="string">"message"</span>></span><br><span class="line">        <p>{{message}}<<span class="regexp">/p></span></span><br><span class="line"><span class="regexp">    </</span>div></span><br><span class="line">    <script></span><br><span class="line">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue({</span><br><span class="line">            el: <span class="string">"#web"</span>,</span><br><span class="line">            data:{</span><br><span class="line">                message: <span class="string">"123"</span></span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">    <<span class="regexp">/script></span></span><br><span class="line"><span class="regexp"></</span>body></span><br></pre></td></tr></tbody></table></figure></div><h4 id="trim"><a href="#trim" class="headerlink" title=".trim"></a>.trim</h4><p>如果要自动过滤用户输入的首尾空白字符，可以给 v-model 添加 trim 修饰符。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line">    <div id=<span class="string">"web"</span>></span><br><span class="line">        <input type=<span class="string">"text"</span> v-model.lazy.number.trim=<span class="string">"message"</span>></span><br><span class="line">        <p>{{message}}<<span class="regexp">/p></span></span><br><span class="line"><span class="regexp">    </</span>div></span><br><span class="line">    <script></span><br><span class="line">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue({</span><br><span class="line">            el: <span class="string">"#web"</span>,</span><br><span class="line">            data:{</span><br><span class="line">                message: <span class="string">"123"</span></span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">    <<span class="regexp">/script></span></span><br><span class="line"><span class="regexp"></</span>body></span><br></pre></td></tr></tbody></table></figure></div><h2 id="4-2-Class与Style的绑定"><a href="#4-2-Class与Style的绑定" class="headerlink" title="4.2 Class与Style的绑定"></a>4.2 Class与Style的绑定</h2><p>我们在之前学习过了通过v-bind指令绑定元素的属性内容，而操作HTML元素的class列表与style内联样式，进而改变元素的样式是一种常见的前端需求，我们便可以通过动态绑定class与style来改变样式。</p><h3 id="4-2-1-class的绑定"><a href="#4-2-1-class的绑定" class="headerlink" title="4.2.1 class的绑定"></a>4.2.1 class的绑定</h3><p>对象方式的绑定：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><!DOCTYPE html></span><br><span class="line"><html lang=<span class="string">"en"</span>></span><br><span class="line"><head></span><br><span class="line">    <meta charset=<span class="string">"UTF-8"</span>></span><br><span class="line">    <title><span class="class"><span class="keyword">class</span>样式绑定</<span class="title">title</span>></span></span><br><span class="line"><span class="class">    <<span class="title">script</span> <span class="title">src</span></span>=<span class="string">"../vue/vue.js"</span>><<span class="regexp">/script></span></span><br><span class="line"><span class="regexp">    <style></span></span><br><span class="line"><span class="regexp">        .tap{</span></span><br><span class="line"><span class="regexp">            font-size: 25px;</span></span><br><span class="line"><span class="regexp">        }</span></span><br><span class="line"><span class="regexp">        .active{</span></span><br><span class="line"><span class="regexp">            color: red;</span></span><br><span class="line"><span class="regexp">        }</span></span><br><span class="line"><span class="regexp">        .unactive{</span></span><br><span class="line"><span class="regexp">            color: blue;</span></span><br><span class="line"><span class="regexp">        }</span></span><br><span class="line"><span class="regexp">        .classA{</span></span><br><span class="line"><span class="regexp">            font-weight: bold;</span></span><br><span class="line"><span class="regexp">        }</span></span><br><span class="line"><span class="regexp">    </</span>style></span><br><span class="line"><<span class="regexp">/head></span></span><br><span class="line"><span class="regexp"><body></span></span><br><span class="line"><span class="regexp"><div id="web"></span></span><br><span class="line"><span class="regexp">    <!-- v-bind绑定的class与元素本身的class并不冲突，两者都会生效 --></span></span><br><span class="line"><span class="regexp">    <!-- v-bind绑定class时，接收一个JSON对象,当JSON对象的值为true时，该值对应的键样式生效--></span></span><br><span class="line"><span class="regexp">    <div class="tap" v-bind:class="{'active':false,'unactive':true,'classA':true}"></span></span><br><span class="line"><span class="regexp">        <p>测试内容</</span>p></span><br><span class="line">    <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp">    <div class="tap" v-bind:class="{'active':active,'unactive':!active,'classA':true}"></span></span><br><span class="line"><span class="regexp">        <p>测试内容</</span>p></span><br><span class="line">    <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp"></</span>div></span><br><span class="line"><script></span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue({</span><br><span class="line">        el: <span class="string">"#web"</span>,</span><br><span class="line">        data: {</span><br><span class="line">            active: <span class="literal">true</span></span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line"><<span class="regexp">/script></span></span><br><span class="line"><span class="regexp"></</span>body></span><br><span class="line"><<span class="regexp">/html></span></span><br></pre></td></tr></tbody></table></figure></div><p>数组方式的绑定：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><!DOCTYPE html></span><br><span class="line"><html lang=<span class="string">"en"</span>></span><br><span class="line"><head></span><br><span class="line">    <meta charset=<span class="string">"UTF-8"</span>></span><br><span class="line">    <title><span class="class"><span class="keyword">class</span>样式绑定</<span class="title">title</span>></span></span><br><span class="line"><span class="class">    <<span class="title">script</span> <span class="title">src</span></span>=<span class="string">"../vue/vue.js"</span>><<span class="regexp">/script></span></span><br><span class="line"><span class="regexp">    <style></span></span><br><span class="line"><span class="regexp">        .tap{</span></span><br><span class="line"><span class="regexp">            font-size: 25px;</span></span><br><span class="line"><span class="regexp">        }</span></span><br><span class="line"><span class="regexp">        .active{</span></span><br><span class="line"><span class="regexp">            color: red;</span></span><br><span class="line"><span class="regexp">        }</span></span><br><span class="line"><span class="regexp">        .unactive{</span></span><br><span class="line"><span class="regexp">            color: blue;</span></span><br><span class="line"><span class="regexp">        }</span></span><br><span class="line"><span class="regexp">        .classA{</span></span><br><span class="line"><span class="regexp">            font-weight: bold;</span></span><br><span class="line"><span class="regexp">        }</span></span><br><span class="line"><span class="regexp">        .classB{</span></span><br><span class="line"><span class="regexp">            color: blue;</span></span><br><span class="line"><span class="regexp">        }</span></span><br><span class="line"><span class="regexp">    </</span>style></span><br><span class="line"><<span class="regexp">/head></span></span><br><span class="line"><span class="regexp"><body></span></span><br><span class="line"><span class="regexp"><div id="web"></span></span><br><span class="line"><span class="regexp">    <div class="tap" v-bind:class="[classA,classB]"></span></span><br><span class="line"><span class="regexp">        <p>测试内容</</span>p></span><br><span class="line">    <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp">    <div class="tap" v-bind:class="[active ? classA : classB]"></span></span><br><span class="line"><span class="regexp">        <p>测试内容</</span>p></span><br><span class="line">    <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp"></</span>div></span><br><span class="line"><script></span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue({</span><br><span class="line">        el: <span class="string">"#web"</span>,</span><br><span class="line">        data: {</span><br><span class="line">            active: <span class="literal">true</span>,</span><br><span class="line">            classA: <span class="string">'classA'</span>,</span><br><span class="line">            classB: <span class="string">'classB'</span></span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line"><<span class="regexp">/script></span></span><br><span class="line"><span class="regexp"></</span>body></span><br><span class="line"><<span class="regexp">/html></span></span><br></pre></td></tr></tbody></table></figure></div><h3 id="4-2-2-style的绑定"><a href="#4-2-2-style的绑定" class="headerlink" title="4.2.2 style的绑定"></a>4.2.2 style的绑定</h3><p>对象方式的绑定：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line">    <div id=<span class="string">"web"</span>></span><br><span class="line">        <!--</span><br><span class="line">            对象中的color键、fontSize键都是对应css样式中的样式键，只是做了驼峰式名称的转换，</span><br><span class="line">            例如，font-size是css中字体大小关键字，在js对象中对应的就是fontSize</span><br><span class="line">         --></span><br><span class="line">        <div v-bind:style=<span class="string">"{color: color, fontSize: number + 'px'}"</span>></span><br><span class="line">            <p>测试内容<<span class="regexp">/p></span></span><br><span class="line"><span class="regexp">        </</span>div></span><br><span class="line">        <div v-bind:style=<span class="string">"styleObject"</span>></span><br><span class="line">            <p>测试内容<<span class="regexp">/p></span></span><br><span class="line"><span class="regexp">        </</span>div></span><br><span class="line">    <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp">    <script></span></span><br><span class="line"><span class="regexp">        var vm = new Vue({</span></span><br><span class="line"><span class="regexp">            el: "#web",</span></span><br><span class="line"><span class="regexp">            data: {</span></span><br><span class="line"><span class="regexp">                color: "red",</span></span><br><span class="line"><span class="regexp">                number: 20,</span></span><br><span class="line"><span class="regexp">                styleObject:{</span></span><br><span class="line"><span class="regexp">                    color: "blue",</span></span><br><span class="line"><span class="regexp">                    fontSize: "20px"</span></span><br><span class="line"><span class="regexp">                }</span></span><br><span class="line"><span class="regexp">            }</span></span><br><span class="line"><span class="regexp">        });</span></span><br><span class="line"><span class="regexp">    </</span>script></span><br><span class="line"><<span class="regexp">/body></span></span><br></pre></td></tr></tbody></table></figure></div><p>数组方式的绑定：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line">    <div id=<span class="string">"web"</span>></span><br><span class="line">        <div v-bind:style=<span class="string">"[styleObject,styleObject1]"</span>></span><br><span class="line">            <p>测试内容<<span class="regexp">/p></span></span><br><span class="line"><span class="regexp">        </</span>div></span><br><span class="line">    <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp">    <script></span></span><br><span class="line"><span class="regexp">        var vm = new Vue({</span></span><br><span class="line"><span class="regexp">            el: "#web",</span></span><br><span class="line"><span class="regexp">            data: {</span></span><br><span class="line"><span class="regexp">                color: "red",</span></span><br><span class="line"><span class="regexp">                number: 20,</span></span><br><span class="line"><span class="regexp">                styleObject: {</span></span><br><span class="line"><span class="regexp">                    color: "blue",</span></span><br><span class="line"><span class="regexp">                    fontSize: "20px"</span></span><br><span class="line"><span class="regexp">                },</span></span><br><span class="line"><span class="regexp">                styleObject1: {</span></span><br><span class="line"><span class="regexp">                    fontWeight: "bold"</span></span><br><span class="line"><span class="regexp">                }</span></span><br><span class="line"><span class="regexp">            }</span></span><br><span class="line"><span class="regexp">        });</span></span><br><span class="line"><span class="regexp">    </</span>script></span><br><span class="line"><<span class="regexp">/body></span></span><br></pre></td></tr></tbody></table></figure></div><h2 id="4-3-条件渲染"><a href="#4-3-条件渲染" class="headerlink" title="4.3 条件渲染"></a>4.3 条件渲染</h2><h3 id="4-3-1-v-if、v-else"><a href="#4-3-1-v-if、v-else" class="headerlink" title="4.3.1 v-if、v-else"></a>4.3.1 v-if、v-else</h3><p>我们可以通过v-if、v-else指令来互斥的控制页面模块的展示。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line">    <div id=<span class="string">"web"</span>></span><br><span class="line">        <div v-<span class="keyword">if</span>=<span class="string">"active"</span>></span><br><span class="line">            <p><span class="keyword">if</span>内容<<span class="regexp">/p></span></span><br><span class="line"><span class="regexp">        </</span>div></span><br><span class="line">        <div v-<span class="keyword">else</span>></span><br><span class="line">            <p><span class="keyword">else</span>内容<<span class="regexp">/p></span></span><br><span class="line"><span class="regexp">        </</span>div></span><br><span class="line">    <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp">    <script></span></span><br><span class="line"><span class="regexp">        var vm = new Vue({</span></span><br><span class="line"><span class="regexp">            el: "#web",</span></span><br><span class="line"><span class="regexp">            data: {</span></span><br><span class="line"><span class="regexp">                active: true</span></span><br><span class="line"><span class="regexp">            }</span></span><br><span class="line"><span class="regexp">        });</span></span><br><span class="line"><span class="regexp">    </</span>script></span><br><span class="line"><<span class="regexp">/body></span></span><br></pre></td></tr></tbody></table></figure></div><p>v-if与v-else指令必须连续使用，不能在两个指令之间插入其他元素模块，否则会出现异常抛出。v-if与v-else指令的特性会出现异常。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line">    <div id=<span class="string">"web"</span>></span><br><span class="line">        <div v-<span class="keyword">if</span>=<span class="string">"active"</span>></span><br><span class="line">            <p><span class="keyword">if</span>内容<<span class="regexp">/p></span></span><br><span class="line"><span class="regexp">        </</span>div></span><br><span class="line">        <div></span><br><span class="line">            <p>其他内容<<span class="regexp">/p></span></span><br><span class="line"><span class="regexp">        </</span>div></span><br><span class="line">        <div v-<span class="keyword">else</span>></span><br><span class="line">            <p><span class="keyword">else</span>内容<<span class="regexp">/p></span></span><br><span class="line"><span class="regexp">        </</span>div></span><br><span class="line">    <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp">    <script></span></span><br><span class="line"><span class="regexp">        var vm = new Vue({</span></span><br><span class="line"><span class="regexp">            el: "#web",</span></span><br><span class="line"><span class="regexp">            data: {</span></span><br><span class="line"><span class="regexp">                active: true</span></span><br><span class="line"><span class="regexp">            }</span></span><br><span class="line"><span class="regexp">        });</span></span><br><span class="line"><span class="regexp">    </</span>script></span><br><span class="line"><<span class="regexp">/body></span></span><br></pre></td></tr></tbody></table></figure></div><p>v-if、v-else的嵌套使用：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line">    <div id=<span class="string">"web"</span>></span><br><span class="line">        <div v-<span class="keyword">if</span>=<span class="string">"active"</span>></span><br><span class="line">            <p><span class="keyword">if</span>内容<<span class="regexp">/p></span></span><br><span class="line"><span class="regexp">        </</span>div></span><br><span class="line">        <div v-<span class="keyword">else</span>></span><br><span class="line">            <div></span><br><span class="line">                <p v-<span class="keyword">if</span>=<span class="string">"active"</span>><span class="keyword">else</span>-<span class="keyword">if</span>内容<<span class="regexp">/p></span></span><br><span class="line"><span class="regexp">                <p v-else>else-else内容</</span>p></span><br><span class="line">            <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp">            <p>else内容</</span>p></span><br><span class="line">        <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp">    </</span>div></span><br><span class="line">    <script></span><br><span class="line">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue({</span><br><span class="line">            el: <span class="string">"#web"</span>,</span><br><span class="line">            data: {</span><br><span class="line">                active: <span class="literal">true</span></span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">    <<span class="regexp">/script></span></span><br><span class="line"><span class="regexp"></</span>body></span><br></pre></td></tr></tbody></table></figure></div><h3 id="4-3-2-lt-template-amp-gt-标签的使用"><a href="#4-3-2-lt-template-amp-gt-标签的使用" class="headerlink" title="4.3.2 <template&gt;标签的使用"></a>4.3.2 <template&gt;标签的使用</h3><p>因为v-if是一个指令，所以该指令必须要挂载在一个元素上。但如果我们想要同时切换多个同级的元素，又不想使用<div>元素包含时，我们可以使用<template&gt;标签来包含，该标签在编译解析时，并不会出现页面中。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line">    <div id=<span class="string">"web"</span>></span><br><span class="line">        <template v-<span class="keyword">if</span>=<span class="string">"active"</span>></span><br><span class="line">            <p><span class="keyword">if</span>内容<span class="number">1</span><<span class="regexp">/p></span></span><br><span class="line"><span class="regexp">            <p>if内容2</</span>p></span><br><span class="line">            <p><span class="keyword">if</span>内容<span class="number">3</span><<span class="regexp">/p></span></span><br><span class="line"><span class="regexp">        </</span>template></span><br><span class="line">        <template v-<span class="keyword">else</span>></span><br><span class="line">            <p><span class="keyword">else</span>内容<span class="number">1</span><<span class="regexp">/p></span></span><br><span class="line"><span class="regexp">            <p>else内容2</</span>p></span><br><span class="line">            <p><span class="keyword">else</span>内容<span class="number">3</span><<span class="regexp">/p></span></span><br><span class="line"><span class="regexp">        </</span>template></span><br><span class="line">    <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp">    <script></span></span><br><span class="line"><span class="regexp">        var vm = new Vue({</span></span><br><span class="line"><span class="regexp">            el: "#web",</span></span><br><span class="line"><span class="regexp">            data:{</span></span><br><span class="line"><span class="regexp">                active: true</span></span><br><span class="line"><span class="regexp">            }</span></span><br><span class="line"><span class="regexp">        });</span></span><br><span class="line"><span class="regexp">    </</span>script></span><br><span class="line"><<span class="regexp">/body></span></span><br></pre></td></tr></tbody></table></figure></div><h3 id="4-3-3-v-else-if"><a href="#4-3-3-v-else-if" class="headerlink" title="4.3.3 v-else-if"></a>4.3.3 v-else-if</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line">    <div id=<span class="string">"web"</span>></span><br><span class="line">        <div v-<span class="keyword">if</span>=<span class="string">"active === 'A'"</span>></span><br><span class="line">            <p><span class="keyword">if</span>内容<<span class="regexp">/p></span></span><br><span class="line"><span class="regexp">        </</span>div></span><br><span class="line">        <div v-<span class="keyword">else</span>-<span class="keyword">if</span>=<span class="string">"active === 'B'"</span>></span><br><span class="line">            <p><span class="keyword">else</span> <span class="keyword">if</span>内容<span class="number">1</span><<span class="regexp">/p></span></span><br><span class="line"><span class="regexp">        </</span>div></span><br><span class="line">        <div v-<span class="keyword">else</span>-<span class="keyword">if</span>=<span class="string">"active === 'C'"</span>></span><br><span class="line">            <p><span class="keyword">else</span> <span class="keyword">if</span>内容<span class="number">2</span><<span class="regexp">/p></span></span><br><span class="line"><span class="regexp">        </</span>div></span><br><span class="line">        <div v-<span class="keyword">else</span>-<span class="keyword">if</span>=<span class="string">"active === 'D'"</span>></span><br><span class="line">            <p><span class="keyword">else</span> <span class="keyword">if</span>内容<span class="number">3</span><<span class="regexp">/p></span></span><br><span class="line"><span class="regexp">        </</span>div></span><br><span class="line">        <div v-<span class="keyword">else</span>></span><br><span class="line">            <p><span class="keyword">else</span>内容<<span class="regexp">/p></span></span><br><span class="line"><span class="regexp">        </</span>div></span><br><span class="line">    <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp">    <script></span></span><br><span class="line"><span class="regexp">        var vm = new Vue({</span></span><br><span class="line"><span class="regexp">            el: "#web",</span></span><br><span class="line"><span class="regexp">            data: {</span></span><br><span class="line"><span class="regexp">                active: "C"</span></span><br><span class="line"><span class="regexp">            }</span></span><br><span class="line"><span class="regexp">        });</span></span><br><span class="line"><span class="regexp">    </</span>script></span><br><span class="line"><<span class="regexp">/body></span></span><br></pre></td></tr></tbody></table></figure></div><h3 id="4-3-4-用-key-管理可复用的元素"><a href="#4-3-4-用-key-管理可复用的元素" class="headerlink" title="4.3.4 用 key 管理可复用的元素"></a>4.3.4 用 key 管理可复用的元素</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line">    <div id=<span class="string">"web"</span>></span><br><span class="line">        <template v-<span class="keyword">if</span>=<span class="string">"loginType === 'username'"</span>></span><br><span class="line">            <div></span><br><span class="line">                <label>Username<<span class="regexp">/label></span></span><br><span class="line"><span class="regexp">                <input placeholder="Enter your username"></span></span><br><span class="line"><span class="regexp">            </</span>div></span><br><span class="line">        <<span class="regexp">/template></span></span><br><span class="line"><span class="regexp">        <template v-else></span></span><br><span class="line"><span class="regexp">            <div></span></span><br><span class="line"><span class="regexp">                <label>Email</</span>label></span><br><span class="line">                <input placeholder=<span class="string">"Enter your email address"</span>></span><br><span class="line">            <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp">        </</span>template></span><br><span class="line">    <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp">    <script></span></span><br><span class="line"><span class="regexp">        var vm = new Vue({</span></span><br><span class="line"><span class="regexp">            el: "#web",</span></span><br><span class="line"><span class="regexp">            data: {</span></span><br><span class="line"><span class="regexp">                loginType: "username"</span></span><br><span class="line"><span class="regexp">            }</span></span><br><span class="line"><span class="regexp">        });</span></span><br><span class="line"><span class="regexp">    </</span>script></span><br><span class="line"><<span class="regexp">/body></span></span><br></pre></td></tr></tbody></table></figure></div><p>上述代码的格式基本相同，当我们在上述输入框中输入内容之后，如果loginType发生变化，页面进行切换之后，输入框中的内容将会保留在切换后的输入框中。如果想要删除不保留的内容，需要使用Vue的key属性进行处理。</p><p>将上述代码修改为如下代码：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line">    <div id=<span class="string">"web"</span>></span><br><span class="line">        <template v-<span class="keyword">if</span>=<span class="string">"loginType === 'username'"</span>></span><br><span class="line">            <div key=<span class="string">"username"</span>></span><br><span class="line">                <label>Username<<span class="regexp">/label></span></span><br><span class="line"><span class="regexp">                <input placeholder="Enter your username"></span></span><br><span class="line"><span class="regexp">            </</span>div></span><br><span class="line">        <<span class="regexp">/template></span></span><br><span class="line"><span class="regexp">        <template v-else></span></span><br><span class="line"><span class="regexp">            <div key="email"></span></span><br><span class="line"><span class="regexp">                <label>Email</</span>label></span><br><span class="line">                <input placeholder=<span class="string">"Enter your email address"</span>></span><br><span class="line">            <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp">        </</span>template></span><br><span class="line">    <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp">    <script></span></span><br><span class="line"><span class="regexp">        var vm = new Vue({</span></span><br><span class="line"><span class="regexp">            el: "#web",</span></span><br><span class="line"><span class="regexp">            data: {</span></span><br><span class="line"><span class="regexp">                loginType: "username"</span></span><br><span class="line"><span class="regexp">            }</span></span><br><span class="line"><span class="regexp">        });</span></span><br><span class="line"><span class="regexp">    </</span>script></span><br><span class="line"><<span class="regexp">/body></span></span><br></pre></td></tr></tbody></table></figure></div><h3 id="4-3-5-v-show"><a href="#4-3-5-v-show" class="headerlink" title="4.3.5 v-show"></a>4.3.5 v-show</h3><p>v-show能够实现与v-if类似的功能，只是两者的执行原理不同。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line">    <div id=<span class="string">"web"</span>></span><br><span class="line">        <p v-show=<span class="string">"flag"</span>>show显示内容<<span class="regexp">/p></span></span><br><span class="line"><span class="regexp">    </</span>div></span><br><span class="line">    <script></span><br><span class="line">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue({</span><br><span class="line">            el:<span class="string">"#web"</span>,</span><br><span class="line">            data:{</span><br><span class="line">                flag:<span class="literal">true</span></span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">    <<span class="regexp">/script></span></span><br><span class="line"><span class="regexp"></</span>body></span><br></pre></td></tr></tbody></table></figure></div><p>在上述案例中，控制台修改flag属性值，将会实现页面的切换，但在控制台中，我们可以看到v-show的切换，并不是将页面元素重新加载，而只是简单地将页面元素的css display样式进行操作。</p><h5 id="v-if与v-show的异同"><a href="#v-if与v-show的异同" class="headerlink" title="v-if与v-show的异同"></a>v-if与v-show的异同</h5><p>v-if指令是随着Vue实例的属性值变化，对页面元素进行重写加载；而v-show指令是将页面元素一次性加载，随着Vue实例属性值的变化，操作css display样式的改变。</p><p>一般的，对于切换页面内容较小，且切换频次较小的场景，使用v-if指令相对来说比较适用，因为v-if指令会不断地重新编译加载页面元素；对于切换页面内容较大，且切换频次较大的场景，使用v-show相对来说比较适用，因为v-show指令只会加载页面元素一次，每次切换时，只是在操作css样式。</p><p>当判断条件较为复杂时，只能使用更加灵活的v-if指令。</p><h2 id="4-4-列表渲染"><a href="#4-4-列表渲染" class="headerlink" title="4.4 列表渲染"></a>4.4 列表渲染</h2><p>在系统开发中，我们常常涉及到重复的列表数据处理，例如重复的表格数据处理、商品列表处理等内容。对于这种重复的列表数据处理，Vue提供了v-for指令进行处理。</p><h3 id="4-4-1-v-for的基础用法"><a href="#4-4-1-v-for的基础用法" class="headerlink" title="4.4.1 v-for的基础用法"></a>4.4.1 v-for的基础用法</h3><p>v-for 指令需要使用 item in items 形式的特殊语法，items 是源数据数组并且 item 是数组元素迭代的别名。我们也可以用 of 替代 in 作为分隔符，因为它是最接近 JavaScript 迭代器的语法。</p><p>案例1：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line">    <div id=<span class="string">"web"</span>></span><br><span class="line">        <ul></span><br><span class="line">            <li v-<span class="keyword">for</span>=<span class="string">"item in items"</span>>{{item.message}}----{{item.sex}}<<span class="regexp">/li></span></span><br><span class="line"><span class="regexp"><!--<li v-for="item of items">{{item.message}}&#45;&#45;&#45;&#45;{{item.sex}}</</span>li>--></span><br><span class="line">        <<span class="regexp">/ul></span></span><br><span class="line"><span class="regexp">    </</span>div></span><br><span class="line">    <script></span><br><span class="line">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue({</span><br><span class="line">            el: <span class="string">"#web"</span>,</span><br><span class="line">            data: {</span><br><span class="line">                items:[</span><br><span class="line">                    {<span class="attr">message</span>: <span class="string">"张三"</span>,<span class="attr">sex</span>: <span class="string">"男"</span>},</span><br><span class="line">                    {<span class="attr">message</span>: <span class="string">"李四"</span>,<span class="attr">sex</span>: <span class="string">"男"</span>},</span><br><span class="line">                    {<span class="attr">message</span>: <span class="string">"王五"</span>,<span class="attr">sex</span>: <span class="string">"女"</span>}</span><br><span class="line">                ]</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">    <<span class="regexp">/script></span></span><br><span class="line"><span class="regexp"></</span>body></span><br></pre></td></tr></tbody></table></figure></div><p>v-for 还支持一个可选的第二个参数为当前项的索引。</p><p>案例2：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line">    <div id=<span class="string">"web"</span>></span><br><span class="line">        <li v-<span class="keyword">for</span>=<span class="string">"(item,index) in items"</span>>{{index+<span class="number">1</span>}}----{{item.message}}----{{item.sex}}<<span class="regexp">/li></span></span><br><span class="line"><span class="regexp">    </</span>div></span><br><span class="line">    <script></span><br><span class="line">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue({</span><br><span class="line">            el: <span class="string">"#web"</span>,</span><br><span class="line">            data: {</span><br><span class="line">                items:[</span><br><span class="line">                    {<span class="attr">message</span>: <span class="string">"张三"</span>,<span class="attr">sex</span>: <span class="string">"男"</span>},</span><br><span class="line">                    {<span class="attr">message</span>: <span class="string">"李四"</span>,<span class="attr">sex</span>: <span class="string">"男"</span>},</span><br><span class="line">                    {<span class="attr">message</span>: <span class="string">"王五"</span>,<span class="attr">sex</span>: <span class="string">"女"</span>}</span><br><span class="line">                ]</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">    <<span class="regexp">/script></span></span><br><span class="line"><span class="regexp"></</span>body></span><br></pre></td></tr></tbody></table></figure></div><h3 id="4-4-2-对象的v-for迭代"><a href="#4-4-2-对象的v-for迭代" class="headerlink" title="4.4.2 对象的v-for迭代"></a>4.4.2 对象的v-for迭代</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line">    <div id=<span class="string">"web"</span>></span><br><span class="line">        <ul></span><br><span class="line">            <!--</span><br><span class="line">                使用v-<span class="keyword">for</span>遍历对象时，存在三个可选的参数，第一个参数为value，代表对象的值；</span><br><span class="line">                第二个参数为key，代表对象的键；</span><br><span class="line">                第三个参数为index，代表对象键值对的索引。</span><br><span class="line">                这三个参数是可选的。</span><br><span class="line">            --></span><br><span class="line">            <li v-<span class="keyword">for</span>=<span class="string">"(value,key,index) in person"</span>></span><br><span class="line">                {{index}}----{{key}}----{{value}}</span><br><span class="line">            <<span class="regexp">/li></span></span><br><span class="line"><span class="regexp">        </u</span>l></span><br><span class="line">    <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp">    <script></span></span><br><span class="line"><span class="regexp">        var vm = new Vue({</span></span><br><span class="line"><span class="regexp">            el: "#web",</span></span><br><span class="line"><span class="regexp">            data: {</span></span><br><span class="line"><span class="regexp">                person: {</span></span><br><span class="line"><span class="regexp">                    id: 1,</span></span><br><span class="line"><span class="regexp">                    name: "张三",</span></span><br><span class="line"><span class="regexp">                    sex: "男",</span></span><br><span class="line"><span class="regexp">                    age: 18</span></span><br><span class="line"><span class="regexp">                }</span></span><br><span class="line"><span class="regexp">            }</span></span><br><span class="line"><span class="regexp">        });</span></span><br><span class="line"><span class="regexp">    </</span>script></span><br><span class="line"><<span class="regexp">/body></span></span><br></pre></td></tr></tbody></table></figure></div><h3 id="4-4-3-列表中的数据同步更新"><a href="#4-4-3-列表中的数据同步更新" class="headerlink" title="4.4.3 列表中的数据同步更新"></a>4.4.3 列表中的数据同步更新</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line">    <div id=<span class="string">"web"</span>></span><br><span class="line">        <ul></span><br><span class="line">            <li v-<span class="keyword">for</span>=<span class="string">"(item,index) in items"</span> v-bind:key=<span class="string">"item.id"</span>>{{index+<span class="number">1</span>}}----{{item.id}}----{{item.message}}----{{item.sex}}<<span class="regexp">/li></span></span><br><span class="line"><span class="regexp">        </u</span>l></span><br><span class="line">        <button v-on:click=<span class="string">"addTop"</span>>在数组头部添加数据<<span class="regexp">/button></span></span><br><span class="line"><span class="regexp">        <button v-on:click="addBotton">在数组尾部添加数据</</span>button></span><br><span class="line">    <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp">    <script></span></span><br><span class="line"><span class="regexp">        var vm = new Vue({</span></span><br><span class="line"><span class="regexp">            el: "#web",</span></span><br><span class="line"><span class="regexp">            data: {</span></span><br><span class="line"><span class="regexp">                index: 3,</span></span><br><span class="line"><span class="regexp">                items:[</span></span><br><span class="line"><span class="regexp">                    {id: 1,message: "张三",sex: "男"},</span></span><br><span class="line"><span class="regexp">                    {id: 2,message: "李四",sex: "男"},</span></span><br><span class="line"><span class="regexp">                    {id: 3,message: "王五",sex: "女"}</span></span><br><span class="line"><span class="regexp">                ]</span></span><br><span class="line"><span class="regexp">            },</span></span><br><span class="line"><span class="regexp">            methods:{</span></span><br><span class="line"><span class="regexp">                addTop: function () {</span></span><br><span class="line"><span class="regexp">                    var itemIndex = ++this.index;</span></span><br><span class="line"><span class="regexp">                    var addItem = {</span></span><br><span class="line"><span class="regexp">                        id: itemIndex,</span></span><br><span class="line"><span class="regexp">                        message: "张三" + itemIndex,</span></span><br><span class="line"><span class="regexp">                        sex: "男"</span></span><br><span class="line"><span class="regexp">                    };</span></span><br><span class="line"><span class="regexp">                    this.items.unshift(addItem);</span></span><br><span class="line"><span class="regexp">                },</span></span><br><span class="line"><span class="regexp">                addBotton: function () {</span></span><br><span class="line"><span class="regexp">                    var itemIndex = ++this.index;</span></span><br><span class="line"><span class="regexp">                    var addItem = {</span></span><br><span class="line"><span class="regexp">                        id: itemIndex,</span></span><br><span class="line"><span class="regexp">                        message: "张三" + itemIndex,</span></span><br><span class="line"><span class="regexp">                        sex: "男"</span></span><br><span class="line"><span class="regexp">                    };</span></span><br><span class="line"><span class="regexp">                    this.items.push(addItem);</span></span><br><span class="line"><span class="regexp">                }</span></span><br><span class="line"><span class="regexp">            }</span></span><br><span class="line"><span class="regexp">        });</span></span><br><span class="line"><span class="regexp">    </</span>script></span><br><span class="line"><<span class="regexp">/body></span></span><br></pre></td></tr></tbody></table></figure></div><p>除了上述的修改数据元素方式，我们也可以直接对某个数组元素进行修改：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.items[<span class="number">0</span>].id = <span class="number">111</span></span><br></pre></td></tr></tbody></table></figure></div><p>当对Vue实例中的列表数组进行数据修改时，我们可以为列表的循环项提供一个key属性值，以提升Vue实例的渲染效率。但要求该key属性中的值必须为唯一的值，否则会出现Vue的异常。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bind:key=<span class="string">"item.id"</span></span><br></pre></td></tr></tbody></table></figure></div><h3 id="4-4-4-一段取值范围的v-for"><a href="#4-4-4-一段取值范围的v-for" class="headerlink" title="4.4.4 一段取值范围的v-for"></a>4.4.4 一段取值范围的v-for</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line">    <div id=<span class="string">"web"</span>></span><br><span class="line">        <ul></span><br><span class="line">            <li v-<span class="keyword">for</span>=<span class="string">"n in 10"</span>>{{n}}<<span class="regexp">/li></span></span><br><span class="line"><span class="regexp">        </u</span>l></span><br><span class="line">    <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp">    <script></span></span><br><span class="line"><span class="regexp">        var vm = new Vue({</span></span><br><span class="line"><span class="regexp">            el: "#web"</span></span><br><span class="line"><span class="regexp">        });</span></span><br><span class="line"><span class="regexp">    </</span>script></span><br><span class="line"><<span class="regexp">/body></span></span><br></pre></td></tr></tbody></table></figure></div><h3 id="4-4-5-v-for渲染多个元素"><a href="#4-4-5-v-for渲染多个元素" class="headerlink" title="4.4.5 v-for渲染多个元素"></a>4.4.5 v-for渲染多个元素</h3><p>类似于 v-if，你也可以利用带有 v-for 的 <template> 渲染多个元素。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line">    <div id=<span class="string">"web"</span>></span><br><span class="line">        <ul></span><br><span class="line">            <template v-<span class="keyword">for</span>=<span class="string">"item in items"</span>></span><br><span class="line">                <li>{{item.message}}<<span class="regexp">/li></span></span><br><span class="line"><span class="regexp">                <li>{{item.sex}}</</span>li></span><br><span class="line">            <<span class="regexp">/template></span></span><br><span class="line"><span class="regexp">        </u</span>l></span><br><span class="line">    <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp">    <script></span></span><br><span class="line"><span class="regexp">        var vm = new Vue({</span></span><br><span class="line"><span class="regexp">            el: "#web",</span></span><br><span class="line"><span class="regexp">            data: {</span></span><br><span class="line"><span class="regexp">                items:[</span></span><br><span class="line"><span class="regexp">                    {message: "张三",sex: "男"},</span></span><br><span class="line"><span class="regexp">                    {message: "李四",sex: "男"},</span></span><br><span class="line"><span class="regexp">                    {message: "王五",sex: "女"}</span></span><br><span class="line"><span class="regexp">                ]</span></span><br><span class="line"><span class="regexp">            }</span></span><br><span class="line"><span class="regexp">        });</span></span><br><span class="line"><span class="regexp">    </</span>script></span><br><span class="line"><<span class="regexp">/body></span></span><br></pre></td></tr></tbody></table></figure></div><h3 id="4-4-6-v-for的综合使用"><a href="#4-4-6-v-for的综合使用" class="headerlink" title="4.4.6 v-for的综合使用"></a>4.4.6 v-for的综合使用</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line">    <div id=<span class="string">"web"</span>></span><br><span class="line">        <ul></span><br><span class="line">            <li v-<span class="keyword">for</span>=<span class="string">"(item,index) in items"</span> v-<span class="keyword">if</span>=<span class="string">"index<3"</span> v-on:click=<span class="string">"clickFunc(item.id)"</span>></span><br><span class="line">                {{index}}----{{item.id}}----{{item.message}}----{{item.sex}}</span><br><span class="line">            <<span class="regexp">/li></span></span><br><span class="line"><span class="regexp">        </u</span>l></span><br><span class="line">    <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp">    <script></span></span><br><span class="line"><span class="regexp">        var vm = new Vue({</span></span><br><span class="line"><span class="regexp">            el: "#web",</span></span><br><span class="line"><span class="regexp">            data: {</span></span><br><span class="line"><span class="regexp">                items:[</span></span><br><span class="line"><span class="regexp">                    {id: 1,message: "张三",sex: "男"},</span></span><br><span class="line"><span class="regexp">                    {id: 2,message: "李四",sex: "男"},</span></span><br><span class="line"><span class="regexp">                    {id: 3,message: "王五",sex: "女"},</span></span><br><span class="line"><span class="regexp">                    {id: 4,message: "王五",sex: "女"},</span></span><br><span class="line"><span class="regexp">                    {id: 5,message: "王五",sex: "女"}</span></span><br><span class="line"><span class="regexp">                ]</span></span><br><span class="line"><span class="regexp">            },</span></span><br><span class="line"><span class="regexp">            methods:{</span></span><br><span class="line"><span class="regexp">                clickFunc: function (id) {</span></span><br><span class="line"><span class="regexp">                    alert(id);</span></span><br><span class="line"><span class="regexp">                }</span></span><br><span class="line"><span class="regexp">            }</span></span><br><span class="line"><span class="regexp">        });</span></span><br><span class="line"><span class="regexp">    </</span>script></span><br><span class="line"><<span class="regexp">/body></span></span><br></pre></td></tr></tbody></table></figure></div><ul><li>如果我们想要循环2到10这样一个范围内的值，这个时候，v-for就必须配合v-if指令一起使用。当v-for与v-if指令处于同级情况下，当它们处于同一节点，v-for 的优先级比 v-if 更高，这意味着 v-if 将分别重复运行于每个 v-for 循环中。Vue的这种机制在实际的业务场景下十分有用。</li><li>当v-for指令与v-on事件绑定指令处于同级情况下，两者会共享数据域，利用这一特性，我们可以将一条记录的索引当做实参传递给事件函数的形参。这一特性在处理列表数据循环时，也十分有用。</li></ul></body></html></script></span></span></span></p></span></form></span></div></span></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习之——Vue组件</title>
      <link href="/2020/02/22/study-file/6.0%20Vue%E7%BB%84%E4%BB%B6/"/>
      <url>/2020/02/22/study-file/6.0%20Vue%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h1 id="六、Vue组件"><a href="#六、Vue组件" class="headerlink" title="六、Vue组件"></a>六、Vue组件</h1><p>Vue组件是Vue.js框架最为核心的应用之一，可以说Vue框架构建单页面应用就是依赖于Vue组件系统的。Vue为前端代码复用与解耦提供了一种便捷的操作方式，支撑起了整个Vue单页面开发的结构。</p><h2 id="6-1-组件注册"><a href="#6-1-组件注册" class="headerlink" title="6.1 组件注册"></a>6.1 组件注册</h2><h5 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <div id="<span" class="string">"web01"><br><span class="line">        <my-component><<span class="regexp">/my-component></span></my-component></span><br><span class="line"><span class="regexp">        <my-component>-component></my-component></span><br><span class="line">        <my-component><<span class="regexp">/my-component></span></my-component></span><br><span class="line"><span class="regexp">    <!--</span-->div></span><br><span class="line">    <div id="<span" class="string">"web02"><br><span class="line">        <my-component><<span class="regexp">/my-component></span></my-component></span><br><span class="line"><span class="regexp">        <my-component>-component></my-component></span><br><span class="line">        <my-component><<span class="regexp">/my-component></span></my-component></span><br><span class="line"><span class="regexp">    <!--</span-->div></span><br><span class="line">    <script></span><br><span class="line">        <span class="comment">/* 全局注册 */</span></span><br><span class="line">        Vue.component(<span class="string">"my-component"</span>,{</span><br><span class="line">            template: <span class="string">"<h3>a Vue component</h3>"</span></span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> vm01 = <span class="keyword">new</span> Vue({</span><br><span class="line">            el: <span class="string">"#web01"</span></span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> vm02 = <span class="keyword">new</span> Vue({</span><br><span class="line">            el: <span class="string">"#web02"</span></span><br><span class="line">        });</span><br><span class="line">    <<span class="regexp">/script></span></span><br><span class="line"><span class="regexp"></</span>body></span><br></pre></td></tr></tbody></table></figure></div><p>对于Vue组件全局注册，通过Vue全局实例的component函数来定义组件，component函数接收两个参数，第一个参数指定组件的名称，例如my-component，在页面元素中直接通过标签的方式引用；第二个参数为组件内容的JSON实例，这里使用了组件实例的template属性，该属性用于定义组件复用HTML代码内容，以字符串的格式出现。关于组件实例的属性内容，我们后续专门介绍。</p><p>对于全局注册的方式，在组件注册完成之后，其他的Vue实例都可以使用该组件。</p><h5 id="局部注册"><a href="#局部注册" class="headerlink" title="局部注册"></a>局部注册</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line">    <div id=<span class="string">"web01"</span>></span><br><span class="line">        <mycomponent01><<span class="regexp">/mycomponent01></span></span><br><span class="line"><span class="regexp">        <my-component02></my</span>-component02></span><br><span class="line">    <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp">    <script></span></span><br><span class="line"><span class="regexp">        var vm01 = new Vue({</span></span><br><span class="line"><span class="regexp">            el: "#web01",</span></span><br><span class="line"><span class="regexp">            /</span>*局部注册*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">            components: {</span></span><br><span class="line"><span class="regexp">                mycomponent01: {</span></span><br><span class="line"><span class="regexp">                    template: "<h3>a Vue component01</</span>h3><span class="string">"</span></span><br><span class="line"><span class="string">                },</span></span><br><span class="line"><span class="string">                "</span>my-component02<span class="string">": {</span></span><br><span class="line"><span class="string">                    template: "</span><h3>a Vue component02<<span class="regexp">/h3>"</span></span><br><span class="line"><span class="regexp">                }</span></span><br><span class="line"><span class="regexp">            }</span></span><br><span class="line"><span class="regexp">        })</span></span><br><span class="line"><span class="regexp">    </</span>script></span><br><span class="line"><<span class="regexp">/body></span></span><br></pre></td></tr></tbody></table></figure></div><p>对于Vue组件局部注册，通过一个Vue实例的components属性来定义，components属性为JSON对象，通过key来指定组件的名称；通过value来指定组件定义内容，接收一个组件实例对象。</p><p>既然components属性中的value为一个JSON对象的组件实例，我们完全可以使用另一种方式注册组件。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line">    <div id=<span class="string">"web"</span>></span><br><span class="line">        <my-component01><<span class="regexp">/my-component01></span></span><br><span class="line"><span class="regexp">        <my-component02></my</span>-component02></span><br><span class="line">    <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp">    <script></span></span><br><span class="line"><span class="regexp">        /</span>*<span class="keyword">var</span> myComponent = {</span><br><span class="line">            template: <span class="string">"<h3>a Vue component</h3>"</span></span><br><span class="line">        };*<span class="regexp">/</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">var myComponent = Vue.extend({</span></span><br><span class="line"><span class="regexp">            template: "<h3>a Vue component</</span>h3><span class="string">"</span></span><br><span class="line"><span class="string">        });</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        /*全局注册*/</span></span><br><span class="line"><span class="string">        Vue.component("</span>my-component01<span class="string">",myComponent);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        /*局部注册*/</span></span><br><span class="line"><span class="string">        var vm = new Vue({</span></span><br><span class="line">            el: "#web",</span><br><span class="line">            components: {</span><br><span class="line">                <span class="string">"my-component02"</span>: myComponent</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">    <<span class="regexp">/script></span></span><br><span class="line"><span class="regexp"></</span>body></span><br></pre></td></tr></tbody></table></figure></div><p>Vue.extend函数是Vue提供的一种更加严谨的组件对象创建方式。</p><h5 id="组件命名"><a href="#组件命名" class="headerlink" title="组件命名"></a>组件命名</h5><p>在注册一个组件的时候，我们始终需要给定它一个名字，而由于HMTL元素解析不区分大小写，所有HTML标签都会解析为小写，也即在HTML页面中，我们无法看到如下的标签：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><myComponent02><<span class="regexp">/myComponent02></span></span><br></pre></td></tr></tbody></table></figure></div><p>基于以上的原则，Vue提供了两种组件的命名方式：</p><ol><li>kebab-case：以“-”连接不同的单词命名组件，在使用组件时，也以“-”的方式出现。<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line"><div id=<span class="string">"web"</span>></span><br><span class="line"><my-component01><<span class="regexp">/my-component01></span></span><br><span class="line"><span class="regexp"></</span>div></span><br><span class="line"><script></span><br><span class="line">Vue.component(<span class="string">"my-component01"</span>,{</span><br><span class="line">template: <span class="string">"<h3>a Vue component01</h3>"</span></span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue({</span><br><span class="line">el: <span class="string">"#web"</span></span><br><span class="line">})</span><br><span class="line"><<span class="regexp">/script></span></span><br><span class="line"><span class="regexp"></</span>body></span><br></pre></td></tr></tbody></table></figure></div></li><li>PascalCase：以驼峰式命名组件名，在使用组件时，使用“-”连接单词使用。<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line">    <div id=<span class="string">"web"</span>></span><br><span class="line">        <my-component02><<span class="regexp">/my-component02></span></span><br><span class="line"><span class="regexp">        <!--这种方式会出现异常--></span></span><br><span class="line"><span class="regexp">        <!--<myComponent02></my</span>Component02>--></span><br><span class="line">    <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp">    <script></span></span><br><span class="line"><span class="regexp">        Vue.component("myComponent02",{</span></span><br><span class="line"><span class="regexp">            template: "<h3>a Vue component02</</span>h3><span class="string">"</span></span><br><span class="line"><span class="string">        });</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        var vm = new Vue({</span></span><br><span class="line">            el: "#web"</span><br><span class="line">        })</span><br><span class="line">    <<span class="regexp">/script></span></span><br><span class="line"><span class="regexp"></</span>body></span><br></pre></td></tr></tbody></table></figure></div></li></ol><h5 id="组件的template模板"><a href="#组件的template模板" class="headerlink" title="组件的template模板"></a>组件的template模板</h5><p>组件与Vue实例中的template属性是十分相似的，但组件的应用要远远超过template模板，由于组件的出现，我们在项目中几乎不使用Vue实例的template模板。</p><p>与template模板一样，当组件template内容定义过多时，我们是用字符串来定义模板内容将十分的不便，因此，对于组件template属性的定义，我们还可以使用一种更加便捷的方式。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line">    <div id=<span class="string">"web"</span>></span><br><span class="line">        <my-component><<span class="regexp">/my-component></span></span><br><span class="line"><span class="regexp">    </</span>div></span><br><span class="line">    <script></span><br><span class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            Vue.component(<span class="string">"my-component"</span>,{</span><br><span class="line">                template: <span class="string">"#template01"</span></span><br><span class="line">            });</span><br><span class="line">            <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue({</span><br><span class="line">                el: <span class="string">"#web"</span></span><br><span class="line">            })</span><br><span class="line">        };</span><br><span class="line">    <<span class="regexp">/script></span></span><br><span class="line"><span class="regexp">    <template id="template01"></span></span><br><span class="line"><span class="regexp">        <ul></span></span><br><span class="line"><span class="regexp">            <li>111</</span>li></span><br><span class="line">            <li><span class="number">222</span><<span class="regexp">/li></span></span><br><span class="line"><span class="regexp">            <li>333</</span>li></span><br><span class="line">        <<span class="regexp">/ul></span></span><br><span class="line"><span class="regexp">    </</span>template></span><br><span class="line"><<span class="regexp">/body></span></span><br></pre></td></tr></tbody></table></figure></div><p>对于组件模板的使用，我们可以将组件的template属性定义为一个字符串，将模板内容定义为一个<template>模板，通过CSS选择器的方式进行模板的指定。</p><h2 id="6-2-组件实例"><a href="#6-2-组件实例" class="headerlink" title="6.2 组件实例"></a>6.2 组件实例</h2><p>Vue组件实际上是可复用的实例，它与Vue实例的执行原理、操作方式基本相同。因此，Vue实例具有什么样的属性，则组件具有什么样的属性，但还有一些例外。Vue组件具有data、methods、computed、watch及生命周期钩子函数等，但组件实例没有el属性，因为每一个组件实例是挂载在Vue实例下的。</p><h3 id="data属性类型必须是一个函数"><a href="#data属性类型必须是一个函数" class="headerlink" title="data属性类型必须是一个函数"></a>data属性类型必须是一个函数</h3><p>组件实例的data属性必须是一个带有返回值的函数，而不能直接使用JSON数据格式。这样限定的原因很好理解，因为每一个组件实例都需要维护一份该组件实例所单独持有的数据信息。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line">    <div id=<span class="string">"web"</span>></span><br><span class="line">        <my-component><<span class="regexp">/my-component></span></span><br><span class="line"><span class="regexp">        <my-component></my</span>-component></span><br><span class="line">        <my-component><<span class="regexp">/my-component></span></span><br><span class="line"><span class="regexp">    </</span>div></span><br><span class="line">    <template id=<span class="string">"template01"</span>></span><br><span class="line">        <div></span><br><span class="line">            <p>{{num}}<<span class="regexp">/p></span></span><br><span class="line"><span class="regexp">            <button @click="addNum">当前组件自增</</span>button></span><br><span class="line">        <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp">    </</span>template></span><br><span class="line">    <script></span><br><span class="line">        Vue.component(<span class="string">"my-component"</span>,{</span><br><span class="line">            template: <span class="string">"#template01"</span>,</span><br><span class="line">            data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">                <span class="keyword">return</span> {<span class="attr">num</span>: <span class="number">0</span>}</span><br><span class="line">            },</span><br><span class="line">            <span class="comment">/* 该配置会出现错误 */</span></span><br><span class="line">            <span class="comment">/*data: {</span></span><br><span class="line"><span class="comment">                num: 0</span></span><br><span class="line"><span class="comment">            },*/</span></span><br><span class="line">            methods: {</span><br><span class="line">                addNum: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">                    <span class="keyword">this</span>.num++;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue({</span><br><span class="line">            el: <span class="string">"#web"</span></span><br><span class="line">        });</span><br><span class="line">    <<span class="regexp">/script></span></span><br><span class="line"><span class="regexp"></</span>body></span><br></pre></td></tr></tbody></table></figure></div><p>上述案例中，每个组件中num都独立维护，各自自增；试想，如果组件中的data是一个JSON对象，则属性值将会被各个组件所共享，数据将不会各自自增。</p><h2 id="6-3-动态组件"><a href="#6-3-动态组件" class="headerlink" title="6.3 动态组件"></a>6.3 动态组件</h2><p>Vue为组件的使用提供了很多的灵活操作方式，接下来，我们学习每种情况。</p><h3 id="6-3-1-组件的DOM解析"><a href="#6-3-1-组件的DOM解析" class="headerlink" title="6.3.1 组件的DOM解析"></a>6.3.1 组件的DOM解析</h3><h5 id="组件模板内容必须存在一个根节点。"><a href="#组件模板内容必须存在一个根节点。" class="headerlink" title="组件模板内容必须存在一个根节点。"></a>组件模板内容必须存在一个根节点。</h5><p>尝试将上述代码案例中组件模板的div标签去掉，模板解析将会出现异常，因为Vue组件模板要求必须存在一个根节点。</p><h5 id="HTML原生解析父节点的限制"><a href="#HTML原生解析父节点的限制" class="headerlink" title="HTML原生解析父节点的限制"></a>HTML原生解析父节点的限制</h5><p>在HTML原生解析中，诸如ul、ol、table 和 select这些元素，对于哪些元素可以出现在其内部是有严格限制的。而相对的，有些元素，诸如 li、tr 和 option，只能出现在其它某些特定的元素内部。</p><p>也就是说，当li这样的标签出现table标签之下时，将会造成解析错误。当我们在ul、ol、table 和 select这些元素内部使用自定义组件标签时，同样会出现错误。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line">    <div id=<span class="string">"web"</span>></span><br><span class="line">        <table></span><br><span class="line">            <my-component><<span class="regexp">/my-component></span></span><br><span class="line"><span class="regexp">            <my-component></my</span>-component></span><br><span class="line">            <my-component><<span class="regexp">/my-component></span></span><br><span class="line"><span class="regexp">        </</span>table></span><br><span class="line">    <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp">    <template id="template01"></span></span><br><span class="line"><span class="regexp">        <tr></span></span><br><span class="line"><span class="regexp">            <td>111</</span>td><span class="xml"><span class="tag"><<span class="name">td</span>></span>222<span class="tag"></<span class="name">td</span>></span></span><span class="xml"><span class="tag"><<span class="name">td</span>></span>333<span class="tag"></<span class="name">td</span>></span></span></span><br><span class="line">        <<span class="regexp">/tr></span></span><br><span class="line"><span class="regexp">    </</span>template></span><br><span class="line">    <script></span><br><span class="line">        Vue.component(<span class="string">"my-component"</span>,{</span><br><span class="line">            template: <span class="string">"#template01"</span></span><br><span class="line">        });</span><br><span class="line">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue({</span><br><span class="line">            el: <span class="string">"#web"</span></span><br><span class="line">        });</span><br><span class="line">    <<span class="regexp">/script></span></span><br><span class="line"><span class="regexp"></</span>body></span><br></pre></td></tr></tbody></table></figure></div><p>当执行上述代码时，我们表面上看到页面似乎没有问题，但实际页面在解析过程中已经出现了问题，我们在控制台查看HTML DOM解析结构，发现已经出现了问题，tr元素出现在table元素的外部。</p><p>针对这种问题，Vue为我们提供了is属性进行问题的解决，使用is属性来指定将要复用的组件信息。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line">    <div id=<span class="string">"web"</span>></span><br><span class="line">        <table></span><br><span class="line">            <tr is=<span class="string">"my-component"</span>><<span class="regexp">/tr></span></span><br><span class="line"><span class="regexp">            <tr is="my-component"></</span>tr></span><br><span class="line">            <tr is=<span class="string">"my-component"</span>><<span class="regexp">/tr></span></span><br><span class="line"><span class="regexp">        </</span>table></span><br><span class="line">    <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp">    <template id="template01"></span></span><br><span class="line"><span class="regexp">        <tr></span></span><br><span class="line"><span class="regexp">            <td>111</</span>td><span class="xml"><span class="tag"><<span class="name">td</span>></span>222<span class="tag"></<span class="name">td</span>></span></span><span class="xml"><span class="tag"><<span class="name">td</span>></span>333<span class="tag"></<span class="name">td</span>></span></span></span><br><span class="line">        <<span class="regexp">/tr></span></span><br><span class="line"><span class="regexp">    </</span>template></span><br><span class="line">    <script></span><br><span class="line">        Vue.component(<span class="string">"my-component"</span>,{</span><br><span class="line">            template: <span class="string">"#template01"</span></span><br><span class="line">        });</span><br><span class="line">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue({</span><br><span class="line">            el: <span class="string">"#web"</span></span><br><span class="line">        });</span><br><span class="line">    <<span class="regexp">/script></span></span><br><span class="line"><span class="regexp"></</span>body></span><br></pre></td></tr></tbody></table></figure></div><h3 id="6-3-2-组件插槽的内容"><a href="#6-3-2-组件插槽的内容" class="headerlink" title="6.3.2 组件插槽的内容"></a>6.3.2 组件插槽的内容</h3><p>在某些业务场景中，我们需要在组件定义模板中动态插入一些HTML页面，如果按照之前的组件使用方式，我们将无法实现。</p><p>例如：我们需要在组件模板的h3标签下插入变化的HTML页面，这里插入一个ul，通过下述代码是无法实现的。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line">    <div id=<span class="string">"web"</span>></span><br><span class="line">        <my-component></span><br><span class="line">            <ul></span><br><span class="line">                <li><span class="number">111</span><<span class="regexp">/li></span></span><br><span class="line"><span class="regexp">                <li>222</</span>li></span><br><span class="line">                <li><span class="number">333</span><<span class="regexp">/li></span></span><br><span class="line"><span class="regexp">            </u</span>l></span><br><span class="line">        <<span class="regexp">/my-component></span></span><br><span class="line"><span class="regexp">    </</span>div></span><br><span class="line">    <template id=<span class="string">"template01"</span>></span><br><span class="line">        <div></span><br><span class="line">            <h3>slot内容分发<<span class="regexp">/h3></span></span><br><span class="line"><span class="regexp">        </</span>div></span><br><span class="line">    <<span class="regexp">/template></span></span><br><span class="line"><span class="regexp">    <script></span></span><br><span class="line"><span class="regexp">        Vue.component("my-component",{</span></span><br><span class="line"><span class="regexp">            template: "#template01"</span></span><br><span class="line"><span class="regexp">        });</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        var vm = new Vue({</span></span><br><span class="line"><span class="regexp">            el: "#web"</span></span><br><span class="line"><span class="regexp">        });</span></span><br><span class="line"><span class="regexp">    </</span>script></span><br><span class="line"><<span class="regexp">/body></span></span><br></pre></td></tr></tbody></table></figure></div><p>Vue通过组件模板自定义标签slot，来进行预留插槽，在使用组件时，再将具体内容插入到组件模板中。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line">    <div id=<span class="string">"web"</span>></span><br><span class="line">        <my-component></span><br><span class="line">            <!--通过Vue的slot属性来使用预留插槽--></span><br><span class="line">            <ul slot=<span class="string">"s2"</span>></span><br><span class="line">                <li><span class="number">111</span><<span class="regexp">/li></span></span><br><span class="line"><span class="regexp">                <li>222</</span>li></span><br><span class="line">                <li><span class="number">333</span><<span class="regexp">/li></span></span><br><span class="line"><span class="regexp">            </u</span>l></span><br><span class="line">            <div slot=<span class="string">"s1"</span>></span><br><span class="line">                <h3>slot插槽的使用<<span class="regexp">/h3></span></span><br><span class="line"><span class="regexp">            </</span>div></span><br><span class="line">        <<span class="regexp">/my-component></span></span><br><span class="line"><span class="regexp">    </</span>div></span><br><span class="line">    <template id=<span class="string">"template01"</span>></span><br><span class="line">        <div></span><br><span class="line">            <h3>slot内容分发<<span class="regexp">/h3></span></span><br><span class="line"><span class="regexp">            <!--通过name属性来指定插槽的名称--></span></span><br><span class="line"><span class="regexp">            <slot name="s1"></</span>slot></span><br><span class="line">            <slot name=<span class="string">"s2"</span>><<span class="regexp">/slot></span></span><br><span class="line"><span class="regexp">        </</span>div></span><br><span class="line">    <<span class="regexp">/template></span></span><br><span class="line"><span class="regexp">    <script></span></span><br><span class="line"><span class="regexp">        Vue.component("my-component",{</span></span><br><span class="line"><span class="regexp">            template: "#template01"</span></span><br><span class="line"><span class="regexp">        });</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        var vm = new Vue({</span></span><br><span class="line"><span class="regexp">            el: "#web"</span></span><br><span class="line"><span class="regexp">        });</span></span><br><span class="line"><span class="regexp">    </</span>script></span><br><span class="line"><<span class="regexp">/body></span></span><br></pre></td></tr></tbody></table></figure></div><h3 id="6-3-3-组件的动态切换"><a href="#6-3-3-组件的动态切换" class="headerlink" title="6.3.3 组件的动态切换"></a>6.3.3 组件的动态切换</h3><p>有的时候，在不同组件之间进行动态切换是非常有用的，例如我们系统经常使用的一个导航栏。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line">    <div id=<span class="string">"web"</span>></span><br><span class="line">        <!--定义导航栏的切换--></span><br><span class="line">        <ul></span><br><span class="line">            <!--为每一个选项卡绑定切换事件，直接改变currentView的数据--></span><br><span class="line">            <li><span class="xml"><span class="tag"><<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"currentView='home'"</span>></span>Home<span class="tag"></<span class="name">button</span>></span></span><<span class="regexp">/li></span></span><br><span class="line"><span class="regexp">            <li><button @click="currentView='page1'">page1</</span>button><<span class="regexp">/li></span></span><br><span class="line"><span class="regexp">            <li><button @click="currentView='page2'">page2</</span>button><<span class="regexp">/li></span></span><br><span class="line"><span class="regexp">        </u</span>l></span><br><span class="line">        <!--导航栏切换的区域，根据导航栏选中的内容不同，进行不同信息的展示--></span><br><span class="line">        <div></span><br><span class="line">            <!-- component元素是Vue动态组件定义的标签，存在一个is属性，该属性接收自定义组件的名称，将该组件内容展示出来--></span><br><span class="line">            <component :is=<span class="string">"currentView"</span>><<span class="regexp">/component></span></span><br><span class="line"><span class="regexp">        </</span>div></span><br><span class="line">    <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp">    <script></span></span><br><span class="line"><span class="regexp">        var vm = new Vue({</span></span><br><span class="line"><span class="regexp">            el: "#web",</span></span><br><span class="line"><span class="regexp">            data: {</span></span><br><span class="line"><span class="regexp">               currentView: "home"</span></span><br><span class="line"><span class="regexp">            },</span></span><br><span class="line"><span class="regexp">            components: {</span></span><br><span class="line"><span class="regexp">                home: {</span></span><br><span class="line"><span class="regexp">                    template: "<h3>home：{{home}}</</span>h3><span class="string">",</span></span><br><span class="line"><span class="string">                    data: function () {</span></span><br><span class="line"><span class="string">                        /*产生一个0到100不包含100的随机数*/</span></span><br><span class="line"><span class="string">                        return {</span></span><br><span class="line"><span class="string">                            home: parseInt(Math.random()*100)</span></span><br><span class="line"><span class="string">                        };</span></span><br><span class="line"><span class="string">                    }</span></span><br><span class="line"><span class="string">                },</span></span><br><span class="line"><span class="string">                page1: {</span></span><br><span class="line"><span class="string">                    template: "</span><h3>page1<<span class="regexp">/h3>"</span></span><br><span class="line"><span class="regexp">                },</span></span><br><span class="line"><span class="regexp">                page2: {</span></span><br><span class="line"><span class="regexp">                    template: "<h3>page2</</span>h3><span class="string">"</span></span><br><span class="line"><span class="string">                }</span></span><br><span class="line"><span class="string">            }</span></span><br><span class="line"><span class="string">        });</span></span><br><span class="line"><span class="string">    </script></span></span><br><span class="line"><span class="string"></span></span><br></span></div></span></span></span></div></span></pre></td></tr></tbody></table></figure></div><p>组件的动态切换需要配合Vue内置的component标签来使用，该标签用于动态地显示组件内容，具体展示哪个组件，根据is属性值来进行指定，接收值为组件的名称。</p><p>并且，通过上面的随机数测试，我们发现每次切换到Home页面时，页面上的随机数都是变化的，也就是说，页面没切换一次相当于组件都重新编译解析了一次。如果我们组件定义内容较多，且内容不是动态变化的，那么，每次切换都重新加载组件内容，显然是一种资源浪费。</p><p>为了避免这种资源浪费，Vue为我们提供了一个keep-alive标签，将该标签定义在component外部，该component容器中的组件只会在第一次加载时编译一次，完成编译之后，每次切换将不再重新编译，也就是keep-alive将第一次编译的内容缓存了下来。</p><p>我们可以根据实际的业务场景来确定是否使用keep-alive标签。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><div><br><span class="line"><keep-alive></keep-alive></span><br><span class="line"><!-- component元素是Vue动态组件定义的标签，存在一个is属性，该属性接收自定义组件的名称，将该组件内容展示出来--></span><br><span class="line"><component :is="<span" class="string">"currentView"</component></span>><<span class="regexp">/component></span><br><span class="line"><span class="regexp"><!--</span-->keep-alive></span><br><span class="line"><<span class="regexp">/div></span></span><br></span></div></span></pre></td></tr></tbody></table></figure></div><h2 id="6-4-组件的信息传递"><a href="#6-4-组件的信息传递" class="headerlink" title="6.4 组件的信息传递"></a>6.4 组件的信息传递</h2><p>通常对于一个大型应用系统来说，系统构建都是以一个组件树来进行组织的。查看组件的组织结构图。</p><p>由图发现，系统是由多个复杂的组件嵌套构成的，那么组件与组件之间一定存在复杂的数据交互问题。</p><p>又由组件的基础知识可知，每一个组件都是挂载在一个Vue实例下的，而组件本身也是一个Vue实例，组件使用过程中存在父子关系，Vue实例就像是一个父实例，而组件实例就相当于是一个子实例。</p><h3 id="6-4-1-父组件向子组件传递数据"><a href="#6-4-1-父组件向子组件传递数据" class="headerlink" title="6.4.1 父组件向子组件传递数据"></a>6.4.1 父组件向子组件传递数据</h3><p>组件实例通过props属性来支持数据传递。</p><h5 id="静态数据传递"><a href="#静态数据传递" class="headerlink" title="静态数据传递"></a>静态数据传递</h5><p>案例1：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <div id="<span" class="string">"web"><br><span class="line">        <!--组件在使用时传递具体的数据内容--></span><br><span class="line">        <my-component01 message="<span" class="string">"1"</my-component01></span>><<span class="regexp">/my-component01></span><br><span class="line"><span class="regexp"><my-component01 message="Hello">-component01></my-component01></span><br><span class="line">        <my-component01 message="<span" class="string">"Hello World"</my-component01></span>><<span class="regexp">/my-component01></span></span><br><span class="line"><span class="regexp">        <my-component01 message="true">-component01></my-component01></span><br><span class="line">    <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp">    <script></span></span><br><span class="line"><span class="regexp">        Vue.component("my-component01",{</span></span><br><span class="line"><span class="regexp">            template: "<h3>{{message + ' of type is ' + typeof message}}</</span>h3><span class="string">",</span></span><br><span class="line"><span class="string">            /* 使用props属性来声明该组件将要接收来自父组件或者外部的数据，数据类型为数据 */</span></span><br><span class="line"><span class="string">            props: ["</span>message<span class="string">"]</span></span><br><span class="line"><span class="string">        });</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        var vm = new Vue({</span></span><br><span class="line">            el: "#web"</span><br><span class="line">        });</span><br><span class="line">    <<span class="regexp">/script></span></span><br><span class="line"><span class="regexp"></</span>body></span><br></pre></td></tr></tbody></table></figure></div><p>组件通过props属性来声明该组件将要接收来自父组件或者外部的数据，数据类型要求为一个数组，数组中定义字符串类型的数据名。在使用组件时，通过数组中的数据名来指定该数据名所指代的具体值。</p><p>这里传入的值都是字符串类型的，如果我们想要传递特定数据类型的值时，应该怎么做？例如，将传递值1以数字1的方式传入、将true字符串以布尔值的方式传入。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><div id=<span class="string">"web"</span>></span><br><span class="line"><!--组件在使用时传递具体的数据内容--></span><br><span class="line"><my-component01 v-bind:message=<span class="string">"1"</span>><<span class="regexp">/my-component01></span></span><br><span class="line"><span class="regexp"><my-component01 message="Hello"></my</span>-component01></span><br><span class="line"><my-component01 message=<span class="string">"Hello World"</span>><<span class="regexp">/my-component01></span></span><br><span class="line"><span class="regexp"><my-component01 :message="true"></my</span>-component01></span><br><span class="line"><<span class="regexp">/div></span></span><br></pre></td></tr></tbody></table></figure></div><p>通过将传递属性使用v-bind指令进行绑定，我们发现1与true传递之后，数据类型已经解析为number与boolean。</p><p>但如果将Hello进行v-bind数据绑定后，页面会出现undefined类型；而如果将Hello World进行v-bind数据绑定后，页面将会直接报错。这种现象出现的原因是，使用v-bind进行数据绑定后，已经变成了动态数据传递。</p><h5 id="动态数据绑定"><a href="#动态数据绑定" class="headerlink" title="动态数据绑定"></a>动态数据绑定</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line">    <div id=<span class="string">"web"</span>></span><br><span class="line">        <my-component message=<span class="string">"Hello"</span>><<span class="regexp">/my-component></span></span><br><span class="line"><span class="regexp">        <my-component :message="1"></my</span>-component></span><br><span class="line">        <!-- 将父实例当中的message数据进行传递 --></span><br><span class="line">        <my-component :message=<span class="string">"message"</span>><<span class="regexp">/my-component></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        <!-- 复合数据的传递 --></span></span><br><span class="line"><span class="regexp">        <!-- 将data字符串当做一个JSON格式的对象进行传递--></span></span><br><span class="line"><span class="regexp">        <my-component01 :message="{data:'Hello World'}"></my</span>-component01></span><br><span class="line">        <!-- 动态地将父实例中person对象进行传递 --></span><br><span class="line">        <my-component02 :message=<span class="string">"person"</span>><<span class="regexp">/my-component02></span></span><br><span class="line"><span class="regexp">    </</span>div></span><br><span class="line">    <script></span><br><span class="line">        Vue.component(<span class="string">"my-component"</span>,{</span><br><span class="line">            template: <span class="string">"<h3>{{message}}</h3>"</span>,</span><br><span class="line">            props:[<span class="string">"message"</span>]</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        Vue.component(<span class="string">"my-component01"</span>,{</span><br><span class="line">            template: <span class="string">"<h3>{{message.data}}</h3>"</span>,</span><br><span class="line">            <span class="comment">/* 将data JSON数据赋值给message在组件中进行数据处理 */</span></span><br><span class="line">            props:[<span class="string">"message"</span>]</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Vue.component(<span class="string">"my-component02"</span>,{</span><br><span class="line">            template: <span class="string">"<h3>{{message.name}}</h3>"</span>,</span><br><span class="line">            <span class="comment">/* 将person对象数据赋值给message在组件中进行数据处理 */</span></span><br><span class="line">            props:[<span class="string">"message"</span>]</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue({</span><br><span class="line">            el: <span class="string">"#web"</span>,</span><br><span class="line">            data: {</span><br><span class="line">                message: <span class="string">"Hello World"</span>,</span><br><span class="line">                person: {</span><br><span class="line">                    id: <span class="number">1</span>,</span><br><span class="line">                    name: <span class="string">"zhangsan"</span>,</span><br><span class="line">                    sex: <span class="string">"男"</span></span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">    <<span class="regexp">/script></span></span><br><span class="line"><span class="regexp"></</span>body></span><br></pre></td></tr></tbody></table></figure></div><p>在动态数据传递中，要使用v-bind进行属性绑定，进行动态数据绑定时，绑定的字符串内容将以变量的方式出现。</p><h5 id="props单向数据流特性"><a href="#props单向数据流特性" class="headerlink" title="props单向数据流特性"></a>props单向数据流特性</h5><p>props属性组件数据传递时具有单向数据流特性，父实例中数据发生改变时，子组件中的数据也会随之改变；但子组件中数据发生改变，并且该数据依赖于props属性，父实例中的数据不会随着props属性数据的改变而改变，这就是props属性的单向数据流特性。</p><p>在测试props单向数据流特性的复杂案例之前，我们先来看一个简单的案例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line">    <div id=<span class="string">"web"</span>></span><br><span class="line">        <!-- input实现了双向数据绑定 --></span><br><span class="line">        <input type=<span class="string">"text"</span> v-model=<span class="string">"fatherMessage"</span>></span><br><span class="line">        <p>{{fatherMessage}}<<span class="regexp">/p></span></span><br><span class="line"><span class="regexp">        <!-- outer-message进行组件数据传递，outer-message相当于outerMessage --></span></span><br><span class="line"><span class="regexp">        <my-component :outer-message="fatherMessage"></my</span>-component></span><br><span class="line">    <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp">    <script></span></span><br><span class="line"><span class="regexp">        Vue.component("my-component",{</span></span><br><span class="line"><span class="regexp">            template: "<h3>{{outerMessage}}</</span>h3><span class="string">",</span></span><br><span class="line"><span class="string">            props: ["</span>outerMessage<span class="string">"]</span></span><br><span class="line"><span class="string">        });</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        var vm = new Vue({</span></span><br><span class="line">            el: "#web",</span><br><span class="line">            data: {</span><br><span class="line">                fatherMessage: <span class="string">""</span></span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">    <<span class="regexp">/script></span></span><br><span class="line"><span class="regexp"></</span>body></span><br></pre></td></tr></tbody></table></figure></div><p>通过上述案例，我们可以看出当外部父实例中的数据发生改变时，子组件中的数据也随之发生了改变。</p><blockquote><p>注意：props属性进行数据名称定义时采用了驼峰式的命名，但在数据名称使用时使用“-”连接。直接使用“-”会造成编译异常。</p></blockquote><p>接下来，我们测试子组件向父实例数据逆向数据传递。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line">    <div id=<span class="string">"web"</span>></span><br><span class="line">        <!-- input实现了双向数据绑定 --></span><br><span class="line">        <input type=<span class="string">"text"</span> v-model=<span class="string">"fatherMessage"</span>></span><br><span class="line">        <p>父实例当中的数据：{{fatherMessage}}<<span class="regexp">/p></span></span><br><span class="line"><span class="regexp">        <!-- son-message进行组件数据传递，son-message相当于sonMessage --></span></span><br><span class="line"><span class="regexp">        <my-component :son-message="fatherMessage"></my</span>-component></span><br><span class="line">    <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp">    <script></span></span><br><span class="line"><span class="regexp">        Vue.component("my-component",{</span></span><br><span class="line"><span class="regexp">            /</span>*将从props属性中接收到的父数据绑定到input输入框中，input框具有双向数据绑定的功能*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">            template: "<div><h3>子组件当中的数据：{{sonMessage}}</</span>h3><span class="xml"><span class="tag"><<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">v-model</span>=<span class="string">'sonMessage'</span>></span><span class="tag"></<span class="name">div</span>></span></span><span class="string">",</span></span><br><span class="line"><span class="string">            props: ["</span>sonMessage<span class="string">"]</span></span><br><span class="line"><span class="string">        });</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        var vm = new Vue({</span></span><br><span class="line">            el: "#web",</span><br><span class="line">            data: {</span><br><span class="line">                fatherMessage: <span class="string">""</span></span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">    <<span class="regexp">/script></span></span><br><span class="line"><span class="regexp"></</span>body></span><br></pre></td></tr></tbody></table></figure></div><p>当我们在父输入框中输入数据时，会将数据同步到子组件当中去；但在子组件输入框中输入数据时，子组件内容的数据会发生更新，但父实例数据不会发生同步。</p><p>通过上述的测试，我们得出了一个结论：当父实例数据发生变更时，会通过props属性自动将数据同步到子组件当中去；但子组件操作数据时，并不会将自身变化的数据影响到父实例当中去，这就是props属性的单向数据流特性。</p><p>父组件可以通过props属性向子组件传递数据，那么子组件是否可以向父组件传递数据呢？答案是肯定的，关于子组件向父组件传递数据的知识我们后续学习。</p><h5 id="props数据验证"><a href="#props数据验证" class="headerlink" title="props数据验证"></a>props数据验证</h5><p>为了保证props传递数据的安全严谨性，Vue为props属性提供了数据校验的相关功能。在进行数据校验时，props属性不再接收字符串格式的数组，而是接收一个JSON格式的对象。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><body></span><br><span class="line"><div id=<span class="string">"web"</span>></span><br><span class="line"><my-component :message=<span class="string">"message"</span>><<span class="regexp">/my-component></span></span><br><span class="line"><span class="regexp"></</span>div></span><br><span class="line"><script></span><br><span class="line">Vue.component(<span class="string">"my-component"</span>,{</span><br><span class="line">template: <span class="string">"<h3>{{message}}</h3>"</span>,</span><br><span class="line"><span class="comment">/* props数据校验，接收一个JSON对象 */</span></span><br><span class="line">props: {</span><br><span class="line"><span class="comment">/* 对于Message数据的校验 */</span></span><br><span class="line">message: {</span><br><span class="line"><span class="comment">/* message的数据类型必须为Number */</span></span><br><span class="line">type: <span class="built_in">Number</span>,</span><br><span class="line"><span class="comment">/* message数据为必传值 */</span></span><br><span class="line">required: <span class="literal">true</span>,</span><br><span class="line"><span class="comment">/* 对于message数据的自定义校验函数，返回值为true表示校验通过，false为校验不通过 */</span></span><br><span class="line">validator: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>{</span><br><span class="line"><span class="keyword">return</span> value > <span class="number">0</span> && value <=<span class="number">128</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue({</span><br><span class="line">el: <span class="string">"#web"</span>,</span><br><span class="line">data: {</span><br><span class="line">message: <span class="number">180</span></span><br><span class="line">}</span><br><span class="line">});</span><br><span class="line"><<span class="regexp">/script></span></span><br><span class="line"><span class="regexp"></</span>body></span><br></pre></td></tr></tbody></table></figure></div><p>以上是props数据校验的基本方式，当数据校验不通过时，并不会影响页面的正常编译渲染，只是会在控制台抛出一些Vue的校验异常警告。因此，props属性的数据校验只是编程层面的数据校验，相当于为程序员编程时提供一些组件的使用警告。</p><p>其他的数据校验格式：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'my-component'</span>, {</span><br><span class="line">  props: {</span><br><span class="line">    <span class="comment">// 基础的类型检查 (`null` 匹配任何类型)</span></span><br><span class="line">    propA: <span class="built_in">Number</span>,</span><br><span class="line">    <span class="comment">// 多个可能的类型</span></span><br><span class="line">    propB: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span><br><span class="line">    <span class="comment">// 必填的字符串</span></span><br><span class="line">    propC: {</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      required: <span class="literal">true</span></span><br><span class="line">    },</span><br><span class="line">    <span class="comment">// 带有默认值的数字</span></span><br><span class="line">    propD: {</span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="number">100</span></span><br><span class="line">    },</span><br><span class="line">    <span class="comment">// 带有默认值的对象</span></span><br><span class="line">    propE: {</span><br><span class="line">      type: <span class="built_in">Object</span>,</span><br><span class="line">      <span class="comment">// 对象或数组默认值必须从一个工厂函数获取</span></span><br><span class="line">      <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">        <span class="keyword">return</span> { <span class="attr">message</span>: <span class="string">'hello'</span> }</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    <span class="comment">// 自定义验证函数</span></span><br><span class="line">    propF: {</span><br><span class="line">      validator: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>{</span><br><span class="line">        <span class="comment">// 这个值必须匹配下列字符串中的一个</span></span><br><span class="line">        <span class="keyword">return</span> [<span class="string">'success'</span>, <span class="string">'warning'</span>, <span class="string">'danger'</span>].indexOf(value) !== <span class="number">-1</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure></div><h3 id="6-4-2-子组件向父组件传递数据"><a href="#6-4-2-子组件向父组件传递数据" class="headerlink" title="6.4.2 子组件向父组件传递数据"></a>6.4.2 子组件向父组件传递数据</h3><p>父实例、父组件向子组件传递数据Vue通过props属性来实现，而props的数据传递本质上却是不可逆的。在某些特殊的场景下，我们想要将子组件中的数据传递到父实例或者父组件中，这时就必须借助Vue提供的自定义事件机制来进行数据传递。</p><p>自定义事件涉及到了v-on指令的事件监听与$emit事件触发。</p><h5 id="使用事件向父实例抛出一个子组件值"><a href="#使用事件向父实例抛出一个子组件值" class="headerlink" title="使用事件向父实例抛出一个子组件值"></a>使用事件向父实例抛出一个子组件值</h5><p>案例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><!DOCTYPE html></span><br><span class="line"><html lang=<span class="string">"en"</span>></span><br><span class="line"><head></span><br><span class="line">    <meta charset=<span class="string">"UTF-8"</span>></span><br><span class="line">    <title>test-子组件向父组件传递数据<<span class="regexp">/title></span></span><br><span class="line"><span class="regexp">    <script src="../</span>vue/vue.js<span class="string">"></script></span></span><br><span class="line"><span class="string">    <!--</span></span><br><span class="line"><span class="string">        1、编写父实例，访问自身数据；</span></span><br><span class="line"><span class="string">        2、编写子组件，访问自身数据；</span></span><br><span class="line"><span class="string">        3、将父实例中的数据通过props属性传递给子组件；</span></span><br><span class="line"><span class="string">        4、将子组件中的数据通过自定义事件绑定传递给子组件</span></span><br><span class="line"><span class="string">            4.1 在子组件模板中绑定一个click事件，该事件将触发send函数的执行；</span></span><br><span class="line"><span class="string">            4.2 定义send函数，send函数中通过$emit函数进行事件广播，触发组件外部的指定事件son-click，并子组件中的数据进行传递；</span></span><br><span class="line"><span class="string">            4.3 在子组件的使用处，绑定自定义事件类型son-click，该事件由$emit函数触发，</span></span><br><span class="line"><span class="string">                son-click事件触发后会执行指定的父实例中的receive函数，该函数即可接受$emit函数发射出来的参数。</span></span><br><span class="line"><span class="string">            4.4 receive函数内部将传递过来的数据绑定在父实例当中。</span></span><br><span class="line"><span class="string">    --></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    <div id="</span>web<span class=" string">"><br><span class="line"><span class="string">        <h3>父实例，访问自身数据：fatherId-{{fatherId}}，fatherName-{{fatherName}}</h3></span></span><br><span class="line"><span class="string">        <h3>父实例，访问子组件传递的数据：sonId-{{sonId}}，sonName-{{sonName}}</h3></span></span><br><span class="line"><span class="string">        <!-- 子组件上定义一个自定义事件类型，名称为sonClick，该事件将会触发父实例中函数的执行--></span></span><br><span class="line"><span class="string">        <my-component :father-id="</span>fatherId<span class=" string">"</my-component></span></span><br><span class="line"><span class="string">            :father-Name="</span>fatherName<span class="string">"</span></span><br><span class="line"><span class="string">            @son-click="</span>receive<span class="string">"></span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">    </span></span></div></span></span><br><span class="line"><span class="string">    <template id="</span>template01<span class=" string">"><br><span class="line"><span class="string">        <div><br><span class="line"><span class="string">            <h3>子组件，访问自身数据：sonId-{{sonId}}, sonName-{{sonName}}</h3></span></span><br><span class="line"><span class="string">            <h3>子组件，访问父实例数据：fatherId-{{fatherId}}, fatherName-{{fatherName}}</h3></span></span><br><span class="line"><span class="string">            <!-- 设置一个click事件，该事件触发send函数执行 --></span></span><br><span class="line"><span class="string">            <button @click="</span>send<span class=" string">">子组件向父实例发送数据</button></span></span><br><span class="line"><span class="string">        </span></span></div></span></span><br><span class="line"><span class="string">    </span></span></template></span></span><br><span class="line"><span class="string">    <script></span></span><br><span class="line"><span class="string">        Vue.component("</span>my-component<span class="string">",{</span></span><br><span class="line">            template: "#template01",</span><br><span class="line">            data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">                <span class="keyword">return</span> {</span><br><span class="line">                    sonId: <span class="number">1</span>,</span><br><span class="line">                    sonName: <span class="string">"son"</span></span><br><span class="line">                }</span><br><span class="line">            },</span><br><span class="line">            props: [<span class="string">"fatherId"</span>,<span class="string">"fatherName"</span>],</span><br><span class="line">            methods: {</span><br><span class="line">                send: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">                    <span class="comment">/*利用$emit函数进行事件广播，第一个参数始终为将要触发的事件名称，之后的参数为该事件接收的实参*/</span></span><br><span class="line">                    <span class="comment">/*注意：这里的事件名称要与子组件使用时定义的名称相同*/</span></span><br><span class="line">                    <span class="keyword">this</span>.$emit(<span class="string">"son-click"</span>,<span class="keyword">this</span>.sonId,<span class="keyword">this</span>.sonName);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue({</span><br><span class="line">            el: <span class="string">"#web"</span>,</span><br><span class="line">            data: {</span><br><span class="line">                fatherId: <span class="number">1</span>,</span><br><span class="line">                fatherName: <span class="string">"father"</span>,</span><br><span class="line">                sonId: <span class="number">0</span>,</span><br><span class="line">                sonName: <span class="string">""</span></span><br><span class="line">            },</span><br><span class="line">            methods: {</span><br><span class="line">                receive: <span class="function"><span class="keyword">function</span> (<span class="params">sonId,sonName</span>) </span>{</span><br><span class="line">                    <span class="keyword">this</span>.sonId = sonId;</span><br><span class="line">                    <span class="keyword">this</span>.sonName = sonName;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">    <<span class="regexp">/script></span></span><br><span class="line"><span class="regexp"></</span>body></span><br><span class="line"><<span class="regexp">/html></span></span><br></pre></td></tr></tbody></table></figure></div><p>要点：</p><ol><li>$emit函数是Vue中事件发射函数，能够主动触发自定义事件执行，第一个参数指定将要触发的事件名称，之后的参数指定事件传递的实参值。</li><li>$emit函数的事件名称必须与子组件绑定时的名称完全一致，一般要求“-”连接方式。</li><li>子组件绑定自定义事件名称，间接触发外部父实例中的函数，该函数用于接收子组件传出的数据。</li></ol><h5 id="v-model的双向数据绑定"><a href="#v-model的双向数据绑定" class="headerlink" title="v-model的双向数据绑定"></a>v-model的双向数据绑定</h5><p>自定义事件同样可以应用于支持v-model的输入框，因为在v-model指令在本质上完全是依托于事件绑定进行实现的。</p><p>记住：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><input v-model=<span class="string">"searchText"</span>></span><br></pre></td></tr></tbody></table></figure></div><p>完全等价于：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><input</span><br><span class="line">  v-bind:value=<span class="string">"searchText"</span></span><br><span class="line">  v-on:input=<span class="string">"searchText = $event.target.value"</span></span><br><span class="line">></span><br></pre></td></tr></tbody></table></figure></div><p>也就是说v-model指令实际上绑定了一个名为value的属性，同时绑定了input事件。input事件内部利用$event事件对象将操作值重新赋给了searchText。</p><p>案例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><!DOCTYPE html></span><br><span class="line"><html lang=<span class="string">"en"</span>></span><br><span class="line"><head></span><br><span class="line">    <meta charset=<span class="string">"UTF-8"</span>></span><br><span class="line">    <title>test-子组件v-model双向数据绑定<<span class="regexp">/title></span></span><br><span class="line"><span class="regexp">    <script src="../</span>vue/vue.js<span class="string">"></script></span></span><br><span class="line"><span class="string">    <!--</span></span><br><span class="line"><span class="string">        1、编写父实例，使用input进行双向数据绑定。</span></span><br><span class="line"><span class="string">        2、编写子组件，使用input输入框，但不使用v-model进行数据绑定。</span></span><br><span class="line"><span class="string">        3、利用v-bind进行子组件的props属性数据绑定，绑定名称为father-value，该属性接收值为父实例中的fatherValue</span></span><br><span class="line"><span class="string">           将父实例中的fatherValue数据传递给子组件的father-value，子组件内部同样使用v-bind将props中fatherValue值</span></span><br><span class="line"><span class="string">           绑定到input框中，实现父实例数据向子组件的传递。</span></span><br><span class="line"><span class="string">        4、在子组件内部input中显示绑定input事件，input事件将触发执行子组件的updateValue，updateValue函数要求</span></span><br><span class="line"><span class="string">           传入当前的事件对象$event；updateValue函数内部通过event对象获取input框操作值，再利用$emit函数触发外部</span></span><br><span class="line"><span class="string">           事件的执行，将子组件内部的数据发射到外部；$emit函数绑定的事件类型也必须是input的事件；在子组件的使用</span></span><br><span class="line"><span class="string">           处，显示定义input事件，该事件将触发外部父实例的fatherUpdateValue函数，fatherUpdateValue函数接收子组件</span></span><br><span class="line"><span class="string">           发射出来的信息；最后fatherUpdateValue函数将接收到的值绑定到父实例中去。</span></span><br><span class="line"><span class="string">    --></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    <div id="</span>web<span class=" string">"><br><span class="line"><span class="string">        父实例双向数据绑定：<input type="</span>text<span class=" string">" v-model="</span>fatherValue<span class="string">"></span></span><br><span class="line"><span class="string">        <br></span></span><br><span class="line"><span class="string">        <br></span></span><br><span class="line"><span class="string">        <!-- v-bind，father-value采用“-”连接，与props属性中数据名称相对应，负责将父实例中的数据传入到子组件中 --></span></span><br><span class="line"><span class="string">        <!-- v-on，监听$emit函数对事件的触发，事件触发后调用外部父实例中的fatherUpdateValue函数，这里的input并不一定要如此命名--></span></span><br><span class="line"><span class="string">        <my-component :father-value="</span>fatherValue<span class=" string">" @input="</my-component></span>fatherUpdateValue<span class="string">"></span></span><br><span class="line"><span class="string">    </span></span></div></span></span><br><span class="line"><span class="string">    <template id="</span>template01<span class=" string">"><br><span class="line"><span class="string">        <div><br><span class="line"><span class="string">            <!-- 这里的v-bind必须要绑定value属性，该名字是input框Vue内部处理的默认名称，绑定props属性传入的值--></span></span><br><span class="line"><span class="string">            <!-- 这里的v-on必须要绑定input事件，该事件是input框Vue内部处理的默认事件，触发子组件内部的事件--></span></span><br><span class="line"><span class="string">            子组件双向数据绑定：<input type="</span>text<span class=" string">" :value="</span>fatherValue<span class="string">" @input="</span>updateValue($event)<span class="string">"></span></span><br><span class="line"><span class="string">        </span></span></div></span></span><br><span class="line"><span class="string">    </span></span></template></span></span><br><span class="line"><span class="string">    <script></span></span><br><span class="line"><span class="string">        Vue.component("</span>my-component<span class="string">",{</span></span><br><span class="line">            template: "#template01",</span><br><span class="line">            props: [<span class="string">"fatherValue"</span>],</span><br><span class="line">            methods: {</span><br><span class="line">                updateValue(event){</span><br><span class="line">                    <span class="keyword">this</span>.$emit(<span class="string">"input"</span>,event.target.value);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue({</span><br><span class="line">            el: <span class="string">"#web"</span>,</span><br><span class="line">            data: {</span><br><span class="line">                fatherValue: <span class="string">""</span></span><br><span class="line">            },</span><br><span class="line">            methods: {</span><br><span class="line">                fatherUpdateValue(value){</span><br><span class="line">                    <span class="keyword">this</span>.fatherValue = value;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">    <<span class="regexp">/script></span></span><br><span class="line"><span class="regexp"></</span>body></span><br><span class="line"><<span class="regexp">/html></span></span><br></pre></td></tr></tbody></table></figure></div></body></html></script></span></span></span></div></span></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习之——Vue项目环境搭建</title>
      <link href="/2020/02/22/study-file/7.0%20Vue%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2020/02/22/study-file/7.0%20Vue%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h1 id="七、Vue项目环境搭建"><a href="#七、Vue项目环境搭建" class="headerlink" title="七、Vue项目环境搭建"></a>七、Vue项目环境搭建</h1><p>在实际企业应用开发中，如果只通过资源包的方式将JavaScript文件导入到HTML页面当中，那么Vue的使用与jQuery等JavaScript库使用基本没有太大的区别，Vue前端框架的优势完全发挥不出来。</p><p>而类似Vue.js、Angular.js、React这些前端框架是为了解决前后端分离、SPA(单页面应用)等技术难题而推出的，要想完全发挥前端框架的优势，并且很好地管理前框框架应用，我们必须使用前端框架所提供的相关管理构建工具。</p><p>关于Vue的高级开发工具如下：</p><ul><li>npm</li><li>webpack</li><li>Vue-cli</li><li>Vue-devtools</li></ul><h5 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h5><p>npm：Node.js下的JavaScript资源包管理器，用于下载管理相关JavaScript资源包。</p><h5 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h5><p>webpack：主要的用途是通过CommonJS的语法把所有浏览器端需要发布的静态资源做相应的准备，比如资源的合并和打包。在Vue中，我们主要使用webpack处理Vue特殊的.vue文件，并组织整个项目的管理与部署。</p><h5 id="Vue-cli"><a href="#Vue-cli" class="headerlink" title="Vue-cli"></a>Vue-cli</h5><p>Vue-cli: 用户生成Vue工程模板。（帮你快速开始一个vue的项目，也就是给你一套vue的结构，包含基础的依赖库，只需要 npm install就可以安装）。</p><h5 id="Vue-devtools"><a href="#Vue-devtools" class="headerlink" title="Vue-devtools"></a>Vue-devtools</h5><p>Vue-devtools：基于Chrome浏览器的一款Vue前端调试插件，相比于浏览器自带的控制台调试更加方便高效。</p><h2 id="Vue项目环境搭建步骤"><a href="#Vue项目环境搭建步骤" class="headerlink" title="Vue项目环境搭建步骤"></a>Vue项目环境搭建步骤</h2><p>请参考Excel安装步骤进行下载安装。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习之——Vue高级应用入门</title>
      <link href="/2020/02/22/study-file/8.0%20Vue%E9%AB%98%E7%BA%A7%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/"/>
      <url>/2020/02/22/study-file/8.0%20Vue%E9%AB%98%E7%BA%A7%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h1 id="八、Vue高级应用入门"><a href="#八、Vue高级应用入门" class="headerlink" title="八、Vue高级应用入门"></a>八、Vue高级应用入门</h1><p>在使用Vue-cli构建一个基础的Vue脚手架项目时，我们简单了解了项目中的一些基本文件功能。接下来，我们来学习Vue构建组织项目的基础内容。</p><p>我们重点关注App.vue、index.html、main.js三个文件。</p><h2 id="Vue文件的使用"><a href="#Vue文件的使用" class="headerlink" title=".Vue文件的使用"></a>.Vue文件的使用</h2><p>.Vue文件是Vue构建复杂应用时，专门提供的一种组件组织文件。一个.vue文件相当于系统中的一个组件。</p><p>主要包含以下三个结构：<br>template：定义组件模板内容，即一个组件定义的HTML代码。<br>script：定义组件的Vue实例，包括组件实例的data属性、method方法等内容。<br>style：定义当前组件的CSS样式内容。</p><p>我们先简单尝试.vue文件的使用，对其进行一定的修改。</p><h5 id="案例1："><a href="#案例1：" class="headerlink" title="案例1："></a>案例1：</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><template><br><span class="line">  <div><br><span class="line">    <h3>第一个Vue高级应用案例<<span class="regexp">/h3></span><br><span class="line"><span class="regexp">    <input type="text" v-model="msg"></span></span><br><span class="line"><span class="regexp">    <p id="pId">{{msg}}<!--</span-->p><br><span class="line">  <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp"><!--</span-->template></span><br><span class="line"></span><br><span class="line"><script></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  name: <span class="string">'app'</span>,</span><br><span class="line">  data () {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      msg: <span class="string">'Welcome to Your Vue.js App'</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><<span class="regexp">/script></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"><style></span></span><br><span class="line"><span class="regexp">  #pId{</span></span><br><span class="line"><span class="regexp">    color: red;</span></span><br><span class="line"><span class="regexp">    font-size: 20px;</span></span><br><span class="line"><span class="regexp">  }</span></span><br><span class="line"><span class="regexp"></</span>style></span><br></pre></td></tr></tbody></table></figure></div><h5 id="案例2："><a href="#案例2：" class="headerlink" title="案例2："></a>案例2：</h5><p>尝试组件在Vue中的使用，在工程的src目录下新建一个名为components的文件夹，并新建两个.vue的组件。</p><p>Left.vue:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><template></span><br><span class="line">  <div></span><br><span class="line">    <ul></span><br><span class="line">      <li>列表<span class="number">1</span><<span class="regexp">/li></span></span><br><span class="line"><span class="regexp">      <li>列表2</</span>li></span><br><span class="line">      <li>列表<span class="number">3</span><<span class="regexp">/li></span></span><br><span class="line"><span class="regexp">      <li>列表4</</span>li></span><br><span class="line">    <<span class="regexp">/ul></span></span><br><span class="line"><span class="regexp">    <p>{{msg}}</</span>p></span><br><span class="line">  <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp"></</span>template></span><br><span class="line"></span><br><span class="line"><script></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    name: <span class="string">"Left"</span>,</span><br><span class="line">    props: [<span class="string">"msg"</span>],</span><br><span class="line">  }</span><br><span class="line"><<span class="regexp">/script></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"><style scoped></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></</span>style></span><br></pre></td></tr></tbody></table></figure></div><p>Top.vue:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><template></span><br><span class="line">  <div></span><br><span class="line">    <h1>项目的头部<<span class="regexp">/h1></span></span><br><span class="line"><span class="regexp">    <p>{{msg}}</</span>p></span><br><span class="line">  <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp"></</span>template></span><br><span class="line"></span><br><span class="line"><script></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    name: <span class="string">"Top"</span>,</span><br><span class="line">    props: [<span class="string">"msg"</span>]</span><br><span class="line">  }</span><br><span class="line"><<span class="regexp">/script></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"><style scoped></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></</span>style></span><br></pre></td></tr></tbody></table></figure></div><p>将App.vue文件修改为如下内容：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><template></span><br><span class="line">  <div></span><br><span class="line">    <top v-bind:msg=<span class="string">"msg"</span>><<span class="regexp">/top></span></span><br><span class="line"><span class="regexp">    <left v-bind:msg="msg"></</span>left></span><br><span class="line">    <div></span><br><span class="line">      <h1>第一个Vue高级应用案例<<span class="regexp">/h1></span></span><br><span class="line"><span class="regexp">      <input type="text" v-model="msg"></span></span><br><span class="line"><span class="regexp">      <p id="pId">{{msg}}</</span>p></span><br><span class="line">    <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp">  </</span>div></span><br><span class="line"><<span class="regexp">/template></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"><script></span></span><br><span class="line"><span class="regexp">  import Left from "./</span>components/Left.vue<span class="string">";</span></span><br><span class="line"><span class="string">  import Top from "</span>./components/Top.vue<span class="string">";</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  export default {</span></span><br><span class="line"><span class="string">    name: 'app',</span></span><br><span class="line"><span class="string">    data() {</span></span><br><span class="line"><span class="string">      return {</span></span><br><span class="line"><span class="string">        msg: 'Welcome to Your Vue.js App'</span></span><br><span class="line"><span class="string">      }</span></span><br><span class="line"><span class="string">    },</span></span><br><span class="line"><span class="string">    components:{</span></span><br><span class="line"><span class="string">      left: Left,</span></span><br><span class="line"><span class="string">      top: Top</span></span><br><span class="line"><span class="string">    }</span></span><br><span class="line"><span class="string">  }</span></span><br><span class="line"><span class="string"></script></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"><style></span></span><br><span class="line"><span class="string">  #pId {</span></span><br><span class="line"><span class="string">    color: red;</span></span><br><span class="line"><span class="string">    font-size: 20px;</span></span><br><span class="line"><span class="string">  }</span></span><br><span class="line"><span class="string"></style></span></span><br></p></span></span></h3></span></div><p>在上案例中，我们看到App.vue文件相当于系统首页的主页面组件，在其内部包含了两个子组件Left.vue和Top.vue，两个组件的导入方式为：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Left和Top相当于对导入的组件取名</span></span><br><span class="line"><span class="keyword">import</span> Left <span class="keyword">from</span> <span class="string">"./components/Left.vue"</span>;</span><br><span class="line"><span class="keyword">import</span> Top <span class="keyword">from</span> <span class="string">"./components/Top.vue"</span>;</span><br></pre></td></tr></tbody></table></figure></div><p>在上述代码中，我们还测试了父组件数据向子组件数据的传递。</p><p>这里组件的组织方式是局部注册的方式出现的，我们想要全局注册，也是完全可以的，但需要先将全局的Vue对象导入进来。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><template><br><span class="line">  <div><br><span class="line">    <top v-bind:msg="<span" class="string">"msg"</top></span>><<span class="regexp">/top></span><br><span class="line"><span class="regexp">    <left v-bind:msg="msg"><!--</span-->left></left></span><br><span class="line">    <div><br><span class="line">      <h1>第一个Vue高级应用案例<<span class="regexp">/h1></span><br><span class="line"><span class="regexp">      <input type="text" v-model="msg"></span></span><br><span class="line"><span class="regexp">      <p id="pId">{{msg}}<!--</span-->p><br><span class="line">    <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp">  <!--</span-->div></span><br><span class="line"><<span class="regexp">/template></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"><script></span></span><br><span class="line"><span class="regexp">  import Left from "./</span>components/Left.vue<span class="string">";</span></span><br><span class="line"><span class="string">  import Top from "</span>./components/Top.vue<span class="string">";</span></span><br><span class="line"><span class="string">  import Vue from 'vue';</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  Vue.component("</span>Left<span class="string">",Left);</span></span><br><span class="line"><span class="string">  Vue.component("</span>Top<span class="string">",Top);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  export default {</span></span><br><span class="line"><span class="string">    name: 'app',</span></span><br><span class="line"><span class="string">    data() {</span></span><br><span class="line"><span class="string">      return {</span></span><br><span class="line"><span class="string">        msg: 'Welcome to Your Vue.js App'</span></span><br><span class="line"><span class="string">      }</span></span><br><span class="line"><span class="string">    }/*,</span></span><br><span class="line"><span class="string">    components:{</span></span><br><span class="line"><span class="string">      left: Left,</span></span><br><span class="line"><span class="string">      top: Top</span></span><br><span class="line"><span class="string">    }*/</span></span><br><span class="line"><span class="string">  }</span></span><br><span class="line"><span class="string"></script></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"><style></span></span><br><span class="line"><span class="string">  #pId {</span></span><br><span class="line"><span class="string">    color: red;</span></span><br><span class="line"><span class="string">    font-size: 20px;</span></span><br><span class="line"><span class="string">  }</span></span><br><span class="line"><span class="string"></style></span></span><br></span></p></span></span></h1></span></div><h5 id="案例3："><a href="#案例3：" class="headerlink" title="案例3："></a>案例3：</h5><p>上述案例，为我们简单构建了一个top、left、main结构的页面布局，但页面样式还不是真正以这种方式出现的。我们可以尝试为页面添加CSS样式，使其真正成为这种布局方式。</p><p>将App.vue修改为如下内容：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><template><br><span class="line">  <div><br><span class="line">    <top id="<span" class="string">"topId"</top></span> v-bind:msg=<span class="string">"msg"</span>><<span class="regexp">/top></span><br><span class="line"><span class="regexp">    <div><br><span class="line"><span class="regexp">      <left id="leftId" v-bind:msg="msg"><!--</span-->left></left></span><br><span class="line">      <div id="<span" class="string">"mainId"><br><span class="line">        <h1>第一个Vue高级应用案例<<span class="regexp">/h1></span><br><span class="line"><span class="regexp">        <input type="text" v-model="msg"></span></span><br><span class="line"><span class="regexp">        <p id="pId">{{msg}}<!--</span-->p><br><span class="line">      <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp">    <!--</span-->div></span><br><span class="line">  <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp"><!--</span-->template></span><br><span class="line"></span><br><span class="line"><script></span><br><span class="line">  <span class="keyword">import</span> Left <span class="keyword">from</span> <span class="string">"./components/Left.vue"</span>;</span><br><span class="line">  <span class="keyword">import</span> Top <span class="keyword">from</span> <span class="string">"./components/Top.vue"</span>;</span><br><span class="line">  <span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"></span><br><span class="line">  Vue.component(<span class="string">"Left"</span>,Left);</span><br><span class="line">  Vue.component(<span class="string">"Top"</span>,Top);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    name: <span class="string">'app'</span>,</span><br><span class="line">    data() {</span><br><span class="line">      <span class="keyword">return</span> {</span><br><span class="line">        msg: <span class="string">'Welcome to Your Vue.js App'</span></span><br><span class="line">      }</span><br><span class="line">    }<span class="comment">/*,</span></span><br><span class="line"><span class="comment">    components:{</span></span><br><span class="line"><span class="comment">      left: Left,</span></span><br><span class="line"><span class="comment">      top: Top</span></span><br><span class="line"><span class="comment">    }*/</span></span><br><span class="line">  }</span><br><span class="line"><<span class="regexp">/script></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"><style></span></span><br><span class="line"><span class="regexp">  #pId {</span></span><br><span class="line"><span class="regexp">    color: red;</span></span><br><span class="line"><span class="regexp">    font-size: 20px;</span></span><br><span class="line"><span class="regexp">  }</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  #topId{</span></span><br><span class="line"><span class="regexp">    border: 1px red solid;</span></span><br><span class="line"><span class="regexp">  }</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  #leftId{</span></span><br><span class="line"><span class="regexp">    border: 1px blue solid;</span></span><br><span class="line"><span class="regexp">    width: 20%;</span></span><br><span class="line"><span class="regexp">    float: left;</span></span><br><span class="line"><span class="regexp">  }</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  #mainId{</span></span><br><span class="line"><span class="regexp">    border: 1px yellow solid;</span></span><br><span class="line"><span class="regexp">    width: 70%;</span></span><br><span class="line"><span class="regexp">    float: left;</span></span><br><span class="line"><span class="regexp">  }</span></span><br><span class="line"><span class="regexp"></</span>style></span><br></pre></td></tr></tbody></table></figure></div><p>通过上述案例，我们发现我们完全可以将CSS样式施加在自定义的组件标签上，并通过F12查看源代码，可以这些样式施加到了组件的顶级父标签上。</p></body></html></script></span></span></span></p></span></span></h1></span></div></span></span></div></span></span></div></span></template></span></pre></td></tr></tbody></table></figure></div></span></span></div></span></template></span></pre></td></tr></tbody></table></figure></div></span></template></span></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习之——Vue路由的使用</title>
      <link href="/2020/02/22/study-file/9.0%20Vue%E8%B7%AF%E7%94%B1%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/02/22/study-file/9.0%20Vue%E8%B7%AF%E7%94%B1%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h1 id="九、Vue路由的使用"><a href="#九、Vue路由的使用" class="headerlink" title="九、Vue路由的使用"></a>九、Vue路由的使用</h1><p>Vue提供了单页面应用构建的前端解决方案，那在单个页面中如何进行跳转功能的实现？例如系统导航栏跳转的实现。对于页面跳转，Vue单独提供了一个组件VueRouter来进行页面跳转的处理与管理，Vue Router 是 Vue.js 官方的路由管理器。它和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌。</p><h2 id="9-1-VueRouter的安装与集成"><a href="#9-1-VueRouter的安装与集成" class="headerlink" title="9.1 VueRouter的安装与集成"></a>9.1 VueRouter的安装与集成</h2><p>VueRouter组件本质上就是一个js资源包，名为vue-router.js，我们可以单独引入该文件，进行该组件的使用。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><script src="<span" class="string">"/path/to/vue.js"</span>><<span class="regexp">/script></span></span><br><span class="line"><span class="regexp"><script src="/</span>path/to/vue-router.js<span class="string">"></script></span><br></pre></td></tr></tbody></table></figure></div><p>但在webpack集成环境中，我们需要使用npm进行VueRouter的安装。</p><h5 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h5><p>1、以Vue Webpack的方式构建基础的Vue工程。将App.vue内容修改为：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><template><br><span class="line">  <div id="<span" class="string">"app"><br><span class="line">    <div><br><span class="line">      <ul id="<span" class="string">"topUl"><br><span class="line">        <li>首页<<span class="regexp">/li></span><br><span class="line"><span class="regexp">        </span></span></li><li>新闻<!--</span-->li><br><span class="line">      <<span class="regexp">/ul></span></span><br><span class="line"><span class="regexp">    <!--</span-->div></span><br><span class="line">    <div><br><span class="line">    <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp">  <!--</span-->div></span><br><span class="line"><<span class="regexp">/template></span></span><br><span class="line"><span class="regexp"><script></span></span><br><span class="line"><span class="regexp">export default {</span></span><br><span class="line"><span class="regexp">  name: 'app',</span></span><br><span class="line"><span class="regexp">  data () {</span></span><br><span class="line"><span class="regexp">    return {</span></span><br><span class="line"><span class="regexp">      msg: 'Welcome to Your Vue.js App'</span></span><br><span class="line"><span class="regexp">    }</span></span><br><span class="line"><span class="regexp">  }</span></span><br><span class="line"><span class="regexp">}</span></span><br><span class="line"><span class="regexp"></</span>script></span><br><span class="line"><style></span><br><span class="line">  #topUl{</span><br><span class="line">    list-style-type: none;</span><br><span class="line">  }</span><br><span class="line">  #topUl li{</span><br><span class="line">    float: left;</span><br><span class="line">    font-weight: bolder;</span><br><span class="line">    font-size: <span class="number">18</span>px;</span><br><span class="line">    color: red;</span><br><span class="line">    padding: <span class="number">5</span>px <span class="number">10</span>px;</span><br><span class="line">  }</span><br><span class="line"><<span class="regexp">/style></span></span><br></pre></td></tr></tbody></table></figure></div><p>2、新建组件目录components文件夹，在其下创建Home.vue、News.vue两个组件。<br>Home.vue:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><template></span><br><span class="line">  <div>这是首页<<span class="regexp">/div></span></span><br><span class="line"><span class="regexp"></</span>template></span><br><span class="line"><script></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">        name: <span class="string">"Home"</span></span><br><span class="line">    }</span><br><span class="line"><<span class="regexp">/script></span></span><br><span class="line"><span class="regexp"><style scoped></span></span><br><span class="line"><span class="regexp"></</span>style></span><br></pre></td></tr></tbody></table></figure></div><p>News.vue:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><template></span><br><span class="line">  <div></span><br><span class="line">    这是新闻页面</span><br><span class="line">  <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp"></</span>template></span><br><span class="line"><script></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">        name: <span class="string">"News"</span></span><br><span class="line">    }</span><br><span class="line"><<span class="regexp">/script></span></span><br><span class="line"><span class="regexp"><style scoped></span></span><br><span class="line"><span class="regexp"></</span>style></span><br></pre></td></tr></tbody></table></figure></div><p>3、在当前案例工程根目录下，执行下述命令，为当前工程安装VueRouter组件。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router  --save</span><br></pre></td></tr></tbody></table></figure></div><p>--save参数的作用是，让当前导入的vue-router包的相关信息添加到webpack资源管理文件package.json中去。在dependencies节点下能够看到新增的路由组件vue-router。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"dependencies"</span>: {</span><br><span class="line">    <span class="string">"vue"</span>: <span class="string">"^2.5.11"</span>,</span><br><span class="line">    <span class="string">"vue-router"</span>: <span class="string">"^3.0.2"</span></span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure></div><p>4、在main.js文件中引入VueRouter实例，为整个工程添加路由管理功能。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span>;</span><br><span class="line"><span class="comment">//导入vue-router路由管理组件</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'./vue-router'</span>;</span><br><span class="line"><span class="comment">//让Vue启用VueRouter组件</span></span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"><span class="keyword">new</span> Vue({</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =></span> h(App)</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></div><p>5、在main.js中配置跳转路由。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入首页与新闻页组件</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./components/Home'</span>;</span><br><span class="line"><span class="keyword">import</span> News <span class="keyword">from</span> <span class="string">'./components/News'</span>;</span><br><span class="line"><span class="comment">//配置路由数据</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  {<span class="attr">path</span>: <span class="string">'/home'</span>,<span class="attr">component</span>: Home},</span><br><span class="line">  {<span class="attr">path</span>: <span class="string">'/News'</span>,<span class="attr">component</span>: News}</span><br><span class="line">];</span><br></pre></td></tr></tbody></table></figure></div><p>6、实例化VueRouter路由实例，并挂载在Vue实例中。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实例化VueRouter实例</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter({</span><br><span class="line">  routes: routes</span><br><span class="line">});</span><br><span class="line"><span class="keyword">new</span> Vue({</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  <span class="comment">//挂载在Vue实例下</span></span><br><span class="line">  router: router,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =></span> h(App)</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></div><p>7、在App.vue组件中，设置路由跳转标记，同时设置路由跳转后组件的显示位置。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><template></span><br><span class="line">  <div id=<span class="string">"app"</span>></span><br><span class="line">    <div></span><br><span class="line">      <ul id=<span class="string">"topUl"</span>></span><br><span class="line">        <li><span class="xml"><span class="tag"><<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/home"</span>></span>首页<span class="tag"></<span class="name">router-link</span>></span></span><<span class="regexp">/li></span></span><br><span class="line"><span class="regexp">        <li><router-link to="/</span>news<span class="string">">新闻</router-link></li></span></span><br><span class="line"><span class="string">      </ul></span></span><br><span class="line"><span class="string">    </div></span></span><br><span class="line"><span class="string">    <div id="</span>main<span class="string">"></span></span><br><span class="line"><span class="string">      <router-view></router-view></span></span><br><span class="line"><span class="string">    </div></span></span><br><span class="line"><span class="string">  </div></span></span><br><span class="line"><span class="string"></template></span></span><br></pre></td></tr></tbody></table></figure></div><p>在VueRouter中，通过<router-link>标签来设置路由跳转的触发，to属性设置将要跳转的目标路径。通过<router-view>标签来设置路由组件内容显示的位置。<br>注意观察浏览器地址栏的地址，Vue路由是一种相对路径，在当前地址栏路径的基础上添加了一个/#路径，之后便是我们设置的路由路径。在main.js中设置的路由路径在此基础上进行路由。<br>上述路由方式叫做Hash路由模式，除此之外，VueRouter还提供了另一种History路由模式，我们后续学习。</p><h5 id="默认路由"><a href="#默认路由" class="headerlink" title="默认路由"></a>默认路由</h5><p>当我们访问的路由不存在时，应该为该路由地址配置一个默认路由路径：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置路由数据</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  {<span class="attr">path</span>: <span class="string">'/home'</span>,<span class="attr">component</span>: Home},</span><br><span class="line">  {<span class="attr">path</span>: <span class="string">'/News'</span>,<span class="attr">component</span>: News},</span><br><span class="line">  <span class="comment">//默认路由方式，匹配任意不存在的路径，让其显示Home组件内容</span></span><br><span class="line">  {<span class="attr">path</span>: <span class="string">'*'</span>,<span class="attr">component</span>: Home}</span><br><span class="line">];</span><br></pre></td></tr></tbody></table></figure></div><h2 id="9-2-动态路由匹配"><a href="#9-2-动态路由匹配" class="headerlink" title="9.2 动态路由匹配"></a>9.2 动态路由匹配</h2><p>在以往的学习中，我们知道在请求路径中常常需要传递请求参数，那VueRouter的路由参数式如何传递的呢？<br>例如，我们在上述新闻页面中添加几条新闻列表，之后点击某条新闻列表时跳转到对应的新闻详情页面去。</p><h5 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h5><p>1、修改新闻页面组件News.vue，为其添加新闻列表内容，并为每个新闻列表设置路由路径。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><template></span><br><span class="line">  <div></span><br><span class="line">    <h3>这是新闻页面<<span class="regexp">/h3></span></span><br><span class="line"><span class="regexp">    <ul></span></span><br><span class="line"><span class="regexp">      <li v-for="(item,key) in list"></span></span><br><span class="line"><span class="regexp">        <router-link to="/</span>newscontent<span class="string">">{{key}}-----{{item}}</router-link></span></span><br><span class="line"><span class="string">      </li></span></span><br><span class="line"><span class="string">    </ul></span></span><br><span class="line"><span class="string">  </div></span></span><br><span class="line"><span class="string"></template></span></span><br><span class="line"><span class="string"><script></span></span><br><span class="line"><span class="string">    export default {</span></span><br><span class="line"><span class="string">        name: "</span>News<span class="string">",</span></span><br><span class="line"><span class="string">        data: function () {</span></span><br><span class="line"><span class="string">          return {</span></span><br><span class="line"><span class="string">            list:['新闻列表1','新闻列表2','新闻列表3','新闻列表4','新闻列表5']</span></span><br><span class="line"><span class="string">          }</span></span><br><span class="line"><span class="string">        }</span></span><br><span class="line"><span class="string">    }</span></span><br><span class="line"><span class="string"></script></span></span><br><span class="line"><span class="string"><style scoped></span></span><br><span class="line"><span class="string"></style></span></span><br></span></div><p>修改完成上述代码之后，我们点击某个新闻列表时，会发现都跳转到了首页去，这是因为/newscontent路径在路由配置中还未进行设置，因此会跳转到默认路由页面去。<br>2、编写新闻详情页面组件NewsContent.vue。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><template><br><span class="line">    <div><br><span class="line">      <h3>这是新闻详情页面<<span class="regexp">/h3></span><br><span class="line"><span class="regexp">    <!--</span-->div></span><br><span class="line"><<span class="regexp">/template></span></span><br><span class="line"><span class="regexp"><script></span></span><br><span class="line"><span class="regexp">    export default {</span></span><br><span class="line"><span class="regexp">        name: "NewsContent"</span></span><br><span class="line"><span class="regexp">    }</span></span><br><span class="line"><span class="regexp"></</span>script></span><br><span class="line"><style scoped></span><br><span class="line"><<span class="regexp">/style></span></span><br></pre></td></tr></tbody></table></figure></div><p>3、设置新闻详情页面路由。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> NewsContent <span class="keyword">from</span> <span class="string">'./components/NewsContent'</span>;</span><br><span class="line"><span class="comment">//配置路由数据</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  {<span class="attr">path</span>: <span class="string">'/home'</span>,<span class="attr">component</span>: Home},</span><br><span class="line">  {<span class="attr">path</span>: <span class="string">'/news'</span>,<span class="attr">component</span>: News},</span><br><span class="line">  {<span class="attr">path</span>: <span class="string">'/newscontent'</span>,<span class="attr">component</span>: NewsContent},</span><br><span class="line">  <span class="comment">//默认路由方式，匹配任意不存在的路径，让其显示Home组件内容</span></span><br><span class="line">  {<span class="attr">path</span>: <span class="string">'*'</span>,<span class="attr">component</span>: Home}</span><br><span class="line">];</span><br></pre></td></tr></tbody></table></figure></div><p>4、在点击某个新闻列表的时候，路由路径必须也将该新闻的主键信息传递到详情页面去，这里就涉及到了动态路由的写法。<br>将上述路由修改为动态路由的方式：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置路由数据</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  {<span class="attr">path</span>: <span class="string">'/home'</span>,<span class="attr">component</span>: Home},</span><br><span class="line">  {<span class="attr">path</span>: <span class="string">'/news'</span>,<span class="attr">component</span>: News},</span><br><span class="line">  <span class="comment">//以：参数名称的方式设置动态路由</span></span><br><span class="line">  {<span class="attr">path</span>: <span class="string">'/newscontent/:id'</span>,<span class="attr">component</span>: NewsContent},</span><br><span class="line">  <span class="comment">//默认路由方式，匹配任意不存在的路径，让其显示Home组件内容</span></span><br><span class="line">  {<span class="attr">path</span>: <span class="string">'*'</span>,<span class="attr">component</span>: Home}</span><br><span class="line">];</span><br></pre></td></tr></tbody></table></figure></div><p>将路由的使用方式修改为：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><template></span><br><span class="line">  <div></span><br><span class="line">    <h3>这是新闻页面<<span class="regexp">/h3></span></span><br><span class="line"><span class="regexp">    <ul></span></span><br><span class="line"><span class="regexp">      <li v-for="(item,key) in list"></span></span><br><span class="line"><span class="regexp">        <router-link v-bind:to="'/</span>newscontent/<span class="string">' + key">{{key}}-----{{item}}</router-link></span></span><br><span class="line"><span class="string">      </li></span></span><br><span class="line"><span class="string">    </ul></span></span><br><span class="line"><span class="string">  </div></span></span><br><span class="line"><span class="string"></template></span></span><br></pre></td></tr></tbody></table></figure></div><p>通过上述修改之后，我们发现请求路径中已经携带了将要传递的数据，这种路由风格是符合Restful格式要求的。<br>5、通过Vue实例的声明周期函数在路由组件中获取路由传递的数据。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><template></span><br><span class="line">    <div></span><br><span class="line">      <h3>这是新闻详情页面<<span class="regexp">/h3></span></span><br><span class="line"><span class="regexp">    </</span>div></span><br><span class="line"><<span class="regexp">/template></span></span><br><span class="line"><span class="regexp"><script></span></span><br><span class="line"><span class="regexp">    export default {</span></span><br><span class="line"><span class="regexp">        name: "NewsContent",</span></span><br><span class="line"><span class="regexp">        mounted: function () {</span></span><br><span class="line"><span class="regexp">          console.log(this.$route.params);</span></span><br><span class="line"><span class="regexp">          console.log(this.$route.params.id);</span></span><br><span class="line"><span class="regexp">        }</span></span><br><span class="line"><span class="regexp">    }</span></span><br><span class="line"><span class="regexp"></</span>script></span><br><span class="line"><style scoped></span><br><span class="line"><<span class="regexp">/style></span></span><br></pre></td></tr></tbody></table></figure></div><p>通过Vue实例内置的$route对象便可以获取当前路由对象中传递的路由数据。<br>通过上述案例，我们简单知道了VueRouter动态路由的基本方式，当我们想要在一个请求路径中传递多个数据时，动态路由的方式又应该如何做呢？</p><h5 id="案例3"><a href="#案例3" class="headerlink" title="案例3"></a>案例3</h5><p>1、将main.js中的路由配置修改为：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以：参数名称的方式设置动态路由</span></span><br><span class="line">{<span class="attr">path</span>: <span class="string">'/newscontent/:id/:name'</span>,<span class="attr">component</span>: NewsContent}</span><br></pre></td></tr></tbody></table></figure></div><p>2、将请求路由链接修改为:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><li v-<span class="keyword">for</span>=<span class="string">"(item,key) in list"</span>></span><br><span class="line"><router-link v-bind:to=<span class="string">"'/newscontent/' + key + '/' + item"</span>>{{key}}-----{{item}}<<span class="regexp">/router-link></span></span><br><span class="line"><span class="regexp"></</span>li></span><br></pre></td></tr></tbody></table></figure></div><p>再次测试上述案例，发现上述案例已经以Restful风格的路由方式传递了两组数据。当我们想要传递较多的数据时，仍然以这种方式传递数据，显然路由路径不够清晰，且违反了Restful简洁的风格要求。这个时候，我们就需要使用VueRouter的get传值路由方式了。</p><h2 id="9-3-get传值路由"><a href="#9-3-get传值路由" class="headerlink" title="9.3 get传值路由"></a>9.3 get传值路由</h2><h5 id="案例4"><a href="#案例4" class="headerlink" title="案例4"></a>案例4</h5><p>我们为应用添加一个产品菜单页，测试VueRouter的get传值路由。<br>1、在App.vue主页面中添加产品选项菜单，设置路由路径为/product。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><ul id=<span class="string">"topUl"</span>></span><br><span class="line"><li><span class="xml"><span class="tag"><<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/home"</span>></span>首页<span class="tag"></<span class="name">router-link</span>></span></span><<span class="regexp">/li></span></span><br><span class="line"><span class="regexp"><li><router-link to="/</span>news<span class="string">">新闻</router-link></li></span></span><br><span class="line"><span class="string"><li><router-link to="</span>/product<span class="string">">产品</router-link></li></span></span><br><span class="line"><span class="string"></ul></span></span><br></pre></td></tr></tbody></table></figure></div><p>2、编写产品页面组件Product.vue。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><template></span><br><span class="line">    <div></span><br><span class="line">      <h3>这是产品首页<<span class="regexp">/h3></span></span><br><span class="line"><span class="regexp">      <ul></span></span><br><span class="line"><span class="regexp">        <li v-for="(item,key) in list"></span></span><br><span class="line"><span class="regexp">          <router-link to="/</span>productContent<span class="string">">{{key}}----{{item}}</router-link></span></span><br><span class="line"><span class="string">        </li></span></span><br><span class="line"><span class="string">      </ul></span></span><br><span class="line"><span class="string">    </div></span></span><br><span class="line"><span class="string"></template></span></span><br><span class="line"><span class="string"><script></span></span><br><span class="line"><span class="string">    export default {</span></span><br><span class="line"><span class="string">        name: "</span>Product<span class="string">",</span></span><br><span class="line"><span class="string">        data: function () {</span></span><br><span class="line"><span class="string">            return {</span></span><br><span class="line"><span class="string">                list: ['产品1','产品2','产品3']</span></span><br><span class="line"><span class="string">            }</span></span><br><span class="line"><span class="string">        }</span></span><br><span class="line"><span class="string">    }</span></span><br><span class="line"><span class="string"></script></span></span><br><span class="line"><span class="string"><style scoped></span></span><br><span class="line"><span class="string"></style></span></span><br></span></h3></span></div><p>3、编写产品详情页面。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><template><br><span class="line">    <div><br><span class="line">      <h3>这是产品详情页面<<span class="regexp">/h3></span><br><span class="line"><span class="regexp">    <!--</span-->div></span><br><span class="line"><<span class="regexp">/template></span></span><br><span class="line"><span class="regexp"><script></span></span><br><span class="line"><span class="regexp">    export default {</span></span><br><span class="line"><span class="regexp">        name: "ProductContent"</span></span><br><span class="line"><span class="regexp">    }</span></span><br><span class="line"><span class="regexp"></</span>script></span><br><span class="line"><style scoped></span><br><span class="line"><<span class="regexp">/style></span></span><br></pre></td></tr></tbody></table></figure></div><p>4、配置main.js中的路由信息。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Product <span class="keyword">from</span>  <span class="string">'./components/Product'</span>;</span><br><span class="line"><span class="keyword">import</span> ProductContent <span class="keyword">from</span> <span class="string">'./components/ProductContent'</span>;</span><br><span class="line"><span class="comment">//配置路由数据</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  {<span class="attr">path</span>: <span class="string">'/home'</span>,<span class="attr">component</span>: Home},</span><br><span class="line">  {<span class="attr">path</span>: <span class="string">'/news'</span>,<span class="attr">component</span>: News},</span><br><span class="line">  <span class="comment">//以：参数名称的方式设置动态路由</span></span><br><span class="line">  {<span class="attr">path</span>: <span class="string">'/newscontent/:id/:name'</span>,<span class="attr">component</span>: NewsContent},</span><br><span class="line">  {<span class="attr">path</span>: <span class="string">'/product'</span>,<span class="attr">component</span>: Product},</span><br><span class="line">  {<span class="attr">path</span>: <span class="string">'/productContent'</span>,<span class="attr">component</span>: ProductContent},</span><br><span class="line">  <span class="comment">//默认路由方式，匹配任意不存在的路径，让其显示Home组件内容</span></span><br><span class="line">  {<span class="attr">path</span>: <span class="string">'*'</span>,<span class="attr">component</span>: Home}</span><br><span class="line">];</span><br></pre></td></tr></tbody></table></figure></div><p>编写上述代码之后，产品模块可以正常访问，以上知识都是我们之前学习过的。现在为其添加get传值路由。<br>5、将Product组件中的路由链接路径修改为get传值方式：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><li v-<span class="keyword">for</span>=<span class="string">"(item,key) in list"</span>></span><br><span class="line">  <router-link :to=<span class="string">"'/productContent?key=' + key + '&name=' + item"</span>>{{key}}----{{item}}<<span class="regexp">/router-link></span></span><br><span class="line"><span class="regexp"></</span>li></span><br></pre></td></tr></tbody></table></figure></div><p>6、在ProductContent组件中获取传递的数据信息：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><script></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">        name: <span class="string">"ProductContent"</span>,</span><br><span class="line">        mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.$route.query);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"><<span class="regexp">/script></span></span><br></pre></td></tr></tbody></table></figure></div><p>get传值方式适合传递多组数据值，同时它与路由路径无关，但get传值方式不符合Restful请求风格。</p><h2 id="9-4-嵌套路由"><a href="#9-4-嵌套路由" class="headerlink" title="9.4 嵌套路由"></a>9.4 嵌套路由</h2><p>实际生活中的应用界面，通常由多层嵌套的结构组合而成。同样地，URL 中各段动态路径也按某种结构对应嵌套的各层结构的，在这种结构中，URL路径就需要通过嵌套路由的方式来进行表达。</p><h5 id="案例5"><a href="#案例5" class="headerlink" title="案例5"></a>案例5</h5><p>1、在App.vue中新建一个用户导航菜单项。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><ul id=<span class="string">"topUl"</span>></span><br><span class="line"><li><span class="xml"><span class="tag"><<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/home"</span>></span>首页<span class="tag"></<span class="name">router-link</span>></span></span><<span class="regexp">/li></span></span><br><span class="line"><span class="regexp"><li><router-link to="/</span>news<span class="string">">新闻</router-link></li></span></span><br><span class="line"><span class="string"><li><router-link to="</span>/product<span class="string">">产品</router-link></li></span></span><br><span class="line"><span class="string"><li><router-link to="</span>/user<span class="string">">用户</router-link></li></span></span><br><span class="line"><span class="string"></ul></span></span><br></pre></td></tr></tbody></table></figure></div><p>2、新建用户组件User.vue。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><template></span><br><span class="line">    <div></span><br><span class="line">      <h3>这是用户页面<<span class="regexp">/h3></span></span><br><span class="line"><span class="regexp">      <ui></span></span><br><span class="line"><span class="regexp">        <li><router-link to="/u</span>ser/registuser<span class="string">">用户注册</router-link></li></span></span><br><span class="line"><span class="string">        <li><router-link to="</span>/user/loginuser<span class="string">">用户登录</router-link></li></span></span><br><span class="line"><span class="string">        <li><router-link to="</span>/user/modifyuser<span class="string">">用户修改</router-link></li></span></span><br><span class="line"><span class="string">      </ui></span></span><br><span class="line"><span class="string">      <div></span></span><br><span class="line"><span class="string">        <router-view></router-view></span></span><br><span class="line"><span class="string">      </div></span></span><br><span class="line"><span class="string">    </div></span></span><br><span class="line"><span class="string"></template></span></span><br><span class="line"><span class="string"><script></span></span><br><span class="line"><span class="string">    export default {</span></span><br><span class="line"><span class="string">        name: "</span>User<span class="string">"</span></span><br><span class="line"><span class="string">    }</span></span><br><span class="line"><span class="string"></script></span></span><br><span class="line"><span class="string"><style scoped></span></span><br><span class="line"><span class="string"></style></span></span><br></span></h3></span></div><p>3、为用户组件添加路由。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> User <span class="keyword">from</span> <span class="string">'./components/User'</span>;</span><br><span class="line"><span class="comment">//配置路由数据</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  {<span class="attr">path</span>: <span class="string">'/home'</span>,<span class="attr">component</span>: Home},</span><br><span class="line">  {<span class="attr">path</span>: <span class="string">'/news'</span>,<span class="attr">component</span>: News},</span><br><span class="line">  <span class="comment">//以：参数名称的方式设置动态路由</span></span><br><span class="line">  {<span class="attr">path</span>: <span class="string">'/newscontent/:id/:name'</span>,<span class="attr">component</span>: NewsContent},</span><br><span class="line">  {<span class="attr">path</span>: <span class="string">'/product'</span>,<span class="attr">component</span>: Product},</span><br><span class="line">  {<span class="attr">path</span>: <span class="string">'/productContent'</span>,<span class="attr">component</span>: ProductContent},</span><br><span class="line">  {<span class="attr">path</span>: <span class="string">'/user'</span>,<span class="attr">component</span>: User},</span><br><span class="line">  <span class="comment">//默认路由方式，匹配任意不存在的路径，让其显示Home组件内容</span></span><br><span class="line">  {<span class="attr">path</span>: <span class="string">'*'</span>,<span class="attr">component</span>: Home}</span><br><span class="line">];</span><br></pre></td></tr></tbody></table></figure></div><p>4、用户组件中又存在一个导航栏目，当左侧点击对应功能时，右侧显示出对应功能的页面，这是我们常见的应用布局结构。那么，首先我们需要实现用户组件下导航栏目的路由路径，该路由路径显然与用户组件功能相关。<br>在User组件中添加组件路由路径。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><ui></ui></span><br><span class="line"><li><span class="xml"><span class="tag"><<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/user/registuser"</span>></span>用户注册<span class="tag"><!--<span class="name"-->router-link</span>></span><<span class="regexp">/li></span><br><span class="line"><span class="regexp"></span></span></li><li><router-link to="/u</span>ser/loginuser<span class=" string">">用户登录</router-link></li></span><br><span class="line"><span class="string"><li><router-link to="</span>/user/modifyuser<span class=" string">">用户修改</router-link></li></span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></tbody></table></figure></div><p>5、在components文件夹下创建user文件夹，在user文件夹下分别创建“RegistUser”、“LoginUser”、“ModifyUser”三个组件。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><template><br><span class="line">    <div><br><span class="line">      <h3>用户注册页面<<span class="regexp">/h3></span><br><span class="line"><span class="regexp">    <!--</span-->div></span><br><span class="line"><<span class="regexp">/template></span></span><br><span class="line"><span class="regexp"><script></span></span><br><span class="line"><span class="regexp">    export default {</span></span><br><span class="line"><span class="regexp">        name: "RegistUser"</span></span><br><span class="line"><span class="regexp">    }</span></span><br><span class="line"><span class="regexp"></</span>script></span><br><span class="line"><style scoped></span><br><span class="line"><<span class="regexp">/style></span></span><br></pre></td></tr></tbody></table></figure></div><p>6、为User组件下的三个子组件设置嵌套路由，为父子组件之间建立路由关系。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> LoginUser <span class="keyword">from</span> <span class="string">'./components/user/LoginUser'</span>;</span><br><span class="line"><span class="keyword">import</span> ModifyUser <span class="keyword">from</span> <span class="string">'./components/user/ModifyUser'</span>;</span><br><span class="line"><span class="keyword">import</span> RegistUser <span class="keyword">from</span> <span class="string">'./components/user/RegistUser'</span>;</span><br><span class="line"><span class="comment">//配置路由数据</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  {<span class="attr">path</span>: <span class="string">'/home'</span>,<span class="attr">component</span>: Home},</span><br><span class="line">  {<span class="attr">path</span>: <span class="string">'/news'</span>,<span class="attr">component</span>: News},</span><br><span class="line">  <span class="comment">//以：参数名称的方式设置动态路由</span></span><br><span class="line">  {<span class="attr">path</span>: <span class="string">'/newscontent/:id/:name'</span>,<span class="attr">component</span>: NewsContent},</span><br><span class="line">  {<span class="attr">path</span>: <span class="string">'/product'</span>,<span class="attr">component</span>: Product},</span><br><span class="line">  {<span class="attr">path</span>: <span class="string">'/productContent'</span>,<span class="attr">component</span>: ProductContent},</span><br><span class="line">  {</span><br><span class="line">      path: <span class="string">'/user'</span>,</span><br><span class="line">      component: User,</span><br><span class="line">      <span class="comment">//嵌套路由通过子节点children来实现，</span></span><br><span class="line">      children: [</span><br><span class="line">          {</span><br><span class="line">              <span class="comment">//注意，子路由中的path不能以/开头，否则将无法路由到数据</span></span><br><span class="line">              path: <span class="string">'registuser'</span>,</span><br><span class="line">              component: RegistUser</span><br><span class="line">          },</span><br><span class="line">          {</span><br><span class="line">              path: <span class="string">'loginuser'</span>,</span><br><span class="line">              component: LoginUser</span><br><span class="line">          },</span><br><span class="line">          {</span><br><span class="line">              path: <span class="string">'modifyuser'</span>,</span><br><span class="line">              component: ModifyUser</span><br><span class="line">          }</span><br><span class="line">      ]</span><br><span class="line">  },</span><br><span class="line">  <span class="comment">//默认路由方式，匹配任意不存在的路径，让其显示Home组件内容</span></span><br><span class="line">  {<span class="attr">path</span>: <span class="string">'*'</span>,<span class="attr">component</span>: Home}</span><br><span class="line">];</span><br></pre></td></tr></tbody></table></figure></div><p>7、尝试进行以下路由配置，测试配置是否正确。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置路由数据</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  {<span class="attr">path</span>: <span class="string">'/home'</span>,<span class="attr">component</span>: Home},</span><br><span class="line">  {<span class="attr">path</span>: <span class="string">'/news'</span>,<span class="attr">component</span>: News},</span><br><span class="line">  <span class="comment">//以：参数名称的方式设置动态路由</span></span><br><span class="line">  {<span class="attr">path</span>: <span class="string">'/newscontent/:id/:name'</span>,<span class="attr">component</span>: NewsContent},</span><br><span class="line">  {<span class="attr">path</span>: <span class="string">'/product'</span>,<span class="attr">component</span>: Product},</span><br><span class="line">  {<span class="attr">path</span>: <span class="string">'/productContent'</span>,<span class="attr">component</span>: ProductContent},</span><br><span class="line">  {</span><br><span class="line">      path: <span class="string">'/user'</span>,</span><br><span class="line">      component: User,</span><br><span class="line">      <span class="comment">//嵌套路由通过子节点children来实现，</span></span><br><span class="line">      children: [</span><br><span class="line">          {</span><br><span class="line">              <span class="comment">//注意，子路由中的path不能以/开头，否则将无法路由到数据</span></span><br><span class="line">              path: <span class="string">'registuser'</span>,</span><br><span class="line">              component: RegistUser</span><br><span class="line">          },</span><br><span class="line">          {</span><br><span class="line">              path: <span class="string">'/loginuser'</span>,</span><br><span class="line">              component: LoginUser</span><br><span class="line">          },</span><br><span class="line">          {</span><br><span class="line">              path: <span class="string">'modifyuser/sonModify'</span>,</span><br><span class="line">              component: ModifyUser</span><br><span class="line">          }</span><br><span class="line">      ]</span><br><span class="line">  },</span><br><span class="line">  <span class="comment">//默认路由方式，匹配任意不存在的路径，让其显示Home组件内容</span></span><br><span class="line">  {<span class="attr">path</span>: <span class="string">'*'</span>,<span class="attr">component</span>: Home}</span><br><span class="line">];</span><br></pre></td></tr></tbody></table></figure></div><p>将User组件页面修改为：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><ui></span><br><span class="line"><li><span class="xml"><span class="tag"><<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/user/registuser"</span>></span>用户注册<span class="tag"></<span class="name">router-link</span>></span></span><<span class="regexp">/li></span></span><br><span class="line"><span class="regexp"><li><router-link to="/u</span>ser/loginuser<span class="string">">用户登录</router-link></li></span></span><br><span class="line"><span class="string"><li><router-link to="</span>/user/modifyuser/sonModify<span class="string">">用户修改</router-link></li></span></span><br><span class="line"><span class="string"></ui></span></span><br></pre></td></tr></tbody></table></figure></div><p>我们会发现用户注册路由正常，用户登录路由出现跳转到默认路由页面的情况，用户修改路由也正常。<br>8、路由配置不变，再尝试将路由的访问路径修改为如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><ui></span><br><span class="line"><li><span class="xml"><span class="tag"><<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/user/registuser"</span>></span>用户注册<span class="tag"></<span class="name">router-link</span>></span></span><<span class="regexp">/li></span></span><br><span class="line"><span class="regexp"><!--<li><router-link to="/u</span>ser/loginuser<span class="string">">用户登录</router-link></li>--></span></span><br><span class="line"><span class="string"><li><router-link to="</span>/loginuser<span class="string">">用户登录</router-link></li></span></span><br><span class="line"><span class="string"><li><router-link to="</span>/user/modifyuser/sonModify<span class="string">">用户修改</router-link></li></span></span><br><span class="line"><span class="string"></ui></span></span><br></pre></td></tr></tbody></table></figure></div><p>发现用户登录路由也正常，这说明在嵌套路由中，子路由中如果以斜杠开头设置路由路径，那么该路径将以根路径/#做相对处理。</p><h2 id="9-5-编程式导航"><a href="#9-5-编程式导航" class="headerlink" title="9.5 编程式导航"></a>9.5 编程式导航</h2><p>使用<router-link>标签进行路由跳转时，更像是一种<a>标签的路由跳转，但在某些情况下，我们并不是直接点击链接进行跳转的。比如，在登录功能处的按钮，点击按钮之后，并不是直接进行页面跳转，而是进行相关JS校验之后，再以JS代码进行页面跳转的。而所谓的编程式导航就是以JS代码的方式进行路由跳转的控制。<br>VueRouter提供了$router.push()来支持路由跳转。该方法的参数可以是一个字符串路径，或者一个描述地址的对象。例如：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串</span></span><br><span class="line">router.push(<span class="string">'/home'</span>)</span><br><span class="line"><span class="comment">// 对象</span></span><br><span class="line">router.push({ <span class="attr">path</span>: <span class="string">'/home'</span> })</span><br><span class="line"><span class="comment">// 命名的路由</span></span><br><span class="line">router.push({ <span class="attr">name</span>: <span class="string">'user'</span>, <span class="attr">params</span>: { <span class="attr">userId</span>: <span class="string">'123'</span> }})</span><br><span class="line"><span class="comment">// 带查询参数，变成 /register?plan=private</span></span><br><span class="line">router.push({ <span class="attr">path</span>: <span class="string">'register'</span>, <span class="attr">query</span>: { <span class="attr">plan</span>: <span class="string">'private'</span> }})</span><br></pre></td></tr></tbody></table></figure></div><h5 id="案例6"><a href="#案例6" class="headerlink" title="案例6"></a>案例6</h5><p>基于上述案例，不修改原有的路由配置，在Home首页组件中测试各种编程式导航的路由方式：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><template></span><br><span class="line">  <div></span><br><span class="line">    <h3>这是首页<<span class="regexp">/h3></span></span><br><span class="line"><span class="regexp">    <button type="button" v-on:click="goUser()">跳转到用户页面</</span>button></span><br><span class="line">  <<span class="regexp">/div></span></span><br><span class="line"><span class="regexp"></</span>template></span><br><span class="line"><script></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">        name: <span class="string">"Home"</span>,</span><br><span class="line">        methods: {</span><br><span class="line">            goUser(){</span><br><span class="line">                <span class="comment">/*第一种：字符串路径，基于当前路径做相对处理，替换当前组件所在的视窗*/</span></span><br><span class="line">                <span class="keyword">this</span>.$router.push(<span class="string">"/news"</span>);</span><br><span class="line">                <span class="comment">//this.$router.push("news");</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"><<span class="regexp">/script></span></span><br><span class="line"><span class="regexp"><style scoped></span></span><br><span class="line"><span class="regexp"></</span>style></span><br></pre></td></tr></tbody></table></figure></div><p>测试第二种路由方式：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><script></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">        name: <span class="string">"Home"</span>,</span><br><span class="line">        methods: {</span><br><span class="line">            goUser(){</span><br><span class="line">                <span class="comment">/*第二种方式：path属性对象*/</span></span><br><span class="line">                <span class="keyword">this</span>.$router.push({<span class="attr">path</span>: <span class="string">"/news"</span>});</span><br><span class="line">                <span class="comment">/*this.$router.push({path: "/user"});</span></span><br><span class="line"><span class="comment">                this.$router.push({path: "/user/modifyuser/sonModify"});*/</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"><<span class="regexp">/script></span></span><br></pre></td></tr></tbody></table></figure></div><p>第三种编程式路由涉及到了路由的命名概念，路由的命名操作也十分简单：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过name属性为product路由设置一个路由名称</span></span><br><span class="line">  {<span class="attr">path</span>: <span class="string">'/product'</span>,<span class="attr">component</span>: Product,<span class="attr">name</span>: <span class="string">'product'</span>},</span><br><span class="line">  {<span class="attr">path</span>: <span class="string">'/newscontent/:id/:name'</span>,<span class="attr">component</span>: NewsContent,<span class="attr">name</span>: <span class="string">'newscontent'</span>},</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><script></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">        name: <span class="string">"Home"</span>,</span><br><span class="line">        methods: {</span><br><span class="line">            goUser(){</span><br><span class="line">                <span class="comment">/*第三种方式：命名路由对象*/</span></span><br><span class="line">                <span class="comment">//this.$router.push({name: 'product'});</span></span><br><span class="line">                <span class="comment">//等同于/newscontent/1/news1，注意path的方式不能使用params属性来传递参数</span></span><br><span class="line">                <span class="keyword">this</span>.$router.push({<span class="attr">name</span>: <span class="string">'newscontent'</span>, <span class="attr">params</span>:{<span class="attr">id</span>: <span class="string">'1'</span>,<span class="attr">name</span>: <span class="string">'news1'</span>}});</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"><<span class="regexp">/script></span></span><br></pre></td></tr></tbody></table></figure></div><p>测试第四种路由方式：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><script></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">        name: <span class="string">"Home"</span>,</span><br><span class="line">        methods: {</span><br><span class="line">            goUser(){</span><br><span class="line">                <span class="comment">/*第四种方式：path属性的get传参，等同于/productContent?id=1&name=product1*/</span></span><br><span class="line">                <span class="keyword">this</span>.$router.push({<span class="attr">path</span>: <span class="string">'/productContent'</span>,<span class="attr">query</span>: {<span class="attr">id</span>: <span class="string">'1'</span>,<span class="attr">name</span>: <span class="string">'product1'</span>}});</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"><<span class="regexp">/script></span></span><br></pre></td></tr></tbody></table></figure></div><h2 id="9-6-路由的重定向与别名"><a href="#9-6-路由的重定向与别名" class="headerlink" title="9.6 路由的重定向与别名"></a>9.6 路由的重定向与别名</h2><p>在进行路由配置时，也支持路由的重定向操作，将某个请求路径重定向到另一个路径中去。<br>将默认路由配置修改为重定向：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认路由方式，匹配任意不存在的路径，让其显示Home组件内容</span></span><br><span class="line">{<span class="attr">path</span>: <span class="string">'*'</span>,<span class="attr">redirect</span>: <span class="string">'/home'</span>}</span><br></pre></td></tr></tbody></table></figure></div><p>重定向也支持路由命名的方式：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{ <span class="attr">path</span>: <span class="string">'/a'</span>, <span class="attr">redirect</span>: { <span class="attr">name</span>: <span class="string">'foo'</span> }}</span><br></pre></td></tr></tbody></table></figure></div><p>除了重定向这种操作之外，VueRouter还提供了一种区别于重定向的别名方式：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{<span class="attr">path</span>: <span class="string">'/home'</span>,<span class="attr">component</span>: Home,<span class="attr">alias</span>: <span class="string">'/a'</span>},</span><br></pre></td></tr></tbody></table></figure></div><p>当访问’/home’和’/a’两个路径时都能够访问到组件Home。与重定向不同的是，客户端浏览器不需要发起两次请求。</p><h2 id="9-7-视窗的命名"><a href="#9-7-视窗的命名" class="headerlink" title="9.7 视窗的命名"></a>9.7 视窗的命名</h2><p>在上述案例中，我们的一条<router-link>标签只能触发当前组件内的一个<router-view>视窗发生改变。但如果我们想要点击一个路由之后，触发多个组件在不同的视窗内进行内容的呈现时，这就涉及到了视窗的同时使用与命名。<br>通过为<router-view>标签添加name属性，能够为当前的视窗设置视窗名称，若不设置name属性，默认名称为default。</p><h5 id="案例7"><a href="#案例7" class="headerlink" title="案例7"></a>案例7</h5><p>1、在App.vue中添加一个新的路由链接“设置”，并同时创建三个视窗。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><template></span><br><span class="line">  <div id=<span class="string">"app"</span>></span><br><span class="line">    <div></span><br><span class="line">      <ul id=<span class="string">"topUl"</span>></span><br><span class="line">        <li><span class="xml"><span class="tag"><<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/home"</span>></span>首页<span class="tag"></<span class="name">router-link</span>></span></span><<span class="regexp">/li></span></span><br><span class="line"><span class="regexp">        <li><router-link to="/</span>news<span class="string">">新闻</router-link></li></span></span><br><span class="line"><span class="string">        <li><router-link to="</span>/product<span class="string">">产品</router-link></li></span></span><br><span class="line"><span class="string">        <li><router-link to="</span>/user<span class="string">">用户</router-link></li></span></span><br><span class="line"><span class="string">        <li><router-link to="</span>/setting<span class="string">">设置</router-link></li></span></span><br><span class="line"><span class="string">      </ul></span></span><br><span class="line"><span class="string">    </div></span></span><br><span class="line"><span class="string">    <div id="</span>main<span class="string">"></span></span><br><span class="line"><span class="string">  <!--同时创建三个视窗，第一个为默认名称default--></span></span><br><span class="line"><span class="string">      <router-view></router-view></span></span><br><span class="line"><span class="string">      <router-view name="</span>view1<span class="string">"></router-view></span></span><br><span class="line"><span class="string">      <router-view name="</span>view2<span class="string">"></router-view></span></span><br><span class="line"><span class="string">    </div></span></span><br><span class="line"><span class="string">  </div></span></span><br><span class="line"><span class="string"></template></span></span><br></pre></td></tr></tbody></table></figure></div><p>2、创建三个Setting组件，名为Setting1、Setting2、Setting3:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><template></span><br><span class="line">    <div></span><br><span class="line">      <h3>Setting1页面<<span class="regexp">/h3></span></span><br><span class="line"><span class="regexp">    </</span>div></span><br><span class="line"><<span class="regexp">/template></span></span><br><span class="line"><span class="regexp"><script></span></span><br><span class="line"><span class="regexp">    export default {</span></span><br><span class="line"><span class="regexp">        name: "Setting1"</span></span><br><span class="line"><span class="regexp">    }</span></span><br><span class="line"><span class="regexp"></</span>script></span><br><span class="line"><style scoped></span><br><span class="line"><<span class="regexp">/style></span></span><br></pre></td></tr></tbody></table></figure></div><p>3、设置多个视窗的路由组件。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Setting1 <span class="keyword">from</span> <span class="string">'./components/Setting1'</span>;</span><br><span class="line"><span class="keyword">import</span> Setting2 <span class="keyword">from</span> <span class="string">'./components/Setting2'</span>;</span><br><span class="line"><span class="keyword">import</span> Setting3 <span class="keyword">from</span> <span class="string">'./components/Setting3'</span>;</span><br><span class="line">{</span><br><span class="line">      path: <span class="string">"/setting"</span>,</span><br><span class="line">      <span class="comment">/*一个路由路径，同时为多个视窗设置响应组件，注意，这里为components属性，不再是component属性*/</span></span><br><span class="line">      components: {</span><br><span class="line">          <span class="keyword">default</span>: Setting1,</span><br><span class="line">          view1: Setting2,</span><br><span class="line">          view2: Setting3</span><br><span class="line">      }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure></div><h2 id="9-8-History模式"><a href="#9-8-History模式" class="headerlink" title="9.8 History模式"></a>9.8 History模式</h2><p>我们上述学习的路由模式为VueRouter默认的Hash模式，它的标志是路径中带有一个/#的路径。这种路径看起来与通常的路径不大符合，要想将路由路径变得“美观”一些，我们可以尝试使用VueRouter提供的另一种路由模式——History模式。<br>在初时化路由实例时，添加一个mode属性即可切换路由模式：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter({</span><br><span class="line">  routes: routes,</span><br><span class="line">  mode: <span class="string">'history'</span></span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></div><p>History模式虽然与通常的路径格式变得一致了，但在后台数据请求过程中，可能会出现跨越异常的问题，往往需要在后端服务器容器中配置相关信息，处理该问题。<br>对于Hash与History两种路由模式，Vue并没有强制要求我们使用哪种方式，根据实际情况选择即可。</p></body></html></script></span></span></span></h3></span></div></span></template></span></pre></td></tr></tbody></table></figure></div></span></template></span></pre></td></tr></tbody></table></figure></div></span></template></span></pre></td></tr></tbody></table></figure></div></span></span></li></span></ul></span></div></span></div></span></template></span></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
